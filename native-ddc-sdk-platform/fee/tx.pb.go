// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fee/tx.proto

package fee

import (
	context "context"
	fmt "fmt"
	native_ddc_sdk_platform "github.com/bianjieai/ddc-sdk-go/native-ddc-sdk-platform"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRecharge defines the Msg/Recharge request type.
type MsgRecharge struct {
	From   string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To     string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgRecharge) Reset()         { *m = MsgRecharge{} }
func (m *MsgRecharge) String() string { return proto.CompactTextString(m) }
func (*MsgRecharge) ProtoMessage()    {}
func (*MsgRecharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{0}
}
func (m *MsgRecharge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecharge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecharge.Merge(m, src)
}
func (m *MsgRecharge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecharge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecharge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecharge proto.InternalMessageInfo

// MsgRechargeResponse defines the Msg/Recharge response type.
type MsgRechargeResponse struct {
}

func (m *MsgRechargeResponse) Reset()         { *m = MsgRechargeResponse{} }
func (m *MsgRechargeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRechargeResponse) ProtoMessage()    {}
func (*MsgRechargeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{1}
}
func (m *MsgRechargeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRechargeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRechargeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRechargeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRechargeResponse.Merge(m, src)
}
func (m *MsgRechargeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRechargeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRechargeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRechargeResponse proto.InternalMessageInfo

// MsgRechargeBatch defines the Msg/RechargeBatch request type.
type MsgRechargeBatch struct {
	From   string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To     []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	Amount []uint64 `protobuf:"varint,3,rep,packed,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgRechargeBatch) Reset()         { *m = MsgRechargeBatch{} }
func (m *MsgRechargeBatch) String() string { return proto.CompactTextString(m) }
func (*MsgRechargeBatch) ProtoMessage()    {}
func (*MsgRechargeBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{2}
}
func (m *MsgRechargeBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRechargeBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRechargeBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRechargeBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRechargeBatch.Merge(m, src)
}
func (m *MsgRechargeBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgRechargeBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRechargeBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRechargeBatch proto.InternalMessageInfo

// MsgRechargeBatchResponse defines the Msg/RechargeBatch response type.
type MsgRechargeBatchResponse struct {
}

func (m *MsgRechargeBatchResponse) Reset()         { *m = MsgRechargeBatchResponse{} }
func (m *MsgRechargeBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRechargeBatchResponse) ProtoMessage()    {}
func (*MsgRechargeBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{3}
}
func (m *MsgRechargeBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRechargeBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRechargeBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRechargeBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRechargeBatchResponse.Merge(m, src)
}
func (m *MsgRechargeBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRechargeBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRechargeBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRechargeBatchResponse proto.InternalMessageInfo

// MsgSettlement defines the Msg/Settlement request type.
type MsgSettlement struct {
	Protocol native_ddc_sdk_platform.Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=bianjieai.ddc.Protocol" json:"protocol,omitempty"`
	Denom    string                           `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount   uint64                           `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Operator string                           `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgSettlement) Reset()         { *m = MsgSettlement{} }
func (m *MsgSettlement) String() string { return proto.CompactTextString(m) }
func (*MsgSettlement) ProtoMessage()    {}
func (*MsgSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{4}
}
func (m *MsgSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSettlement.Merge(m, src)
}
func (m *MsgSettlement) XXX_Size() int {
	return m.Size()
}
func (m *MsgSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSettlement proto.InternalMessageInfo

// MsgSettlementResponse defines the Msg/Settlement response type.
type MsgSettlementResponse struct {
}

func (m *MsgSettlementResponse) Reset()         { *m = MsgSettlementResponse{} }
func (m *MsgSettlementResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSettlementResponse) ProtoMessage()    {}
func (*MsgSettlementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{5}
}
func (m *MsgSettlementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSettlementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSettlementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSettlementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSettlementResponse.Merge(m, src)
}
func (m *MsgSettlementResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSettlementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSettlementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSettlementResponse proto.InternalMessageInfo

// MsgSetFeeRule defines the Msg/SetFeeRule request type.
type MsgSetFeeRule struct {
	Protocol native_ddc_sdk_platform.Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=bianjieai.ddc.Protocol" json:"protocol,omitempty"`
	Denom    string                           `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Function native_ddc_sdk_platform.Function `protobuf:"varint,3,opt,name=function,proto3,enum=bianjieai.ddc.Function" json:"function,omitempty"`
	Fee      uint32                           `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Operator string                           `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgSetFeeRule) Reset()         { *m = MsgSetFeeRule{} }
func (m *MsgSetFeeRule) String() string { return proto.CompactTextString(m) }
func (*MsgSetFeeRule) ProtoMessage()    {}
func (*MsgSetFeeRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{6}
}
func (m *MsgSetFeeRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFeeRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFeeRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFeeRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFeeRule.Merge(m, src)
}
func (m *MsgSetFeeRule) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFeeRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFeeRule.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFeeRule proto.InternalMessageInfo

// MsgSetFeeRuleResponse defines the Msg/SetFeeRule response type.
type MsgSetFeeRuleResponse struct {
}

func (m *MsgSetFeeRuleResponse) Reset()         { *m = MsgSetFeeRuleResponse{} }
func (m *MsgSetFeeRuleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetFeeRuleResponse) ProtoMessage()    {}
func (*MsgSetFeeRuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{7}
}
func (m *MsgSetFeeRuleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFeeRuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFeeRuleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFeeRuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFeeRuleResponse.Merge(m, src)
}
func (m *MsgSetFeeRuleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFeeRuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFeeRuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFeeRuleResponse proto.InternalMessageInfo

// MsgDeleteFeeRule defines the Msg/DeleteFeeRule request type.
type MsgDeleteFeeRule struct {
	Protocol native_ddc_sdk_platform.Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=bianjieai.ddc.Protocol" json:"protocol,omitempty"`
	Denom    string                           `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Function native_ddc_sdk_platform.Function `protobuf:"varint,3,opt,name=function,proto3,enum=bianjieai.ddc.Function" json:"function,omitempty"`
	Operator string                           `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgDeleteFeeRule) Reset()         { *m = MsgDeleteFeeRule{} }
func (m *MsgDeleteFeeRule) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteFeeRule) ProtoMessage()    {}
func (*MsgDeleteFeeRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{8}
}
func (m *MsgDeleteFeeRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteFeeRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteFeeRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteFeeRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteFeeRule.Merge(m, src)
}
func (m *MsgDeleteFeeRule) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteFeeRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteFeeRule.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteFeeRule proto.InternalMessageInfo

// MsgDeleteFeeRule defines the Msg/DeleteFeeRule response type.
type MsgDeleteFeeRuleResponse struct {
}

func (m *MsgDeleteFeeRuleResponse) Reset()         { *m = MsgDeleteFeeRuleResponse{} }
func (m *MsgDeleteFeeRuleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteFeeRuleResponse) ProtoMessage()    {}
func (*MsgDeleteFeeRuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{9}
}
func (m *MsgDeleteFeeRuleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteFeeRuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteFeeRuleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteFeeRuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteFeeRuleResponse.Merge(m, src)
}
func (m *MsgDeleteFeeRuleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteFeeRuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteFeeRuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteFeeRuleResponse proto.InternalMessageInfo

// MsgRevokeDDC defines the Msg/RevokeDDC request type.
type MsgRevokeDDC struct {
	Protocol native_ddc_sdk_platform.Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=bianjieai.ddc.Protocol" json:"protocol,omitempty"`
	Denom    string                           `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Operator string                           `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgRevokeDDC) Reset()         { *m = MsgRevokeDDC{} }
func (m *MsgRevokeDDC) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeDDC) ProtoMessage()    {}
func (*MsgRevokeDDC) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{10}
}
func (m *MsgRevokeDDC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeDDC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeDDC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeDDC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeDDC.Merge(m, src)
}
func (m *MsgRevokeDDC) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeDDC) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeDDC.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeDDC proto.InternalMessageInfo

// MsgRevokeDDCResponse defines the Msg/RevokeDDC response type.
type MsgRevokeDDCResponse struct {
}

func (m *MsgRevokeDDCResponse) Reset()         { *m = MsgRevokeDDCResponse{} }
func (m *MsgRevokeDDCResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeDDCResponse) ProtoMessage()    {}
func (*MsgRevokeDDCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c6c0a64b9528cab, []int{11}
}
func (m *MsgRevokeDDCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeDDCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeDDCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeDDCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeDDCResponse.Merge(m, src)
}
func (m *MsgRevokeDDCResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeDDCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeDDCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeDDCResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRecharge)(nil), "bianjieai.ddc.fee.MsgRecharge")
	proto.RegisterType((*MsgRechargeResponse)(nil), "bianjieai.ddc.fee.MsgRechargeResponse")
	proto.RegisterType((*MsgRechargeBatch)(nil), "bianjieai.ddc.fee.MsgRechargeBatch")
	proto.RegisterType((*MsgRechargeBatchResponse)(nil), "bianjieai.ddc.fee.MsgRechargeBatchResponse")
	proto.RegisterType((*MsgSettlement)(nil), "bianjieai.ddc.fee.MsgSettlement")
	proto.RegisterType((*MsgSettlementResponse)(nil), "bianjieai.ddc.fee.MsgSettlementResponse")
	proto.RegisterType((*MsgSetFeeRule)(nil), "bianjieai.ddc.fee.MsgSetFeeRule")
	proto.RegisterType((*MsgSetFeeRuleResponse)(nil), "bianjieai.ddc.fee.MsgSetFeeRuleResponse")
	proto.RegisterType((*MsgDeleteFeeRule)(nil), "bianjieai.ddc.fee.MsgDeleteFeeRule")
	proto.RegisterType((*MsgDeleteFeeRuleResponse)(nil), "bianjieai.ddc.fee.MsgDeleteFeeRuleResponse")
	proto.RegisterType((*MsgRevokeDDC)(nil), "bianjieai.ddc.fee.MsgRevokeDDC")
	proto.RegisterType((*MsgRevokeDDCResponse)(nil), "bianjieai.ddc.fee.MsgRevokeDDCResponse")
}

func init() { proto.RegisterFile("fee/tx.proto", fileDescriptor_4c6c0a64b9528cab) }

var fileDescriptor_4c6c0a64b9528cab = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x31, 0x6f, 0xda, 0x40,
	0x14, 0xc6, 0x98, 0x44, 0xf0, 0x1a, 0xa2, 0xf4, 0x4a, 0x12, 0xe4, 0xc1, 0x20, 0x2a, 0xb5, 0x48,
	0x15, 0xb6, 0x14, 0xb6, 0x76, 0x4b, 0x51, 0x36, 0xa4, 0xca, 0x51, 0xa4, 0xa8, 0x9b, 0xb1, 0x9f,
	0x8d, 0x1b, 0xdb, 0x87, 0xec, 0x23, 0xea, 0xd6, 0xb5, 0x63, 0xc7, 0x8e, 0x99, 0xfb, 0x0b, 0xfa,
	0x0f, 0xda, 0x31, 0x63, 0xc7, 0x0a, 0x96, 0xfe, 0x8c, 0x8a, 0xc3, 0xbe, 0xd8, 0x04, 0x43, 0x86,
	0x0c, 0xd9, 0xee, 0xee, 0x7d, 0xf7, 0xbd, 0xef, 0x7b, 0xfe, 0xce, 0xb0, 0xe7, 0x20, 0xea, 0xec,
	0xb3, 0x36, 0x89, 0x28, 0xa3, 0xe4, 0xf9, 0xc8, 0x33, 0xc3, 0x4f, 0x1e, 0x9a, 0x9e, 0x66, 0xdb,
	0x96, 0xe6, 0x20, 0x2a, 0x0d, 0x97, 0xba, 0x94, 0x57, 0xf5, 0xc5, 0x6a, 0x09, 0x54, 0x6a, 0x8b,
	0x32, 0x5f, 0x76, 0xce, 0xe1, 0xd9, 0x30, 0x76, 0x0d, 0xb4, 0xc6, 0x66, 0xe4, 0x22, 0x21, 0x50,
	0x71, 0x22, 0x1a, 0x34, 0xa5, 0xb6, 0xd4, 0xad, 0x19, 0x7c, 0x4d, 0xf6, 0xa1, 0xcc, 0x68, 0xb3,
	0xcc, 0x4f, 0xca, 0x8c, 0x92, 0x23, 0xd8, 0x35, 0x03, 0x3a, 0x0d, 0x59, 0x53, 0x6e, 0x4b, 0xdd,
	0x8a, 0x91, 0xec, 0xde, 0x56, 0xbf, 0xde, 0xb4, 0x4a, 0xff, 0x6e, 0x5a, 0xa5, 0xce, 0x21, 0xbc,
	0xc8, 0x90, 0x1a, 0x18, 0x4f, 0x68, 0x18, 0x63, 0xe7, 0x12, 0x0e, 0x32, 0xc7, 0xa7, 0x26, 0xb3,
	0xc6, 0x1b, 0x1b, 0xca, 0x6b, 0x1a, 0xca, 0x6b, 0x1b, 0x2a, 0xd0, 0x5c, 0x65, 0x16, 0x5d, 0xbf,
	0x4b, 0x50, 0x1f, 0xc6, 0xee, 0x39, 0x32, 0xe6, 0x63, 0x80, 0x21, 0x23, 0x7d, 0xa8, 0x72, 0xf3,
	0x16, 0xf5, 0x79, 0xdf, 0xfd, 0x93, 0x63, 0x2d, 0x3f, 0xba, 0x0f, 0x49, 0xd9, 0x10, 0x40, 0xd2,
	0x80, 0x1d, 0x1b, 0x43, 0x1a, 0x24, 0x83, 0x58, 0x6e, 0x8a, 0x66, 0x41, 0x14, 0xa8, 0xd2, 0x09,
	0x46, 0x26, 0xa3, 0x51, 0xb3, 0xc2, 0x2f, 0x88, 0x7d, 0x46, 0xf6, 0x31, 0x1c, 0xe6, 0x94, 0x09,
	0xcd, 0xbf, 0x84, 0xe6, 0x33, 0x44, 0x63, 0xea, 0xe3, 0x63, 0x6a, 0xee, 0x43, 0xd5, 0x99, 0x86,
	0x16, 0xf3, 0x68, 0xc8, 0x55, 0xdf, 0xa7, 0x3a, 0x4b, 0xca, 0x86, 0x00, 0x92, 0x03, 0x90, 0x1d,
	0x44, 0xee, 0xa5, 0x6e, 0x2c, 0x96, 0x39, 0x8b, 0x3b, 0xdb, 0x2d, 0x26, 0x46, 0x84, 0xc5, 0x9f,
	0x12, 0x4f, 0xc3, 0x00, 0x7d, 0x64, 0xf8, 0x54, 0x5c, 0x3e, 0xec, 0xb3, 0x2d, 0xd3, 0x96, 0x53,
	0x2e, 0x6c, 0x7d, 0x81, 0x3d, 0x9e, 0xc4, 0x6b, 0x7a, 0x85, 0x83, 0xc1, 0xfb, 0xc7, 0x74, 0x94,
	0x15, 0x27, 0x17, 0x8a, 0x3b, 0x82, 0x46, 0x56, 0x40, 0x2a, 0xec, 0xe4, 0x47, 0x05, 0xe4, 0x61,
	0xec, 0x12, 0x03, 0xaa, 0xe2, 0xb5, 0xab, 0xda, 0xbd, 0x3f, 0x86, 0x96, 0x79, 0x47, 0xca, 0xab,
	0xcd, 0xf5, 0x94, 0x9b, 0x98, 0x50, 0xcf, 0xbf, 0xea, 0x97, 0x9b, 0x2f, 0x72, 0x90, 0xf2, 0xe6,
	0x01, 0x20, 0xd1, 0xe2, 0x12, 0x20, 0xf3, 0x82, 0xdb, 0xeb, 0xaf, 0xde, 0x21, 0x94, 0xee, 0x36,
	0xc4, 0x0a, 0x73, 0x9a, 0xc0, 0x62, 0xe6, 0x04, 0xb1, 0x81, 0x79, 0x25, 0x0b, 0x8b, 0xb1, 0xe4,
	0xe3, 0x5d, 0x30, 0x96, 0x1c, 0xa8, 0x68, 0x2c, 0x6b, 0xe3, 0x46, 0x2e, 0xa0, 0x76, 0x97, 0xb5,
	0x56, 0xd1, 0x40, 0x13, 0x80, 0xf2, 0x7a, 0x0b, 0x20, 0xa5, 0x3d, 0xbd, 0xf8, 0x3d, 0x53, 0xa5,
	0xdb, 0x99, 0x2a, 0xfd, 0x9d, 0xa9, 0xd2, 0xb7, 0xb9, 0x5a, 0xba, 0x9d, 0xab, 0xa5, 0x3f, 0x73,
	0xb5, 0xf4, 0xf1, 0x9d, 0xeb, 0xb1, 0xf1, 0x74, 0xa4, 0x59, 0x34, 0xd0, 0x05, 0x99, 0x6e, 0xdb,
	0x56, 0x2f, 0xb6, 0xaf, 0x7a, 0x2e, 0xd5, 0x43, 0x93, 0x79, 0xd7, 0xd8, 0x4b, 0x4f, 0x26, 0xbe,
	0xc9, 0x1c, 0x1a, 0x05, 0xba, 0x83, 0x38, 0xda, 0xe5, 0x09, 0xef, 0xff, 0x0f, 0x00, 0x00, 0xff,
	0xff, 0xaa, 0xbc, 0x50, 0x24, 0xb7, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Recharge defines a method for recharging for a account.
	Recharge(ctx context.Context, in *MsgRecharge, opts ...grpc.CallOption) (*MsgRechargeResponse, error)
	// RechargeBatch defines a method for recharging for asome accounts.
	RechargeBatch(ctx context.Context, in *MsgRechargeBatch, opts ...grpc.CallOption) (*MsgRechargeBatchResponse, error)
	// Settlement defines a method for settlement for a operator.
	Settlement(ctx context.Context, in *MsgSettlement, opts ...grpc.CallOption) (*MsgSettlementResponse, error)
	// SetFeeRule defines a method for adding a fee rule for executing a function.
	SetFeeRule(ctx context.Context, in *MsgSetFeeRule, opts ...grpc.CallOption) (*MsgSetFeeRuleResponse, error)
	// DeleteFeeRule defines a method for deleting a fee rule.
	DeleteFeeRule(ctx context.Context, in *MsgDeleteFeeRule, opts ...grpc.CallOption) (*MsgDeleteFeeRuleResponse, error)
	// RevokeDDC defines a method for revoce a ddc.
	RevokeDDC(ctx context.Context, in *MsgRevokeDDC, opts ...grpc.CallOption) (*MsgRevokeDDCResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Recharge(ctx context.Context, in *MsgRecharge, opts ...grpc.CallOption) (*MsgRechargeResponse, error) {
	out := new(MsgRechargeResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Msg/Recharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RechargeBatch(ctx context.Context, in *MsgRechargeBatch, opts ...grpc.CallOption) (*MsgRechargeBatchResponse, error) {
	out := new(MsgRechargeBatchResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Msg/RechargeBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Settlement(ctx context.Context, in *MsgSettlement, opts ...grpc.CallOption) (*MsgSettlementResponse, error) {
	out := new(MsgSettlementResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Msg/Settlement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetFeeRule(ctx context.Context, in *MsgSetFeeRule, opts ...grpc.CallOption) (*MsgSetFeeRuleResponse, error) {
	out := new(MsgSetFeeRuleResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Msg/SetFeeRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteFeeRule(ctx context.Context, in *MsgDeleteFeeRule, opts ...grpc.CallOption) (*MsgDeleteFeeRuleResponse, error) {
	out := new(MsgDeleteFeeRuleResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Msg/DeleteFeeRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeDDC(ctx context.Context, in *MsgRevokeDDC, opts ...grpc.CallOption) (*MsgRevokeDDCResponse, error) {
	out := new(MsgRevokeDDCResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Msg/RevokeDDC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Recharge defines a method for recharging for a account.
	Recharge(context.Context, *MsgRecharge) (*MsgRechargeResponse, error)
	// RechargeBatch defines a method for recharging for asome accounts.
	RechargeBatch(context.Context, *MsgRechargeBatch) (*MsgRechargeBatchResponse, error)
	// Settlement defines a method for settlement for a operator.
	Settlement(context.Context, *MsgSettlement) (*MsgSettlementResponse, error)
	// SetFeeRule defines a method for adding a fee rule for executing a function.
	SetFeeRule(context.Context, *MsgSetFeeRule) (*MsgSetFeeRuleResponse, error)
	// DeleteFeeRule defines a method for deleting a fee rule.
	DeleteFeeRule(context.Context, *MsgDeleteFeeRule) (*MsgDeleteFeeRuleResponse, error)
	// RevokeDDC defines a method for revoce a ddc.
	RevokeDDC(context.Context, *MsgRevokeDDC) (*MsgRevokeDDCResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Recharge(ctx context.Context, req *MsgRecharge) (*MsgRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recharge not implemented")
}
func (*UnimplementedMsgServer) RechargeBatch(ctx context.Context, req *MsgRechargeBatch) (*MsgRechargeBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeBatch not implemented")
}
func (*UnimplementedMsgServer) Settlement(ctx context.Context, req *MsgSettlement) (*MsgSettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settlement not implemented")
}
func (*UnimplementedMsgServer) SetFeeRule(ctx context.Context, req *MsgSetFeeRule) (*MsgSetFeeRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeeRule not implemented")
}
func (*UnimplementedMsgServer) DeleteFeeRule(ctx context.Context, req *MsgDeleteFeeRule) (*MsgDeleteFeeRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeeRule not implemented")
}
func (*UnimplementedMsgServer) RevokeDDC(ctx context.Context, req *MsgRevokeDDC) (*MsgRevokeDDCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDDC not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Recharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecharge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Recharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Msg/Recharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Recharge(ctx, req.(*MsgRecharge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RechargeBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRechargeBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RechargeBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Msg/RechargeBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RechargeBatch(ctx, req.(*MsgRechargeBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Settlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSettlement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Settlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Msg/Settlement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Settlement(ctx, req.(*MsgSettlement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetFeeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetFeeRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetFeeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Msg/SetFeeRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetFeeRule(ctx, req.(*MsgSetFeeRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteFeeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteFeeRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteFeeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Msg/DeleteFeeRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteFeeRule(ctx, req.(*MsgDeleteFeeRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeDDC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeDDC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeDDC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Msg/RevokeDDC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeDDC(ctx, req.(*MsgRevokeDDC))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bianjieai.ddc.fee.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recharge",
			Handler:    _Msg_Recharge_Handler,
		},
		{
			MethodName: "RechargeBatch",
			Handler:    _Msg_RechargeBatch_Handler,
		},
		{
			MethodName: "Settlement",
			Handler:    _Msg_Settlement_Handler,
		},
		{
			MethodName: "SetFeeRule",
			Handler:    _Msg_SetFeeRule_Handler,
		},
		{
			MethodName: "DeleteFeeRule",
			Handler:    _Msg_DeleteFeeRule_Handler,
		},
		{
			MethodName: "RevokeDDC",
			Handler:    _Msg_RevokeDDC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fee/tx.proto",
}

func (m *MsgRecharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecharge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecharge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRechargeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRechargeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRechargeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRechargeBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRechargeBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRechargeBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		dAtA2 := make([]byte, len(m.Amount)*10)
		var j1 int
		for _, num := range m.Amount {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		for iNdEx := len(m.To) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.To[iNdEx])
			copy(dAtA[i:], m.To[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.To[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRechargeBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRechargeBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRechargeBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Protocol != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSettlementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSettlementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSettlementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetFeeRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFeeRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFeeRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Fee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x20
	}
	if m.Function != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Function))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Protocol != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetFeeRuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFeeRuleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFeeRuleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteFeeRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteFeeRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteFeeRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x22
	}
	if m.Function != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Function))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Protocol != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteFeeRuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteFeeRuleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteFeeRuleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRevokeDDC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeDDC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeDDC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Protocol != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeDDCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeDDCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeDDCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRecharge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgRechargeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRechargeBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Amount) > 0 {
		l = 0
		for _, e := range m.Amount {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgRechargeBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovTx(uint64(m.Protocol))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSettlementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetFeeRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovTx(uint64(m.Protocol))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Function != 0 {
		n += 1 + sovTx(uint64(m.Function))
	}
	if m.Fee != 0 {
		n += 1 + sovTx(uint64(m.Fee))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetFeeRuleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteFeeRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovTx(uint64(m.Protocol))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Function != 0 {
		n += 1 + sovTx(uint64(m.Function))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteFeeRuleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRevokeDDC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovTx(uint64(m.Protocol))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevokeDDCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRecharge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRechargeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRechargeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRechargeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRechargeBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRechargeBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRechargeBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Amount = append(m.Amount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Amount) == 0 {
					m.Amount = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Amount = append(m.Amount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRechargeBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRechargeBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRechargeBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= native_ddc_sdk_platform.Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSettlementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSettlementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSettlementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFeeRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFeeRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFeeRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= native_ddc_sdk_platform.Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			m.Function = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Function |= native_ddc_sdk_platform.Function(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFeeRuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFeeRuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFeeRuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteFeeRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteFeeRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteFeeRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= native_ddc_sdk_platform.Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			m.Function = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Function |= native_ddc_sdk_platform.Function(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteFeeRuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteFeeRuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteFeeRuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeDDC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeDDC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeDDC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= native_ddc_sdk_platform.Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeDDCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeDDCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeDDCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
