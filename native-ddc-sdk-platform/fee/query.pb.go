// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fee/query.proto

package fee

import (
	context "context"
	fmt "fmt"
	native_ddc_sdk_platform "github.com/bianjieai/ddc-sdk-go/native-ddc-sdk-platform"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryBalanceOfRequest is the request type for the Query/BalanceOf RPC method.
type QueryBalanceOfRequest struct {
	// address is the address to query account for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryBalanceOfRequest) Reset()         { *m = QueryBalanceOfRequest{} }
func (m *QueryBalanceOfRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceOfRequest) ProtoMessage()    {}
func (*QueryBalanceOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62542406d31c861b, []int{0}
}
func (m *QueryBalanceOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceOfRequest.Merge(m, src)
}
func (m *QueryBalanceOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceOfRequest proto.InternalMessageInfo

// QueryBalanceOfResponse is the request type for the Query/BalanceOf RPC
// method.
type QueryBalanceOfResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryBalanceOfResponse) Reset()         { *m = QueryBalanceOfResponse{} }
func (m *QueryBalanceOfResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceOfResponse) ProtoMessage()    {}
func (*QueryBalanceOfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62542406d31c861b, []int{1}
}
func (m *QueryBalanceOfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceOfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceOfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceOfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceOfResponse.Merge(m, src)
}
func (m *QueryBalanceOfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceOfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceOfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceOfResponse proto.InternalMessageInfo

// QueryBalanceOfBatchRequest is the request type for the Query/BalanceOfBatch
// RPC method.
type QueryBalanceOfBatchRequest struct {
	// address is the address to query account for.
	Address []string `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryBalanceOfBatchRequest) Reset()         { *m = QueryBalanceOfBatchRequest{} }
func (m *QueryBalanceOfBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceOfBatchRequest) ProtoMessage()    {}
func (*QueryBalanceOfBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62542406d31c861b, []int{2}
}
func (m *QueryBalanceOfBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceOfBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceOfBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceOfBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceOfBatchRequest.Merge(m, src)
}
func (m *QueryBalanceOfBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceOfBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceOfBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceOfBatchRequest proto.InternalMessageInfo

// QueryBalanceOfBatchResponse is the request type for the Query/BalanceOfBatch
// RPC method.
type QueryBalanceOfBatchResponse struct {
	Amount []uint64 `protobuf:"varint,1,rep,packed,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryBalanceOfBatchResponse) Reset()         { *m = QueryBalanceOfBatchResponse{} }
func (m *QueryBalanceOfBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceOfBatchResponse) ProtoMessage()    {}
func (*QueryBalanceOfBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62542406d31c861b, []int{3}
}
func (m *QueryBalanceOfBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceOfBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceOfBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceOfBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceOfBatchResponse.Merge(m, src)
}
func (m *QueryBalanceOfBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceOfBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceOfBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceOfBatchResponse proto.InternalMessageInfo

// QueryFeeRuleRequest is the request type for the Query/FeeRule RPC method.
type QueryFeeRuleRequest struct {
	Protocol native_ddc_sdk_platform.Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=bianjieai.ddc.Protocol" json:"protocol,omitempty"`
	Denom    string                           `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Function native_ddc_sdk_platform.Function `protobuf:"varint,3,opt,name=function,proto3,enum=bianjieai.ddc.Function" json:"function,omitempty"`
}

func (m *QueryFeeRuleRequest) Reset()         { *m = QueryFeeRuleRequest{} }
func (m *QueryFeeRuleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeRuleRequest) ProtoMessage()    {}
func (*QueryFeeRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62542406d31c861b, []int{4}
}
func (m *QueryFeeRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeRuleRequest.Merge(m, src)
}
func (m *QueryFeeRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeRuleRequest proto.InternalMessageInfo

// QueryFeeRuleResponse is the request type for the Query/FeeRule RPC method.
type QueryFeeRuleResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryFeeRuleResponse) Reset()         { *m = QueryFeeRuleResponse{} }
func (m *QueryFeeRuleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeRuleResponse) ProtoMessage()    {}
func (*QueryFeeRuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62542406d31c861b, []int{5}
}
func (m *QueryFeeRuleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeRuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeRuleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeRuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeRuleResponse.Merge(m, src)
}
func (m *QueryFeeRuleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeRuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeRuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeRuleResponse proto.InternalMessageInfo

// QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC
// method.
type QueryTotalSupplyRequest struct {
}

func (m *QueryTotalSupplyRequest) Reset()         { *m = QueryTotalSupplyRequest{} }
func (m *QueryTotalSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyRequest) ProtoMessage()    {}
func (*QueryTotalSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62542406d31c861b, []int{6}
}
func (m *QueryTotalSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyRequest.Merge(m, src)
}
func (m *QueryTotalSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyRequest proto.InternalMessageInfo

// QueryTotalSupplyResponse is the request type for the Query/TotalSupply RPC
// method.
type QueryTotalSupplyResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryTotalSupplyResponse) Reset()         { *m = QueryTotalSupplyResponse{} }
func (m *QueryTotalSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyResponse) ProtoMessage()    {}
func (*QueryTotalSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62542406d31c861b, []int{7}
}
func (m *QueryTotalSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyResponse.Merge(m, src)
}
func (m *QueryTotalSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryBalanceOfRequest)(nil), "bianjieai.ddc.fee.QueryBalanceOfRequest")
	proto.RegisterType((*QueryBalanceOfResponse)(nil), "bianjieai.ddc.fee.QueryBalanceOfResponse")
	proto.RegisterType((*QueryBalanceOfBatchRequest)(nil), "bianjieai.ddc.fee.QueryBalanceOfBatchRequest")
	proto.RegisterType((*QueryBalanceOfBatchResponse)(nil), "bianjieai.ddc.fee.QueryBalanceOfBatchResponse")
	proto.RegisterType((*QueryFeeRuleRequest)(nil), "bianjieai.ddc.fee.QueryFeeRuleRequest")
	proto.RegisterType((*QueryFeeRuleResponse)(nil), "bianjieai.ddc.fee.QueryFeeRuleResponse")
	proto.RegisterType((*QueryTotalSupplyRequest)(nil), "bianjieai.ddc.fee.QueryTotalSupplyRequest")
	proto.RegisterType((*QueryTotalSupplyResponse)(nil), "bianjieai.ddc.fee.QueryTotalSupplyResponse")
}

func init() { proto.RegisterFile("fee/query.proto", fileDescriptor_62542406d31c861b) }

var fileDescriptor_62542406d31c861b = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0x6e, 0xd6, 0x7d, 0xd5, 0x48, 0x65, 0x98, 0xd2, 0x85, 0x0c, 0x32, 0x54, 0x24, 0x18, 0xa0,
	0xc6, 0xd2, 0x76, 0x41, 0x1b, 0x12, 0xa8, 0x87, 0x5d, 0x81, 0x00, 0x17, 0x6e, 0x6e, 0xf2, 0x26,
	0x0b, 0xa4, 0x76, 0x16, 0x3b, 0x48, 0x13, 0x42, 0x42, 0x48, 0x48, 0x48, 0x5c, 0x90, 0xe0, 0xce,
	0x7e, 0x0e, 0xc7, 0x49, 0x5c, 0x38, 0xa2, 0x96, 0x03, 0x3f, 0x03, 0xc5, 0x75, 0xbb, 0x86, 0x66,
	0x5a, 0x6e, 0x76, 0xdf, 0xe7, 0xab, 0xaf, 0x9f, 0xa0, 0x8b, 0x01, 0x00, 0x39, 0xcc, 0x20, 0x3d,
	0x72, 0x92, 0x94, 0x4b, 0x8e, 0x2f, 0xf5, 0x23, 0xca, 0x5e, 0x45, 0x40, 0x23, 0xc7, 0xf7, 0x3d,
	0x27, 0x00, 0xb0, 0x5a, 0x21, 0x0f, 0xb9, 0x9a, 0x92, 0xfc, 0x34, 0x06, 0x5a, 0xd7, 0x42, 0xce,
	0xc3, 0x18, 0x08, 0x4d, 0x22, 0x42, 0x19, 0xe3, 0x92, 0xca, 0x88, 0x33, 0xa1, 0xa7, 0x8d, 0x9c,
	0xac, 0x8e, 0x9d, 0x3d, 0x74, 0xe5, 0x69, 0x6e, 0xd0, 0xa3, 0x31, 0x65, 0x1e, 0x3c, 0x0e, 0x5c,
	0x38, 0xcc, 0x40, 0x48, 0x6c, 0xa2, 0x15, 0xea, 0xfb, 0x29, 0x08, 0x61, 0x1a, 0x37, 0x8c, 0xad,
	0x86, 0x3b, 0xb9, 0xee, 0xae, 0x7e, 0x3a, 0xde, 0xac, 0xfd, 0x3d, 0xde, 0xac, 0x75, 0x76, 0x51,
	0xfb, 0x7f, 0xb2, 0x48, 0x38, 0x13, 0x80, 0xdb, 0x68, 0x99, 0x0e, 0x78, 0xc6, 0xa4, 0x22, 0x2f,
	0xba, 0xfa, 0x36, 0xc3, 0x7d, 0x84, 0xac, 0x22, 0xb7, 0x47, 0xa5, 0x77, 0x50, 0xea, 0x5e, 0x2f,
	0x77, 0x7f, 0x88, 0x36, 0x4a, 0x15, 0x4a, 0x22, 0xd4, 0x4b, 0x23, 0x7c, 0x37, 0xd0, 0x65, 0xa5,
	0xb0, 0x0f, 0xe0, 0x66, 0x31, 0x4c, 0xcc, 0x77, 0xd0, 0xaa, 0x5a, 0x8e, 0xc7, 0x63, 0x15, 0xbf,
	0xb9, 0xbd, 0xee, 0x14, 0x17, 0xff, 0x44, 0x8f, 0xdd, 0x29, 0x10, 0xb7, 0xd0, 0x92, 0x0f, 0x8c,
	0x0f, 0xcc, 0x05, 0xb5, 0xad, 0xf1, 0x25, 0x97, 0x0a, 0x32, 0xe6, 0xe5, 0xcb, 0x37, 0xeb, 0xa5,
	0x52, 0xfb, 0x7a, 0xec, 0x4e, 0x81, 0x33, 0x09, 0xef, 0xa3, 0x56, 0x31, 0x60, 0xe5, 0xf5, 0x5e,
	0x45, 0xeb, 0x8a, 0xf9, 0x9c, 0x4b, 0x1a, 0x3f, 0xcb, 0x92, 0x24, 0x3e, 0xd2, 0x7f, 0xaf, 0xf3,
	0x00, 0x99, 0xf3, 0xa3, 0xaa, 0xc2, 0xdb, 0xdf, 0x16, 0xd1, 0x92, 0xa2, 0xe3, 0x8f, 0x06, 0x6a,
	0x4c, 0x77, 0x8f, 0xb7, 0x9c, 0xb9, 0x6e, 0x3a, 0xa5, 0xcd, 0xb2, 0xee, 0x54, 0x40, 0x8e, 0xe3,
	0x74, 0x6e, 0x7e, 0xf8, 0xf9, 0xe7, 0xeb, 0xc2, 0x75, 0xbc, 0x41, 0x7c, 0xdf, 0x23, 0x01, 0x80,
	0x20, 0xfd, 0x31, 0x88, 0xbc, 0xd5, 0x85, 0x78, 0x87, 0x3f, 0x1b, 0xa8, 0x59, 0xec, 0x00, 0xee,
	0x9e, 0x6b, 0x31, 0xdb, 0x36, 0xcb, 0xa9, 0x0a, 0xd7, 0xb1, 0x2c, 0x15, 0xab, 0x85, 0xf1, 0x5c,
	0x2c, 0x81, 0x53, 0xb4, 0xa2, 0x5f, 0x0b, 0xdf, 0x3a, 0x4b, 0xb6, 0xd8, 0x37, 0xeb, 0xf6, 0xb9,
	0x38, 0xed, 0xdb, 0x56, 0xbe, 0x6b, 0xb8, 0x79, 0xea, 0x9b, 0xe6, 0x46, 0xef, 0x0d, 0x74, 0x61,
	0xe6, 0x35, 0xf1, 0xdd, 0xb3, 0x04, 0xe7, 0xdb, 0x60, 0xdd, 0xab, 0x84, 0xd5, 0x01, 0x4c, 0x15,
	0x00, 0xe3, 0xb5, 0xd3, 0x00, 0x42, 0x21, 0x7a, 0x2f, 0x7e, 0x0c, 0x6d, 0xe3, 0x64, 0x68, 0x1b,
	0xbf, 0x87, 0xb6, 0xf1, 0x65, 0x64, 0xd7, 0x4e, 0x46, 0x76, 0xed, 0xd7, 0xc8, 0xae, 0xbd, 0xdc,
	0x0b, 0x23, 0x79, 0x90, 0xf5, 0x1d, 0x8f, 0x0f, 0xc8, 0xd4, 0x2a, 0xe7, 0x77, 0x85, 0xff, 0xba,
	0x1b, 0x72, 0xc2, 0xa8, 0x8c, 0xde, 0x40, 0x77, 0xf2, 0x4b, 0x12, 0x53, 0x19, 0xf0, 0x74, 0x90,
	0xcb, 0xf7, 0x97, 0xd5, 0xf7, 0xb5, 0xf3, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x91, 0x55, 0x31,
	0x0a, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// BalanceOf queries the account balance by address.
	BalanceOf(ctx context.Context, in *QueryBalanceOfRequest, opts ...grpc.CallOption) (*QueryBalanceOfResponse, error)
	// BalanceOfBatch queries the account balance by address.
	BalanceOfBatch(ctx context.Context, in *QueryBalanceOfBatchRequest, opts ...grpc.CallOption) (*QueryBalanceOfBatchResponse, error)
	// FeeRule queries the fee rule.
	FeeRule(ctx context.Context, in *QueryFeeRuleRequest, opts ...grpc.CallOption) (*QueryFeeRuleResponse, error)
	// TotalSupply queries all the fee.
	TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) BalanceOf(ctx context.Context, in *QueryBalanceOfRequest, opts ...grpc.CallOption) (*QueryBalanceOfResponse, error) {
	out := new(QueryBalanceOfResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Query/BalanceOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceOfBatch(ctx context.Context, in *QueryBalanceOfBatchRequest, opts ...grpc.CallOption) (*QueryBalanceOfBatchResponse, error) {
	out := new(QueryBalanceOfBatchResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Query/BalanceOfBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeRule(ctx context.Context, in *QueryFeeRuleRequest, opts ...grpc.CallOption) (*QueryFeeRuleResponse, error) {
	out := new(QueryFeeRuleResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Query/FeeRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error) {
	out := new(QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/bianjieai.ddc.fee.Query/TotalSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// BalanceOf queries the account balance by address.
	BalanceOf(context.Context, *QueryBalanceOfRequest) (*QueryBalanceOfResponse, error)
	// BalanceOfBatch queries the account balance by address.
	BalanceOfBatch(context.Context, *QueryBalanceOfBatchRequest) (*QueryBalanceOfBatchResponse, error)
	// FeeRule queries the fee rule.
	FeeRule(context.Context, *QueryFeeRuleRequest) (*QueryFeeRuleResponse, error)
	// TotalSupply queries all the fee.
	TotalSupply(context.Context, *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) BalanceOf(ctx context.Context, req *QueryBalanceOfRequest) (*QueryBalanceOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceOf not implemented")
}
func (*UnimplementedQueryServer) BalanceOfBatch(ctx context.Context, req *QueryBalanceOfBatchRequest) (*QueryBalanceOfBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceOfBatch not implemented")
}
func (*UnimplementedQueryServer) FeeRule(ctx context.Context, req *QueryFeeRuleRequest) (*QueryFeeRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeRule not implemented")
}
func (*UnimplementedQueryServer) TotalSupply(ctx context.Context, req *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupply not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_BalanceOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Query/BalanceOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceOf(ctx, req.(*QueryBalanceOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceOfBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceOfBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceOfBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Query/BalanceOfBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceOfBatch(ctx, req.(*QueryBalanceOfBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Query/FeeRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeRule(ctx, req.(*QueryFeeRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bianjieai.ddc.fee.Query/TotalSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupply(ctx, req.(*QueryTotalSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bianjieai.ddc.fee.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BalanceOf",
			Handler:    _Query_BalanceOf_Handler,
		},
		{
			MethodName: "BalanceOfBatch",
			Handler:    _Query_BalanceOfBatch_Handler,
		},
		{
			MethodName: "FeeRule",
			Handler:    _Query_FeeRule_Handler,
		},
		{
			MethodName: "TotalSupply",
			Handler:    _Query_TotalSupply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fee/query.proto",
}

func (m *QueryBalanceOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceOfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceOfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceOfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceOfBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceOfBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceOfBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Address[iNdEx])
			copy(dAtA[i:], m.Address[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Address[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceOfBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceOfBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceOfBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		dAtA2 := make([]byte, len(m.Amount)*10)
		var j1 int
		for _, num := range m.Amount {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintQuery(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Function != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Function))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Protocol != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeRuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeRuleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeRuleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBalanceOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalanceOfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryBalanceOfBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, s := range m.Address {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBalanceOfBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		l = 0
		for _, e := range m.Amount {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryFeeRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovQuery(uint64(m.Protocol))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Function != 0 {
		n += 1 + sovQuery(uint64(m.Function))
	}
	return n
}

func (m *QueryFeeRuleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryTotalSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBalanceOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceOfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceOfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceOfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceOfBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceOfBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceOfBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceOfBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceOfBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceOfBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Amount = append(m.Amount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Amount) == 0 {
					m.Amount = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Amount = append(m.Amount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= native_ddc_sdk_platform.Protocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			m.Function = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Function |= native_ddc_sdk_platform.Function(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeRuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeRuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeRuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
