syntax = "proto3";
package bianjieai.ddc.auth;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "ddc.proto";

option go_package = "github.com/bianjieai/ddc-sdk-go/native-ddc-sdk-platform/auth";

// Query defines the gRPC querier service.
service Query {
  // Account queries the account by address.
  rpc Account(QueryAccountRequest) returns (QueryAccountResponse) {
    option (google.api.http).get = "/ddc/auth/accounts/{address}";
  }

  // Functions queries the all functions can be executed by a role.
  rpc Functions(QueryFunctionsRequest) returns (QueryFunctionsResponse) {
    option (google.api.http).get =
        "/ddc/auth/functions/{role}/denom/{protocol}/{denom}";
  }

  // SwitcherIsOpen queries the switcher State of the platform
  rpc SwitcherState(QuerySwitcherStateRequest)
      returns (QuerySwitcherStateResponse) {
    option (google.api.http).get = "/ddc/auth/switcher-state";
  }

  // DDCs queries all the denoms managered by ddc module
  rpc DDCs(QueryDDCsRequest) returns (QueryDDCsResponse) {
    option (google.api.http).get = "/ddc/auth/ddcs";
  }

  // CrossPlatformAble check if two accounts can be operated across platforms
  rpc CrossPlatformAble(QueryCrossPlatformAbleRequest)
      returns (QueryCrossPlatformAbleResponse) {
    option (google.api.http).get = "/ddc/auth/platform/cross/{from}/{to}";
  }
}

// QueryAccountRequest is the request type for the Query/Account RPC method.
message QueryAccountRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // address is the address to query account for.
  string address = 1;
}

// QueryAccountResponse is the request type for the Query/Account RPC method.
message QueryAccountResponse {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  AccountInfo account_info = 1;
}

// QueryFunctionsRequest is the request type for the Query/Functions RPC method.
message QueryFunctionsRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  Role role = 1;
  Protocol protocol = 2;
  string denom = 3;
}

// QueryFunctionsResponse is the request type for the Query/Functions RPC
// method.
message QueryFunctionsResponse {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  repeated Function functions = 1;
}

// QuerySwitcherStateRequest is the request type for the Query/SwitcherState RPC
// method.
message QuerySwitcherStateRequest {}

// QuerySwitcherStateResponse is the request type for the Query/SwitcherState
// RPC method.
message QuerySwitcherStateResponse {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  bool is_open = 1;
}

// QueryDDCsRequest is the request type for the Query/DDCs RPC method.
message QueryDDCsRequest {}

// QueryDDCsResponse is the request type for the Query/DDCs RPC
// method.
message QueryDDCsResponse {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  repeated DDC denoms = 1;
}

// QueryCrossPlatformAbleRequest is the request type for the
// Query/CrossPlatformAble RPC method.
message QueryCrossPlatformAbleRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string from = 1;
  string to = 2;
}

// QueryCrossPlatformAbleResponse is the request type for the
// Query/CrossPlatformAble RPC method.
message QueryCrossPlatformAbleResponse {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  bool enabled = 1;
}