// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DDC721MetaData contains all meta data concerning the DDC721 contract.
var DDC721MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"}],\"name\":\"ApprovalBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"EnterBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"ExitBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"SetNameAndSymbol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ddcURI\",\"type\":\"string\"}],\"name\":\"SetURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"}],\"name\":\"approveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"ddcURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestDDCId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ddcURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"ddcURIs\",\"type\":\"string[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"}],\"name\":\"ownerOfBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ddcURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"ddcURIs\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorityProxyAddress\",\"type\":\"address\"}],\"name\":\"setAuthorityProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chargeProxyAddress\",\"type\":\"address\"}],\"name\":\"setChargeProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ddcURI_\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"unFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b5060805161394962000100600039600081816109060152818161094601528181610b570152610b9701526139496000f3fe60806040526004361061020f5760003560e01c80638da5cb5b11610118578063d0def521116100a0578063ed0e31de1161006f578063ed0e31de14610613578063f2fde38b14610633578063f3993d1114610653578063f6dda93614610673578063f96ab8c41461069357600080fd5b8063d0def52114610593578063d302b0dc146105b3578063d7a78db8146105d3578063e985e9c5146105f357600080fd5b8063b2dc5dc3116100e7578063b2dc5dc3146104f0578063b88d4fde14610510578063b9f7fad914610530578063bda8011714610546578063c5837d821461057357600080fd5b80638da5cb5b1461047d57806395d89b411461049b578063a22cb465146104b0578063aa5951be146104d057600080fd5b806344d891df1161019b5780636352211e1161016a5780636352211e146103e557806370a0823114610405578063715018a6146104335780638129fc1c14610448578063862440e21461045d57600080fd5b806344d891df14610365578063458c738e146103855780634f1ef286146103b25780635a446215146103c557600080fd5b806323b872dd116101e257806323b872dd146102c557806328cfbd46146102e5578063293ec97c146103055780633659cfe61461032557806342966c681461034557600080fd5b806301ffc9a71461021457806306fdde0314610249578063081812fc1461026b578063095ea7b3146102a3575b600080fd5b34801561022057600080fd5b5061023461022f366004612c71565b6106b3565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b5061025e6106ea565b6040516102409190612ce6565b34801561027757600080fd5b5061028b610286366004612cf9565b61077c565b6040516001600160a01b039091168152602001610240565b3480156102af57600080fd5b506102c36102be366004612d2e565b6107a3565b005b3480156102d157600080fd5b506102c36102e0366004612d58565b610800565b3480156102f157600080fd5b506102c3610300366004612ed7565b610810565b34801561031157600080fd5b5061025e610320366004612cf9565b610852565b34801561033157600080fd5b506102c3610340366004612f5b565b6108fc565b34801561035157600080fd5b506102c3610360366004612cf9565b6109c4565b34801561037157600080fd5b506102c3610380366004612f5b565b610a4a565b34801561039157600080fd5b506103a56103a0366004612f76565b610aa0565b6040516102409190613048565b6102c36103c036600461305b565b610b4d565b3480156103d157600080fd5b506102c36103e03660046130a8565b610c06565b3480156103f157600080fd5b5061028b610400366004612cf9565b610c97565b34801561041157600080fd5b50610425610420366004612f5b565b610d0b565b604051908152602001610240565b34801561043f57600080fd5b506102c3610d91565b34801561045457600080fd5b506102c3610dc7565b34801561046957600080fd5b506102c3610478366004613101565b610e4a565b34801561048957600080fd5b506033546001600160a01b031661028b565b3480156104a757600080fd5b5061025e610f86565b3480156104bc57600080fd5b506102c36104cb36600461313f565b610f95565b3480156104dc57600080fd5b506102c36104eb366004613176565b61105c565b3480156104fc57600080fd5b506102c361050b366004613176565b611174565b34801561051c57600080fd5b506102c361052b3660046131b9565b6112a5565b34801561053c57600080fd5b5061010354610425565b34801561055257600080fd5b50610566610561366004613214565b6112bc565b6040516102409190613248565b34801561057f57600080fd5b506102c361058e366004612f5b565b611362565b34801561059f57600080fd5b506102c36105ae36600461305b565b6113b8565b3480156105bf57600080fd5b506102c36105ce366004612cf9565b6113c2565b3480156105df57600080fd5b506102c36105ee366004612cf9565b611406565b3480156105ff57600080fd5b5061023461060e366004613295565b611443565b34801561061f57600080fd5b506102c361062e366004613347565b6114b1565b34801561063f57600080fd5b506102c361064e366004612f5b565b6114bb565b34801561065f57600080fd5b506102c361066e36600461338a565b611553565b34801561067f57600080fd5b506102c361068e3660046133e7565b61155e565b34801561069f57600080fd5b506102c36106ae366004613450565b611579565b60006001600160e01b031982166334d72d0f60e21b14806106e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060fb80546106f990613496565b80601f016020809104026020016040519081016040528092919081815260200182805461072590613496565b80156107725780601f1061074757610100808354040283529160200191610772565b820191906000526020600020905b81548152906001019060200180831161075557829003601f168201915b5050505050905090565b600061078782611594565b50600090815260ff60205260409020546001600160a01b031690565b6107ac826115f1565b60006107b8838361160c565b905081836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61080b838383611751565b505050565b61081b8484846117d1565b61082784848484611893565b61084c5760405162461bcd60e51b8152600401610843906134d0565b60405180910390fd5b50505050565b606061085d82611594565b600082815261010160205260409020805461087790613496565b80601f01602080910402602001604051908101604052809291908181526020018280546108a390613496565b80156108f05780601f106108c5576101008083540402835291602001916108f0565b820191906000526020600020905b8154815290600101906020018083116108d357829003601f168201915b50505050509050919050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109445760405162461bcd60e51b815260040161084390613521565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109766119eb565b6001600160a01b03161461099c5760405162461bcd60e51b81526004016108439061356d565b6109a581611a19565b604080516000808252602082019092526109c191839190611a43565b50565b6109cc611b8e565b6109d581611c61565b600081815260fd60205260409020546001600160a01b03166109f78183611c74565b60006001600160a01b038216336001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f85604051610a3e91815260200190565b60405180910390a45050565b6033546001600160a01b03163314610a745760405162461bcd60e51b8152600401610843906135b9565b610a7d81611ce3565b61010480546001600160a01b0319166001600160a01b0392909216919091179055565b6060600082516001600160401b03811115610abd57610abd612d94565b604051908082528060200260200182016040528015610ae6578160200160208202803683370190505b50905060005b8351811015610b4657610b17848281518110610b0a57610b0a6135ee565b6020026020010151610d0b565b828281518110610b2957610b296135ee565b602090810291909101015280610b3e8161361a565b915050610aec565b5092915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b955760405162461bcd60e51b815260040161084390613521565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bc76119eb565b6001600160a01b031614610bed5760405162461bcd60e51b81526004016108439061356d565b610bf682611a19565b610c0282826001611a43565b5050565b6033546001600160a01b03163314610c305760405162461bcd60e51b8152600401610843906135b9565b8151610c439060fb906020850190612bc2565b508051610c579060fc906020840190612bc2565b507fd150542982eaa18f20ceb10f524c418899e6a331a81ee4a70daa921f976fab3b60fb60fc604051610c8b9291906136d2565b60405180910390a15050565b600081815260fd60205260408120546001600160a01b0316806106e45760405162461bcd60e51b815260206004820152602660248201527f4444433732313a6f776e657220717565727920666f72206e6f6e6578697374656044820152656e742064646360d01b6064820152608401610843565b60006001600160a01b038216610d755760405162461bcd60e51b815260206004820152602960248201527f4444433732313a62616c616e636520717565727920666f7220746865207a65726044820152686f206164647265737360b81b6064820152608401610843565b506001600160a01b0316600090815260fe602052604090205490565b6033546001600160a01b03163314610dbb5760405162461bcd60e51b8152600401610843906135b9565b610dc56000611d58565b565b600054610100900460ff1680610de0575060005460ff16155b610dfc5760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015610e1e576000805461ffff19166101011790555b610e26611daa565b610e2e611e09565b610e36611e70565b80156109c1576000805461ff001916905550565b610e52611b8e565b610e5b82611ecf565b610e653383611f2e565b8051600003610eb65760405162461bcd60e51b815260206004820152601760248201527f4444433732313a43616e206e6f7420626520656d7074790000000000000000006044820152606401610843565b6000828152610101602052604090208054610ed090613496565b159050610f1f5760405162461bcd60e51b815260206004820152601a60248201527f4444433732313a616c726561647920696e697469616c697a65640000000000006044820152606401610843565b6000828152610101602090815260409091208251610f3f92840190612bc2565b5081336001600160a01b03167f18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d083604051610f7a9190612ce6565b60405180910390a35050565b606060fc80546106f990613496565b610f9e826115f1565b336001600160a01b03831603610ff65760405162461bcd60e51b815260206004820152601860248201527f4444433732313a617070726f766520746f2063616c6c657200000000000000006044820152606401610843565b336000818152610100602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101610f7a565b611065826115f1565b600081516001600160401b0381111561108057611080612d94565b6040519080825280602002602001820160405280156110a9578160200160208202803683370190505b50905060005b8251811015611117576110db848483815181106110ce576110ce6135ee565b602002602001015161160c565b8282815181106110ed576110ed6135ee565b6001600160a01b03909216602092830291909101909101528061110f8161361a565b9150506110af565b50826001600160a01b0316816040516111309190613745565b60405180910390207f04330fc119d24ce0982e8f95a39c2135b36a65bb93b04d592b3a68f6de3e12be846040516111679190613048565b60405180910390a3505050565b61117c611b8e565b60005b815181101561125f576111aa82828151811061119d5761119d6135ee565b6020026020010151611c61565b60006111ce8383815181106111c1576111c16135ee565b6020026020010151610c97565b9050806001600160a01b0316846001600160a01b0316146112295760405162461bcd60e51b81526020600482015260156024820152742222219b99189d1034b73b30b634b21037bbb732b960591b6044820152606401610843565b61124c8484848151811061123f5761123f6135ee565b6020026020010151611c74565b50806112578161361a565b91505061117f565b5060006001600160a01b038316336001600160a01b03167f2e75a6cf483a33fd7e40b01fc5b561361f6e9b2d5a492f866bd66ca430a8c55784604051610a3e9190613048565b6112b0848484611751565b61082784848484611fcd565b6060600082516001600160401b038111156112d9576112d9612d94565b604051908082528060200260200182016040528015611302578160200160208202803683370190505b50905060005b8351811015610b46576113268482815181106111c1576111c16135ee565b828281518110611338576113386135ee565b6001600160a01b03909216602092830291909101909101528061135a8161361a565b915050611308565b6033546001600160a01b0316331461138c5760405162461bcd60e51b8152600401610843906135b9565b61139581611ce3565b61010580546001600160a01b0319166001600160a01b0392909216919091179055565b61080b82826120bb565b6113cd81600061214a565b60405181815233907faddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f906020015b60405180910390a250565b61141181600161214a565b60405181815233907f027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36906020016113fb565b60006001600160a01b0383161580159061146557506001600160a01b03821615155b6114815760405162461bcd60e51b815260040161084390613784565b506001600160a01b0391821660009081526101006020908152604080832093909416825291909152205460ff1690565b61080b8282612184565b6033546001600160a01b031633146114e55760405162461bcd60e51b8152600401610843906135b9565b6001600160a01b03811661154a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610843565b6109c181611d58565b61080b8383836117d1565b600061156a84846120bb565b90506108276000858385611fcd565b60006115858484612184565b90506108276000858385611893565b600081815260fd60205260409020546001600160a01b03166109c15760405162461bcd60e51b81526020600482015260166024820152754444433732313a6e6f6e6578697374656e742064646360501b6044820152606401610843565b6115f9611b8e565b611602816122a1565b6109c13382612382565b600061161782611ecf565b600082815260fd60205260409020546001600160a01b03169050806001600160a01b0316836001600160a01b0316036116925760405162461bcd60e51b815260206004820181905260248201527f4444433732313a617070726f76616c20746f2063757272656e74206f776e65726044820152606401610843565b336001600160a01b03821614806116ae57506116ae8133611443565b6117205760405162461bcd60e51b815260206004820152603760248201527f4444433732313a617070726f76652063616c6c6572206973206e6f74206f776e60448201527f6572206e6f7220617070726f76656420666f7220616c6c0000000000000000006064820152608401610843565b600091825260ff602052604090912080546001600160a01b0319166001600160a01b03939093169290921790915590565b61175b83836123d8565b611764816123fc565b61176f838383612405565b816001600160a01b0316836001600160a01b031661178a3390565b6001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f846040516117c491815260200190565b60405180910390a4505050565b6117db83836123d8565b60005b815181101561183f576118098282815181106117fc576117fc6135ee565b60200260200101516123fc565b61182d8484848481518110611820576118206135ee565b6020026020010151612405565b806118378161361a565b9150506117de565b50816001600160a01b0316836001600160a01b031661185b3390565b6001600160a01b03167f2e75a6cf483a33fd7e40b01fc5b561361f6e9b2d5a492f866bd66ca430a8c557846040516117c49190613048565b60006001600160a01b0384163b156119df576040516325c0462360e11b81526001600160a01b03851690634b808c46906118d79033908990889088906004016137b1565b6020604051808303816000875af1925050508015611912575060408051601f3d908101601f1916820190925261190f918101906137ef565b60015b6119c5573d808015611940576040519150601f19603f3d011682016040523d82523d6000602084013e611945565b606091505b5080516000036119bd5760405162461bcd60e51b815260206004820152603860248201527f4444433732313a7472616e7366657220746f206e6f6e206f6e4552433732314260448201527f61746368526563656976656420696d706c656d656e74657200000000000000006064820152608401610843565b805181602001fd5b6001600160e01b0319166325c0462360e11b1490506119e3565b5060015b949350505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146109c15760405162461bcd60e51b8152600401610843906135b9565b6000611a4d6119eb565b9050611a5884612525565b600083511180611a655750815b15611a7657611a7484846125ca565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611b8757805460ff191660011781556040516001600160a01b0383166024820152611af590869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526125ca565b50805460ff19168155611b066119eb565b6001600160a01b0316826001600160a01b031614611b7e5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610843565b611b87856126b5565b5050505050565b610105546001600160a01b031663470cf0e0336040516001600160e01b031960e084901b811682526001600160a01b0392909216600482015230602482015260003590911660448201526064016020604051808303816000875af1158015611bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1e919061380c565b610dc55760405162461bcd60e51b81526020600482015260146024820152732222219b99189d3737903832b936b4b9b9b4b7b760611b6044820152606401610843565b611c6a81611594565b6109c13382611f2e565b600081815260ff6020526040902080546001600160a01b03191690556001600160a01b038216600090815260fe60205260408120805460019290611cb9908490613829565b9091555050600081815260fd6020526040902080546001600160a01b0319169055610c02816126f5565b6001600160a01b038116611d095760405162461bcd60e51b815260040161084390613784565b6001600160a01b0381163b6109c15760405162461bcd60e51b8152602060048201526015602482015274111110cdcc8c4e9b9bdd08184818dbdb9d1c9858dd605a1b6044820152606401610843565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611dc3575060005460ff16155b611ddf5760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015611e01576000805461ffff19166101011790555b610e36612771565b600054610100900460ff1680611e22575060005460ff16155b611e3e5760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015611e60576000805461ffff19166101011790555b611e68612771565b610e366127db565b600054610100900460ff1680611e89575060005460ff16155b611ea55760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015611ec7576000805461ffff19166101011790555b611e01612771565b611ed881611594565b6000818152610102602052604090205460ff16156109c15760405162461bcd60e51b81526020600482015260136024820152724444433732313a64697361626c65642064646360681b6044820152606401610843565b600081815260fd60205260409020546001600160a01b03908116908316811480611f715750826001600160a01b0316611f668361077c565b6001600160a01b0316145b80611f815750611f818184611443565b61080b5760405162461bcd60e51b815260206004820152601d60248201527f4444433732313a6e6f74206f776e6572206e6f7220617070726f7665640000006044820152606401610843565b60006001600160a01b0384163b156119df57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612011903390899088908890600401613840565b6020604051808303816000875af192505050801561204c575060408051601f3d908101601f19168201909252612049918101906137ef565b60015b6120a1573d80801561207a576040519150601f19603f3d011682016040523d82523d6000602084013e61207f565b606091505b5080516000036119bd5760405162461bcd60e51b8152600401610843906134d0565b6001600160e01b031916630a85bd0160e11b1490506119e3565b60006120c5611b8e565b6120ce836122a1565b6120d9335b84612382565b610103546120e890600161387d565b90506120f583828461283b565b6001600160a01b0383166000336001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f8460405161213c91815260200190565b60405180910390a492915050565b612152611b8e565b61215a612916565b612163826129e4565b60009182526101026020526040909120805460ff1916911515919091179055565b606061218e611b8e565b612197836122a1565b6121a0336120d3565b81516001600160401b038111156121b9576121b9612d94565b6040519080825280602002602001820160405280156121e2578160200160208202803683370190505b50905060005b825181101561225b576000610103546001612203919061387d565b905080838381518110612218576122186135ee565b602002602001018181525050612248858286858151811061223b5761223b6135ee565b602002602001015161283b565b50806122538161361a565b9150506121e8565b506001600160a01b0383166000336001600160a01b03167f2e75a6cf483a33fd7e40b01fc5b561361f6e9b2d5a492f866bd66ca430a8c5578460405161213c9190613048565b6001600160a01b0381166122c75760405162461bcd60e51b815260040161084390613784565b610105546040516395c2a8d960e01b81526001600160a01b038381166004830152909116906395c2a8d990602401602060405180830381865afa158015612312573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612336919061380c565b6109c15760405162461bcd60e51b815260206004820152601e60248201527f4444433732313a6e6f74206120617661696c61626c65206163636f756e7400006044820152606401610843565b61238c8282612a4c565b610c025760405162461bcd60e51b815260206004820181905260248201527f4444433732313a6f6e6c79206f6e207468652073616d6520706c6174666f726d6044820152606401610843565b6123e0611b8e565b6123e9826122a1565b6123f2816122a1565b610c028282612acc565b611c6a81611ecf565b826001600160a01b031661241882610c97565b6001600160a01b03161461247d5760405162461bcd60e51b815260206004820152602660248201527f4444433732313a7472616e73666572206f66206464632074686174206973206e60448201526537ba1037bbb760d11b6064820152608401610843565b600081815260ff6020526040902080546001600160a01b03191690556001600160a01b038316600090815260fe602052604081208054600192906124c2908490613829565b90915550506001600160a01b038216600090815260fe602052604081208054600192906124f090849061387d565b9091555050600081815260fd6020526040902080546001600160a01b0319166001600160a01b03841617905561080b816126f5565b803b6125895760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610843565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6126295760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610843565b600080846001600160a01b0316846040516126449190613895565b600060405180830381855af49150503d806000811461267f576040519150601f19603f3d011682016040523d82523d6000602084013e612684565b606091505b50915091506126ac82826040518060600160405280602781526020016138ed60279139612b4e565b95945050505050565b6126be81612525565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b610104546001600160a01b031663ef18e3c9336040516001600160e01b031960e084901b811682526001600160a01b03929092166004820152600035909116602482015260448101849052606401600060405180830381600087803b15801561275d57600080fd5b505af1158015611b87573d6000803e3d6000fd5b600054610100900460ff168061278a575060005460ff16155b6127a65760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015610e36576000805461ffff191661010117905580156109c1576000805461ff001916905550565b600054610100900460ff16806127f4575060005460ff16155b6128105760405162461bcd60e51b8152600401610843906136f7565b600054610100900460ff16158015612832576000805461ffff19166101011790555b610e3633611d58565b600082815260fd60205260409020546001600160a01b0316156128985760405162461bcd60e51b8152602060048201526015602482015274111110cdcc8c4e985b1c9958591e481b5a5b9d1959605a1b6044820152606401610843565b6001600160a01b038316600090815260fe602052604081208054600192906128c190849061387d565b9091555050600082815260fd6020908152604080832080546001600160a01b0319166001600160a01b0388161790556101018252909120825161290692840190612bc2565b5061010382905561080b826126f5565b610105546001600160a01b031663ed5cad643360006040518363ffffffff1660e01b81526004016129489291906138b1565b602060405180830381865afa158015612965573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612989919061380c565b610dc55760405162461bcd60e51b815260206004820152602660248201527f4444433732313a6e6f742061206f70657261746f7220726f6c65206f722064696044820152651cd8589b195960d21b6064820152608401610843565b6129ed81611594565b6000818152610102602052604090205460ff166109c15760405162461bcd60e51b815260206004820152601760248201527f4444433732313a6e6f6e2d64697361626c6564206464630000000000000000006044820152606401610843565b61010554604051633a723d1760e01b81526001600160a01b03848116600483015283811660248301526000921690633a723d17906044015b602060405180830381865afa158015612aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac5919061380c565b9392505050565b612ad68282612a4c565b80612ae65750612ae68282612b87565b610c025760405162461bcd60e51b815260206004820152603360248201527f4444433732313a4f6e6c79206f6e6520706c6174666f726d206f722063726f736044820152721ccb5c1b185d199bdc9b48185c1c1c9bdd985b606a1b6064820152608401610843565b60608315612b5d575081612ac5565b825115612b6d5782518084602001fd5b8160405162461bcd60e51b81526004016108439190612ce6565b6101055460405162c21e5560e11b81526001600160a01b038481166004830152838116602483015260009216906301843caa90604401612a84565b828054612bce90613496565b90600052602060002090601f016020900481019282612bf05760008555612c36565b82601f10612c0957805160ff1916838001178555612c36565b82800160010185558215612c36579182015b82811115612c36578251825591602001919060010190612c1b565b50612c42929150612c46565b5090565b5b80821115612c425760008155600101612c47565b6001600160e01b0319811681146109c157600080fd5b600060208284031215612c8357600080fd5b8135612ac581612c5b565b60005b83811015612ca9578181015183820152602001612c91565b8381111561084c5750506000910152565b60008151808452612cd2816020860160208601612c8e565b601f01601f19169290920160200192915050565b602081526000612ac56020830184612cba565b600060208284031215612d0b57600080fd5b5035919050565b80356001600160a01b0381168114612d2957600080fd5b919050565b60008060408385031215612d4157600080fd5b612d4a83612d12565b946020939093013593505050565b600080600060608486031215612d6d57600080fd5b612d7684612d12565b9250612d8460208501612d12565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612dd257612dd2612d94565b604052919050565b60006001600160401b03821115612df357612df3612d94565b5060051b60200190565b600082601f830112612e0e57600080fd5b81356020612e23612e1e83612dda565b612daa565b82815260059290921b84018101918181019086841115612e4257600080fd5b8286015b84811015612e5d5780358352918301918301612e46565b509695505050505050565b600082601f830112612e7957600080fd5b81356001600160401b03811115612e9257612e92612d94565b612ea5601f8201601f1916602001612daa565b818152846020838601011115612eba57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612eed57600080fd5b612ef685612d12565b9350612f0460208601612d12565b925060408501356001600160401b0380821115612f2057600080fd5b612f2c88838901612dfd565b93506060870135915080821115612f4257600080fd5b50612f4f87828801612e68565b91505092959194509250565b600060208284031215612f6d57600080fd5b612ac582612d12565b60006020808385031215612f8957600080fd5b82356001600160401b03811115612f9f57600080fd5b8301601f81018513612fb057600080fd5b8035612fbe612e1e82612dda565b81815260059190911b82018301908381019087831115612fdd57600080fd5b928401925b8284101561300257612ff384612d12565b82529284019290840190612fe2565b979650505050505050565b600081518084526020808501945080840160005b8381101561303d57815187529582019590820190600101613021565b509495945050505050565b602081526000612ac5602083018461300d565b6000806040838503121561306e57600080fd5b61307783612d12565b915060208301356001600160401b0381111561309257600080fd5b61309e85828601612e68565b9150509250929050565b600080604083850312156130bb57600080fd5b82356001600160401b03808211156130d257600080fd5b6130de86838701612e68565b935060208501359150808211156130f457600080fd5b5061309e85828601612e68565b6000806040838503121561311457600080fd5b8235915060208301356001600160401b0381111561309257600080fd5b80151581146109c157600080fd5b6000806040838503121561315257600080fd5b61315b83612d12565b9150602083013561316b81613131565b809150509250929050565b6000806040838503121561318957600080fd5b61319283612d12565b915060208301356001600160401b038111156131ad57600080fd5b61309e85828601612dfd565b600080600080608085870312156131cf57600080fd5b6131d885612d12565b93506131e660208601612d12565b92506040850135915060608501356001600160401b0381111561320857600080fd5b612f4f87828801612e68565b60006020828403121561322657600080fd5b81356001600160401b0381111561323c57600080fd5b6119e384828501612dfd565b6020808252825182820181905260009190848201906040850190845b818110156132895783516001600160a01b031683529284019291840191600101613264565b50909695505050505050565b600080604083850312156132a857600080fd5b6132b183612d12565b91506132bf60208401612d12565b90509250929050565b600082601f8301126132d957600080fd5b813560206132e9612e1e83612dda565b82815260059290921b8401810191818101908684111561330857600080fd5b8286015b84811015612e5d5780356001600160401b0381111561332b5760008081fd5b6133398986838b0101612e68565b84525091830191830161330c565b6000806040838503121561335a57600080fd5b61336383612d12565b915060208301356001600160401b0381111561337e57600080fd5b61309e858286016132c8565b60008060006060848603121561339f57600080fd5b6133a884612d12565b92506133b660208501612d12565b915060408401356001600160401b038111156133d157600080fd5b6133dd86828701612dfd565b9150509250925092565b6000806000606084860312156133fc57600080fd5b61340584612d12565b925060208401356001600160401b038082111561342157600080fd5b61342d87838801612e68565b9350604086013591508082111561344357600080fd5b506133dd86828701612e68565b60008060006060848603121561346557600080fd5b61346e84612d12565b925060208401356001600160401b038082111561348a57600080fd5b61342d878388016132c8565b600181811c908216806134aa57607f821691505b6020821081036134ca57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4444433732313a7472616e7366657220746f206e6f6e2045524337323152656360408201527032b4bb32b91034b6b83632b6b2b73a32b960791b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161362c5761362c613604565b5060010190565b8054600090600181811c908083168061364d57607f831692505b6020808410820361366e57634e487b7160e01b600052602260045260246000fd5b83885260208801828015613689576001811461369a576136c5565b60ff198716825282820197506136c5565b60008981526020902060005b878110156136bf578154848201529086019084016136a6565b83019850505b5050505050505092915050565b6040815260006136e56040830185613633565b82810360208401526126ac8185613633565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b815160009082906020808601845b838110156137785781516001600160a01b031685529382019390820190600101613753565b50929695505050505050565b6020808252601390820152724444433732313a7a65726f206164647265737360681b604082015260600190565b6001600160a01b038581168252841660208201526080604082018190526000906137dd9083018561300d565b82810360608401526130028185612cba565b60006020828403121561380157600080fd5b8151612ac581612c5b565b60006020828403121561381e57600080fd5b8151612ac581613131565b60008282101561383b5761383b613604565b500390565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061387390830184612cba565b9695505050505050565b6000821982111561389057613890613604565b500190565b600082516138a7818460208701612c8e565b9190910192915050565b6001600160a01b038316815260408101600383106138df57634e487b7160e01b600052602160045260246000fd5b826020830152939250505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b33c23606ed05d4b03f6b08571f7ebd686bbbe3590240f94a72b187403615e3264736f6c634300080d0033",
}

// DDC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use DDC721MetaData.ABI instead.
var DDC721ABI = DDC721MetaData.ABI

// DDC721Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DDC721MetaData.Bin instead.
var DDC721Bin = DDC721MetaData.Bin

// DeployDDC721 deploys a new Ethereum contract, binding an instance of DDC721 to it.
func DeployDDC721(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DDC721, error) {
	parsed, err := DDC721MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DDC721Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DDC721{DDC721Caller: DDC721Caller{contract: contract}, DDC721Transactor: DDC721Transactor{contract: contract}, DDC721Filterer: DDC721Filterer{contract: contract}}, nil
}

// DDC721 is an auto generated Go binding around an Ethereum contract.
type DDC721 struct {
	DDC721Caller     // Read-only binding to the contract
	DDC721Transactor // Write-only binding to the contract
	DDC721Filterer   // Log filterer for contract events
}

// DDC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type DDC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DDC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type DDC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DDC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DDC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DDC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DDC721Session struct {
	Contract     *DDC721           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DDC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DDC721CallerSession struct {
	Contract *DDC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DDC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DDC721TransactorSession struct {
	Contract     *DDC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DDC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type DDC721Raw struct {
	Contract *DDC721 // Generic contract binding to access the raw methods on
}

// DDC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DDC721CallerRaw struct {
	Contract *DDC721Caller // Generic read-only contract binding to access the raw methods on
}

// DDC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DDC721TransactorRaw struct {
	Contract *DDC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewDDC721 creates a new instance of DDC721, bound to a specific deployed contract.
func NewDDC721(address common.Address, backend bind.ContractBackend) (*DDC721, error) {
	contract, err := bindDDC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DDC721{DDC721Caller: DDC721Caller{contract: contract}, DDC721Transactor: DDC721Transactor{contract: contract}, DDC721Filterer: DDC721Filterer{contract: contract}}, nil
}

// NewDDC721Caller creates a new read-only instance of DDC721, bound to a specific deployed contract.
func NewDDC721Caller(address common.Address, caller bind.ContractCaller) (*DDC721Caller, error) {
	contract, err := bindDDC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DDC721Caller{contract: contract}, nil
}

// NewDDC721Transactor creates a new write-only instance of DDC721, bound to a specific deployed contract.
func NewDDC721Transactor(address common.Address, transactor bind.ContractTransactor) (*DDC721Transactor, error) {
	contract, err := bindDDC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DDC721Transactor{contract: contract}, nil
}

// NewDDC721Filterer creates a new log filterer instance of DDC721, bound to a specific deployed contract.
func NewDDC721Filterer(address common.Address, filterer bind.ContractFilterer) (*DDC721Filterer, error) {
	contract, err := bindDDC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DDC721Filterer{contract: contract}, nil
}

// bindDDC721 binds a generic wrapper to an already deployed contract.
func bindDDC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DDC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DDC721 *DDC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DDC721.Contract.DDC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DDC721 *DDC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC721.Contract.DDC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DDC721 *DDC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DDC721.Contract.DDC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DDC721 *DDC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DDC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DDC721 *DDC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DDC721 *DDC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DDC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DDC721 *DDC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DDC721 *DDC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DDC721.Contract.BalanceOf(&_DDC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DDC721 *DDC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DDC721.Contract.BalanceOf(&_DDC721.CallOpts, owner)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x458c738e.
//
// Solidity: function balanceOfBatch(address[] owners) view returns(uint256[])
func (_DDC721 *DDC721Caller) BalanceOfBatch(opts *bind.CallOpts, owners []common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "balanceOfBatch", owners)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x458c738e.
//
// Solidity: function balanceOfBatch(address[] owners) view returns(uint256[])
func (_DDC721 *DDC721Session) BalanceOfBatch(owners []common.Address) ([]*big.Int, error) {
	return _DDC721.Contract.BalanceOfBatch(&_DDC721.CallOpts, owners)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x458c738e.
//
// Solidity: function balanceOfBatch(address[] owners) view returns(uint256[])
func (_DDC721 *DDC721CallerSession) BalanceOfBatch(owners []common.Address) ([]*big.Int, error) {
	return _DDC721.Contract.BalanceOfBatch(&_DDC721.CallOpts, owners)
}

// DdcURI is a free data retrieval call binding the contract method 0x293ec97c.
//
// Solidity: function ddcURI(uint256 ddcId) view returns(string)
func (_DDC721 *DDC721Caller) DdcURI(opts *bind.CallOpts, ddcId *big.Int) (string, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "ddcURI", ddcId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// DdcURI is a free data retrieval call binding the contract method 0x293ec97c.
//
// Solidity: function ddcURI(uint256 ddcId) view returns(string)
func (_DDC721 *DDC721Session) DdcURI(ddcId *big.Int) (string, error) {
	return _DDC721.Contract.DdcURI(&_DDC721.CallOpts, ddcId)
}

// DdcURI is a free data retrieval call binding the contract method 0x293ec97c.
//
// Solidity: function ddcURI(uint256 ddcId) view returns(string)
func (_DDC721 *DDC721CallerSession) DdcURI(ddcId *big.Int) (string, error) {
	return _DDC721.Contract.DdcURI(&_DDC721.CallOpts, ddcId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721Caller) GetApproved(opts *bind.CallOpts, ddcId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "getApproved", ddcId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721Session) GetApproved(ddcId *big.Int) (common.Address, error) {
	return _DDC721.Contract.GetApproved(&_DDC721.CallOpts, ddcId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721CallerSession) GetApproved(ddcId *big.Int) (common.Address, error) {
	return _DDC721.Contract.GetApproved(&_DDC721.CallOpts, ddcId)
}

// GetLatestDDCId is a free data retrieval call binding the contract method 0xb9f7fad9.
//
// Solidity: function getLatestDDCId() view returns(uint256)
func (_DDC721 *DDC721Caller) GetLatestDDCId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "getLatestDDCId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLatestDDCId is a free data retrieval call binding the contract method 0xb9f7fad9.
//
// Solidity: function getLatestDDCId() view returns(uint256)
func (_DDC721 *DDC721Session) GetLatestDDCId() (*big.Int, error) {
	return _DDC721.Contract.GetLatestDDCId(&_DDC721.CallOpts)
}

// GetLatestDDCId is a free data retrieval call binding the contract method 0xb9f7fad9.
//
// Solidity: function getLatestDDCId() view returns(uint256)
func (_DDC721 *DDC721CallerSession) GetLatestDDCId() (*big.Int, error) {
	return _DDC721.Contract.GetLatestDDCId(&_DDC721.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DDC721 *DDC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DDC721 *DDC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DDC721.Contract.IsApprovedForAll(&_DDC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DDC721 *DDC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DDC721.Contract.IsApprovedForAll(&_DDC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DDC721 *DDC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DDC721 *DDC721Session) Name() (string, error) {
	return _DDC721.Contract.Name(&_DDC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DDC721 *DDC721CallerSession) Name() (string, error) {
	return _DDC721.Contract.Name(&_DDC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DDC721 *DDC721Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DDC721 *DDC721Session) Owner() (common.Address, error) {
	return _DDC721.Contract.Owner(&_DDC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DDC721 *DDC721CallerSession) Owner() (common.Address, error) {
	return _DDC721.Contract.Owner(&_DDC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721Caller) OwnerOf(opts *bind.CallOpts, ddcId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "ownerOf", ddcId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721Session) OwnerOf(ddcId *big.Int) (common.Address, error) {
	return _DDC721.Contract.OwnerOf(&_DDC721.CallOpts, ddcId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 ddcId) view returns(address)
func (_DDC721 *DDC721CallerSession) OwnerOf(ddcId *big.Int) (common.Address, error) {
	return _DDC721.Contract.OwnerOf(&_DDC721.CallOpts, ddcId)
}

// OwnerOfBatch is a free data retrieval call binding the contract method 0xbda80117.
//
// Solidity: function ownerOfBatch(uint256[] ddcIds) view returns(address[])
func (_DDC721 *DDC721Caller) OwnerOfBatch(opts *bind.CallOpts, ddcIds []*big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "ownerOfBatch", ddcIds)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// OwnerOfBatch is a free data retrieval call binding the contract method 0xbda80117.
//
// Solidity: function ownerOfBatch(uint256[] ddcIds) view returns(address[])
func (_DDC721 *DDC721Session) OwnerOfBatch(ddcIds []*big.Int) ([]common.Address, error) {
	return _DDC721.Contract.OwnerOfBatch(&_DDC721.CallOpts, ddcIds)
}

// OwnerOfBatch is a free data retrieval call binding the contract method 0xbda80117.
//
// Solidity: function ownerOfBatch(uint256[] ddcIds) view returns(address[])
func (_DDC721 *DDC721CallerSession) OwnerOfBatch(ddcIds []*big.Int) ([]common.Address, error) {
	return _DDC721.Contract.OwnerOfBatch(&_DDC721.CallOpts, ddcIds)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DDC721 *DDC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DDC721 *DDC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DDC721.Contract.SupportsInterface(&_DDC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DDC721 *DDC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DDC721.Contract.SupportsInterface(&_DDC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DDC721 *DDC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DDC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DDC721 *DDC721Session) Symbol() (string, error) {
	return _DDC721.Contract.Symbol(&_DDC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DDC721 *DDC721CallerSession) Symbol() (string, error) {
	return _DDC721.Contract.Symbol(&_DDC721.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "approve", to, ddcId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 ddcId) returns()
func (_DDC721 *DDC721Session) Approve(to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Approve(&_DDC721.TransactOpts, to, ddcId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) Approve(to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Approve(&_DDC721.TransactOpts, to, ddcId)
}

// ApproveBatch is a paid mutator transaction binding the contract method 0xaa5951be.
//
// Solidity: function approveBatch(address to, uint256[] ddcIds) returns()
func (_DDC721 *DDC721Transactor) ApproveBatch(opts *bind.TransactOpts, to common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "approveBatch", to, ddcIds)
}

// ApproveBatch is a paid mutator transaction binding the contract method 0xaa5951be.
//
// Solidity: function approveBatch(address to, uint256[] ddcIds) returns()
func (_DDC721 *DDC721Session) ApproveBatch(to common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.ApproveBatch(&_DDC721.TransactOpts, to, ddcIds)
}

// ApproveBatch is a paid mutator transaction binding the contract method 0xaa5951be.
//
// Solidity: function approveBatch(address to, uint256[] ddcIds) returns()
func (_DDC721 *DDC721TransactorSession) ApproveBatch(to common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.ApproveBatch(&_DDC721.TransactOpts, to, ddcIds)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0xf3993d11.
//
// Solidity: function batchTransferFrom(address from, address to, uint256[] ddcIds) returns()
func (_DDC721 *DDC721Transactor) BatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "batchTransferFrom", from, to, ddcIds)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0xf3993d11.
//
// Solidity: function batchTransferFrom(address from, address to, uint256[] ddcIds) returns()
func (_DDC721 *DDC721Session) BatchTransferFrom(from common.Address, to common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.BatchTransferFrom(&_DDC721.TransactOpts, from, to, ddcIds)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0xf3993d11.
//
// Solidity: function batchTransferFrom(address from, address to, uint256[] ddcIds) returns()
func (_DDC721 *DDC721TransactorSession) BatchTransferFrom(from common.Address, to common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.BatchTransferFrom(&_DDC721.TransactOpts, from, to, ddcIds)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) Burn(opts *bind.TransactOpts, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "burn", ddcId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 ddcId) returns()
func (_DDC721 *DDC721Session) Burn(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Burn(&_DDC721.TransactOpts, ddcId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) Burn(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Burn(&_DDC721.TransactOpts, ddcId)
}

// BurnBatch is a paid mutator transaction binding the contract method 0xb2dc5dc3.
//
// Solidity: function burnBatch(address owner, uint256[] ddcIds) returns()
func (_DDC721 *DDC721Transactor) BurnBatch(opts *bind.TransactOpts, owner common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "burnBatch", owner, ddcIds)
}

// BurnBatch is a paid mutator transaction binding the contract method 0xb2dc5dc3.
//
// Solidity: function burnBatch(address owner, uint256[] ddcIds) returns()
func (_DDC721 *DDC721Session) BurnBatch(owner common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.BurnBatch(&_DDC721.TransactOpts, owner, ddcIds)
}

// BurnBatch is a paid mutator transaction binding the contract method 0xb2dc5dc3.
//
// Solidity: function burnBatch(address owner, uint256[] ddcIds) returns()
func (_DDC721 *DDC721TransactorSession) BurnBatch(owner common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.BurnBatch(&_DDC721.TransactOpts, owner, ddcIds)
}

// Freeze is a paid mutator transaction binding the contract method 0xd7a78db8.
//
// Solidity: function freeze(uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) Freeze(opts *bind.TransactOpts, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "freeze", ddcId)
}

// Freeze is a paid mutator transaction binding the contract method 0xd7a78db8.
//
// Solidity: function freeze(uint256 ddcId) returns()
func (_DDC721 *DDC721Session) Freeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Freeze(&_DDC721.TransactOpts, ddcId)
}

// Freeze is a paid mutator transaction binding the contract method 0xd7a78db8.
//
// Solidity: function freeze(uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) Freeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.Freeze(&_DDC721.TransactOpts, ddcId)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DDC721 *DDC721Transactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DDC721 *DDC721Session) Initialize() (*types.Transaction, error) {
	return _DDC721.Contract.Initialize(&_DDC721.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DDC721 *DDC721TransactorSession) Initialize() (*types.Transaction, error) {
	return _DDC721.Contract.Initialize(&_DDC721.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string _ddcURI) returns()
func (_DDC721 *DDC721Transactor) Mint(opts *bind.TransactOpts, to common.Address, _ddcURI string) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "mint", to, _ddcURI)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string _ddcURI) returns()
func (_DDC721 *DDC721Session) Mint(to common.Address, _ddcURI string) (*types.Transaction, error) {
	return _DDC721.Contract.Mint(&_DDC721.TransactOpts, to, _ddcURI)
}

// Mint is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address to, string _ddcURI) returns()
func (_DDC721 *DDC721TransactorSession) Mint(to common.Address, _ddcURI string) (*types.Transaction, error) {
	return _DDC721.Contract.Mint(&_DDC721.TransactOpts, to, _ddcURI)
}

// MintBatch is a paid mutator transaction binding the contract method 0xed0e31de.
//
// Solidity: function mintBatch(address to, string[] ddcURIs) returns()
func (_DDC721 *DDC721Transactor) MintBatch(opts *bind.TransactOpts, to common.Address, ddcURIs []string) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "mintBatch", to, ddcURIs)
}

// MintBatch is a paid mutator transaction binding the contract method 0xed0e31de.
//
// Solidity: function mintBatch(address to, string[] ddcURIs) returns()
func (_DDC721 *DDC721Session) MintBatch(to common.Address, ddcURIs []string) (*types.Transaction, error) {
	return _DDC721.Contract.MintBatch(&_DDC721.TransactOpts, to, ddcURIs)
}

// MintBatch is a paid mutator transaction binding the contract method 0xed0e31de.
//
// Solidity: function mintBatch(address to, string[] ddcURIs) returns()
func (_DDC721 *DDC721TransactorSession) MintBatch(to common.Address, ddcURIs []string) (*types.Transaction, error) {
	return _DDC721.Contract.MintBatch(&_DDC721.TransactOpts, to, ddcURIs)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_DDC721 *DDC721Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_DDC721 *DDC721Session) RenounceOwnership() (*types.Transaction, error) {
	return _DDC721.Contract.RenounceOwnership(&_DDC721.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_DDC721 *DDC721TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _DDC721.Contract.RenounceOwnership(&_DDC721.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x28cfbd46.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ddcIds, bytes data) returns()
func (_DDC721 *DDC721Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ddcIds []*big.Int, data []byte) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "safeBatchTransferFrom", from, to, ddcIds, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x28cfbd46.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ddcIds, bytes data) returns()
func (_DDC721 *DDC721Session) SafeBatchTransferFrom(from common.Address, to common.Address, ddcIds []*big.Int, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeBatchTransferFrom(&_DDC721.TransactOpts, from, to, ddcIds, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x28cfbd46.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ddcIds, bytes data) returns()
func (_DDC721 *DDC721TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ddcIds []*big.Int, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeBatchTransferFrom(&_DDC721.TransactOpts, from, to, ddcIds, data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xf6dda936.
//
// Solidity: function safeMint(address to, string _ddcURI, bytes _data) returns()
func (_DDC721 *DDC721Transactor) SafeMint(opts *bind.TransactOpts, to common.Address, _ddcURI string, _data []byte) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "safeMint", to, _ddcURI, _data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xf6dda936.
//
// Solidity: function safeMint(address to, string _ddcURI, bytes _data) returns()
func (_DDC721 *DDC721Session) SafeMint(to common.Address, _ddcURI string, _data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeMint(&_DDC721.TransactOpts, to, _ddcURI, _data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xf6dda936.
//
// Solidity: function safeMint(address to, string _ddcURI, bytes _data) returns()
func (_DDC721 *DDC721TransactorSession) SafeMint(to common.Address, _ddcURI string, _data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeMint(&_DDC721.TransactOpts, to, _ddcURI, _data)
}

// SafeMintBatch is a paid mutator transaction binding the contract method 0xf96ab8c4.
//
// Solidity: function safeMintBatch(address to, string[] ddcURIs, bytes data) returns()
func (_DDC721 *DDC721Transactor) SafeMintBatch(opts *bind.TransactOpts, to common.Address, ddcURIs []string, data []byte) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "safeMintBatch", to, ddcURIs, data)
}

// SafeMintBatch is a paid mutator transaction binding the contract method 0xf96ab8c4.
//
// Solidity: function safeMintBatch(address to, string[] ddcURIs, bytes data) returns()
func (_DDC721 *DDC721Session) SafeMintBatch(to common.Address, ddcURIs []string, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeMintBatch(&_DDC721.TransactOpts, to, ddcURIs, data)
}

// SafeMintBatch is a paid mutator transaction binding the contract method 0xf96ab8c4.
//
// Solidity: function safeMintBatch(address to, string[] ddcURIs, bytes data) returns()
func (_DDC721 *DDC721TransactorSession) SafeMintBatch(to common.Address, ddcURIs []string, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeMintBatch(&_DDC721.TransactOpts, to, ddcURIs, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 ddcId, bytes data) returns()
func (_DDC721 *DDC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ddcId *big.Int, data []byte) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "safeTransferFrom", from, to, ddcId, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 ddcId, bytes data) returns()
func (_DDC721 *DDC721Session) SafeTransferFrom(from common.Address, to common.Address, ddcId *big.Int, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeTransferFrom(&_DDC721.TransactOpts, from, to, ddcId, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 ddcId, bytes data) returns()
func (_DDC721 *DDC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, ddcId *big.Int, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.SafeTransferFrom(&_DDC721.TransactOpts, from, to, ddcId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DDC721 *DDC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DDC721 *DDC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DDC721.Contract.SetApprovalForAll(&_DDC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DDC721 *DDC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DDC721.Contract.SetApprovalForAll(&_DDC721.TransactOpts, operator, approved)
}

// SetAuthorityProxyAddress is a paid mutator transaction binding the contract method 0xc5837d82.
//
// Solidity: function setAuthorityProxyAddress(address authorityProxyAddress) returns()
func (_DDC721 *DDC721Transactor) SetAuthorityProxyAddress(opts *bind.TransactOpts, authorityProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setAuthorityProxyAddress", authorityProxyAddress)
}

// SetAuthorityProxyAddress is a paid mutator transaction binding the contract method 0xc5837d82.
//
// Solidity: function setAuthorityProxyAddress(address authorityProxyAddress) returns()
func (_DDC721 *DDC721Session) SetAuthorityProxyAddress(authorityProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.SetAuthorityProxyAddress(&_DDC721.TransactOpts, authorityProxyAddress)
}

// SetAuthorityProxyAddress is a paid mutator transaction binding the contract method 0xc5837d82.
//
// Solidity: function setAuthorityProxyAddress(address authorityProxyAddress) returns()
func (_DDC721 *DDC721TransactorSession) SetAuthorityProxyAddress(authorityProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.SetAuthorityProxyAddress(&_DDC721.TransactOpts, authorityProxyAddress)
}

// SetChargeProxyAddress is a paid mutator transaction binding the contract method 0x44d891df.
//
// Solidity: function setChargeProxyAddress(address chargeProxyAddress) returns()
func (_DDC721 *DDC721Transactor) SetChargeProxyAddress(opts *bind.TransactOpts, chargeProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setChargeProxyAddress", chargeProxyAddress)
}

// SetChargeProxyAddress is a paid mutator transaction binding the contract method 0x44d891df.
//
// Solidity: function setChargeProxyAddress(address chargeProxyAddress) returns()
func (_DDC721 *DDC721Session) SetChargeProxyAddress(chargeProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.SetChargeProxyAddress(&_DDC721.TransactOpts, chargeProxyAddress)
}

// SetChargeProxyAddress is a paid mutator transaction binding the contract method 0x44d891df.
//
// Solidity: function setChargeProxyAddress(address chargeProxyAddress) returns()
func (_DDC721 *DDC721TransactorSession) SetChargeProxyAddress(chargeProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.SetChargeProxyAddress(&_DDC721.TransactOpts, chargeProxyAddress)
}

// SetNameAndSymbol is a paid mutator transaction binding the contract method 0x5a446215.
//
// Solidity: function setNameAndSymbol(string name_, string symbol_) returns()
func (_DDC721 *DDC721Transactor) SetNameAndSymbol(opts *bind.TransactOpts, name_ string, symbol_ string) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setNameAndSymbol", name_, symbol_)
}

// SetNameAndSymbol is a paid mutator transaction binding the contract method 0x5a446215.
//
// Solidity: function setNameAndSymbol(string name_, string symbol_) returns()
func (_DDC721 *DDC721Session) SetNameAndSymbol(name_ string, symbol_ string) (*types.Transaction, error) {
	return _DDC721.Contract.SetNameAndSymbol(&_DDC721.TransactOpts, name_, symbol_)
}

// SetNameAndSymbol is a paid mutator transaction binding the contract method 0x5a446215.
//
// Solidity: function setNameAndSymbol(string name_, string symbol_) returns()
func (_DDC721 *DDC721TransactorSession) SetNameAndSymbol(name_ string, symbol_ string) (*types.Transaction, error) {
	return _DDC721.Contract.SetNameAndSymbol(&_DDC721.TransactOpts, name_, symbol_)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 ddcId, string ddcURI_) returns()
func (_DDC721 *DDC721Transactor) SetURI(opts *bind.TransactOpts, ddcId *big.Int, ddcURI_ string) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "setURI", ddcId, ddcURI_)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 ddcId, string ddcURI_) returns()
func (_DDC721 *DDC721Session) SetURI(ddcId *big.Int, ddcURI_ string) (*types.Transaction, error) {
	return _DDC721.Contract.SetURI(&_DDC721.TransactOpts, ddcId, ddcURI_)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 ddcId, string ddcURI_) returns()
func (_DDC721 *DDC721TransactorSession) SetURI(ddcId *big.Int, ddcURI_ string) (*types.Transaction, error) {
	return _DDC721.Contract.SetURI(&_DDC721.TransactOpts, ddcId, ddcURI_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "transferFrom", from, to, ddcId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 ddcId) returns()
func (_DDC721 *DDC721Session) TransferFrom(from common.Address, to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.TransferFrom(&_DDC721.TransactOpts, from, to, ddcId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) TransferFrom(from common.Address, to common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.TransferFrom(&_DDC721.TransactOpts, from, to, ddcId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_DDC721 *DDC721Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_DDC721 *DDC721Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.TransferOwnership(&_DDC721.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_DDC721 *DDC721TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.TransferOwnership(&_DDC721.TransactOpts, newOwner)
}

// UnFreeze is a paid mutator transaction binding the contract method 0xd302b0dc.
//
// Solidity: function unFreeze(uint256 ddcId) returns()
func (_DDC721 *DDC721Transactor) UnFreeze(opts *bind.TransactOpts, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "unFreeze", ddcId)
}

// UnFreeze is a paid mutator transaction binding the contract method 0xd302b0dc.
//
// Solidity: function unFreeze(uint256 ddcId) returns()
func (_DDC721 *DDC721Session) UnFreeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.UnFreeze(&_DDC721.TransactOpts, ddcId)
}

// UnFreeze is a paid mutator transaction binding the contract method 0xd302b0dc.
//
// Solidity: function unFreeze(uint256 ddcId) returns()
func (_DDC721 *DDC721TransactorSession) UnFreeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC721.Contract.UnFreeze(&_DDC721.TransactOpts, ddcId)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_DDC721 *DDC721Transactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_DDC721 *DDC721Session) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.UpgradeTo(&_DDC721.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_DDC721 *DDC721TransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _DDC721.Contract.UpgradeTo(&_DDC721.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DDC721 *DDC721Transactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DDC721.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DDC721 *DDC721Session) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.UpgradeToAndCall(&_DDC721.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DDC721 *DDC721TransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DDC721.Contract.UpgradeToAndCall(&_DDC721.TransactOpts, newImplementation, data)
}

// DDC721AdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the DDC721 contract.
type DDC721AdminChangedIterator struct {
	Event *DDC721AdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721AdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721AdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721AdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721AdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721AdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721AdminChanged represents a AdminChanged event raised by the DDC721 contract.
type DDC721AdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_DDC721 *DDC721Filterer) FilterAdminChanged(opts *bind.FilterOpts) (*DDC721AdminChangedIterator, error) {

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &DDC721AdminChangedIterator{contract: _DDC721.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_DDC721 *DDC721Filterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *DDC721AdminChanged) (event.Subscription, error) {

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721AdminChanged)
				if err := _DDC721.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_DDC721 *DDC721Filterer) ParseAdminChanged(log types.Log) (*DDC721AdminChanged, error) {
	event := new(DDC721AdminChanged)
	if err := _DDC721.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DDC721 contract.
type DDC721ApprovalIterator struct {
	Event *DDC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721Approval represents a Approval event raised by the DDC721 contract.
type DDC721Approval struct {
	Owner    common.Address
	Approved common.Address
	DdcId    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed ddcId)
func (_DDC721 *DDC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, ddcId []*big.Int) (*DDC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return &DDC721ApprovalIterator{contract: _DDC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed ddcId)
func (_DDC721 *DDC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DDC721Approval, owner []common.Address, approved []common.Address, ddcId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721Approval)
				if err := _DDC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed ddcId)
func (_DDC721 *DDC721Filterer) ParseApproval(log types.Log) (*DDC721Approval, error) {
	event := new(DDC721Approval)
	if err := _DDC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721ApprovalBatchIterator is returned from FilterApprovalBatch and is used to iterate over the raw logs and unpacked data for ApprovalBatch events raised by the DDC721 contract.
type DDC721ApprovalBatchIterator struct {
	Event *DDC721ApprovalBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721ApprovalBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721ApprovalBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721ApprovalBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721ApprovalBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721ApprovalBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721ApprovalBatch represents a ApprovalBatch event raised by the DDC721 contract.
type DDC721ApprovalBatch struct {
	Owners   []common.Address
	Approved common.Address
	DdcIds   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalBatch is a free log retrieval operation binding the contract event 0x04330fc119d24ce0982e8f95a39c2135b36a65bb93b04d592b3a68f6de3e12be.
//
// Solidity: event ApprovalBatch(address[] indexed owners, address indexed approved, uint256[] ddcIds)
func (_DDC721 *DDC721Filterer) FilterApprovalBatch(opts *bind.FilterOpts, owners [][]common.Address, approved []common.Address) (*DDC721ApprovalBatchIterator, error) {

	var ownersRule []interface{}
	for _, ownersItem := range owners {
		ownersRule = append(ownersRule, ownersItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "ApprovalBatch", ownersRule, approvedRule)
	if err != nil {
		return nil, err
	}
	return &DDC721ApprovalBatchIterator{contract: _DDC721.contract, event: "ApprovalBatch", logs: logs, sub: sub}, nil
}

// WatchApprovalBatch is a free log subscription operation binding the contract event 0x04330fc119d24ce0982e8f95a39c2135b36a65bb93b04d592b3a68f6de3e12be.
//
// Solidity: event ApprovalBatch(address[] indexed owners, address indexed approved, uint256[] ddcIds)
func (_DDC721 *DDC721Filterer) WatchApprovalBatch(opts *bind.WatchOpts, sink chan<- *DDC721ApprovalBatch, owners [][]common.Address, approved []common.Address) (event.Subscription, error) {

	var ownersRule []interface{}
	for _, ownersItem := range owners {
		ownersRule = append(ownersRule, ownersItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "ApprovalBatch", ownersRule, approvedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721ApprovalBatch)
				if err := _DDC721.contract.UnpackLog(event, "ApprovalBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalBatch is a log parse operation binding the contract event 0x04330fc119d24ce0982e8f95a39c2135b36a65bb93b04d592b3a68f6de3e12be.
//
// Solidity: event ApprovalBatch(address[] indexed owners, address indexed approved, uint256[] ddcIds)
func (_DDC721 *DDC721Filterer) ParseApprovalBatch(log types.Log) (*DDC721ApprovalBatch, error) {
	event := new(DDC721ApprovalBatch)
	if err := _DDC721.contract.UnpackLog(event, "ApprovalBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the DDC721 contract.
type DDC721ApprovalForAllIterator struct {
	Event *DDC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721ApprovalForAll represents a ApprovalForAll event raised by the DDC721 contract.
type DDC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DDC721 *DDC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*DDC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &DDC721ApprovalForAllIterator{contract: _DDC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DDC721 *DDC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *DDC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721ApprovalForAll)
				if err := _DDC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DDC721 *DDC721Filterer) ParseApprovalForAll(log types.Log) (*DDC721ApprovalForAll, error) {
	event := new(DDC721ApprovalForAll)
	if err := _DDC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721BeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the DDC721 contract.
type DDC721BeaconUpgradedIterator struct {
	Event *DDC721BeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721BeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721BeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721BeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721BeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721BeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721BeaconUpgraded represents a BeaconUpgraded event raised by the DDC721 contract.
type DDC721BeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_DDC721 *DDC721Filterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*DDC721BeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &DDC721BeaconUpgradedIterator{contract: _DDC721.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_DDC721 *DDC721Filterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *DDC721BeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721BeaconUpgraded)
				if err := _DDC721.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_DDC721 *DDC721Filterer) ParseBeaconUpgraded(log types.Log) (*DDC721BeaconUpgraded, error) {
	event := new(DDC721BeaconUpgraded)
	if err := _DDC721.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721EnterBlacklistIterator is returned from FilterEnterBlacklist and is used to iterate over the raw logs and unpacked data for EnterBlacklist events raised by the DDC721 contract.
type DDC721EnterBlacklistIterator struct {
	Event *DDC721EnterBlacklist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721EnterBlacklistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721EnterBlacklist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721EnterBlacklist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721EnterBlacklistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721EnterBlacklistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721EnterBlacklist represents a EnterBlacklist event raised by the DDC721 contract.
type DDC721EnterBlacklist struct {
	Sender common.Address
	DdcId  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEnterBlacklist is a free log retrieval operation binding the contract event 0x027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36.
//
// Solidity: event EnterBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) FilterEnterBlacklist(opts *bind.FilterOpts, sender []common.Address) (*DDC721EnterBlacklistIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "EnterBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return &DDC721EnterBlacklistIterator{contract: _DDC721.contract, event: "EnterBlacklist", logs: logs, sub: sub}, nil
}

// WatchEnterBlacklist is a free log subscription operation binding the contract event 0x027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36.
//
// Solidity: event EnterBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) WatchEnterBlacklist(opts *bind.WatchOpts, sink chan<- *DDC721EnterBlacklist, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "EnterBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721EnterBlacklist)
				if err := _DDC721.contract.UnpackLog(event, "EnterBlacklist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnterBlacklist is a log parse operation binding the contract event 0x027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36.
//
// Solidity: event EnterBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) ParseEnterBlacklist(log types.Log) (*DDC721EnterBlacklist, error) {
	event := new(DDC721EnterBlacklist)
	if err := _DDC721.contract.UnpackLog(event, "EnterBlacklist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721ExitBlacklistIterator is returned from FilterExitBlacklist and is used to iterate over the raw logs and unpacked data for ExitBlacklist events raised by the DDC721 contract.
type DDC721ExitBlacklistIterator struct {
	Event *DDC721ExitBlacklist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721ExitBlacklistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721ExitBlacklist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721ExitBlacklist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721ExitBlacklistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721ExitBlacklistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721ExitBlacklist represents a ExitBlacklist event raised by the DDC721 contract.
type DDC721ExitBlacklist struct {
	Sender common.Address
	DdcId  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExitBlacklist is a free log retrieval operation binding the contract event 0xaddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f.
//
// Solidity: event ExitBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) FilterExitBlacklist(opts *bind.FilterOpts, sender []common.Address) (*DDC721ExitBlacklistIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "ExitBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return &DDC721ExitBlacklistIterator{contract: _DDC721.contract, event: "ExitBlacklist", logs: logs, sub: sub}, nil
}

// WatchExitBlacklist is a free log subscription operation binding the contract event 0xaddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f.
//
// Solidity: event ExitBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) WatchExitBlacklist(opts *bind.WatchOpts, sink chan<- *DDC721ExitBlacklist, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "ExitBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721ExitBlacklist)
				if err := _DDC721.contract.UnpackLog(event, "ExitBlacklist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExitBlacklist is a log parse operation binding the contract event 0xaddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f.
//
// Solidity: event ExitBlacklist(address indexed sender, uint256 ddcId)
func (_DDC721 *DDC721Filterer) ParseExitBlacklist(log types.Log) (*DDC721ExitBlacklist, error) {
	event := new(DDC721ExitBlacklist)
	if err := _DDC721.contract.UnpackLog(event, "ExitBlacklist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the DDC721 contract.
type DDC721OwnershipTransferredIterator struct {
	Event *DDC721OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721OwnershipTransferred represents a OwnershipTransferred event raised by the DDC721 contract.
type DDC721OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_DDC721 *DDC721Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*DDC721OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &DDC721OwnershipTransferredIterator{contract: _DDC721.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_DDC721 *DDC721Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *DDC721OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721OwnershipTransferred)
				if err := _DDC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_DDC721 *DDC721Filterer) ParseOwnershipTransferred(log types.Log) (*DDC721OwnershipTransferred, error) {
	event := new(DDC721OwnershipTransferred)
	if err := _DDC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721SetNameAndSymbolIterator is returned from FilterSetNameAndSymbol and is used to iterate over the raw logs and unpacked data for SetNameAndSymbol events raised by the DDC721 contract.
type DDC721SetNameAndSymbolIterator struct {
	Event *DDC721SetNameAndSymbol // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721SetNameAndSymbolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721SetNameAndSymbol)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721SetNameAndSymbol)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721SetNameAndSymbolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721SetNameAndSymbolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721SetNameAndSymbol represents a SetNameAndSymbol event raised by the DDC721 contract.
type DDC721SetNameAndSymbol struct {
	Name   string
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSetNameAndSymbol is a free log retrieval operation binding the contract event 0xd150542982eaa18f20ceb10f524c418899e6a331a81ee4a70daa921f976fab3b.
//
// Solidity: event SetNameAndSymbol(string name, string symbol)
func (_DDC721 *DDC721Filterer) FilterSetNameAndSymbol(opts *bind.FilterOpts) (*DDC721SetNameAndSymbolIterator, error) {

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "SetNameAndSymbol")
	if err != nil {
		return nil, err
	}
	return &DDC721SetNameAndSymbolIterator{contract: _DDC721.contract, event: "SetNameAndSymbol", logs: logs, sub: sub}, nil
}

// WatchSetNameAndSymbol is a free log subscription operation binding the contract event 0xd150542982eaa18f20ceb10f524c418899e6a331a81ee4a70daa921f976fab3b.
//
// Solidity: event SetNameAndSymbol(string name, string symbol)
func (_DDC721 *DDC721Filterer) WatchSetNameAndSymbol(opts *bind.WatchOpts, sink chan<- *DDC721SetNameAndSymbol) (event.Subscription, error) {

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "SetNameAndSymbol")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721SetNameAndSymbol)
				if err := _DDC721.contract.UnpackLog(event, "SetNameAndSymbol", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetNameAndSymbol is a log parse operation binding the contract event 0xd150542982eaa18f20ceb10f524c418899e6a331a81ee4a70daa921f976fab3b.
//
// Solidity: event SetNameAndSymbol(string name, string symbol)
func (_DDC721 *DDC721Filterer) ParseSetNameAndSymbol(log types.Log) (*DDC721SetNameAndSymbol, error) {
	event := new(DDC721SetNameAndSymbol)
	if err := _DDC721.contract.UnpackLog(event, "SetNameAndSymbol", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721SetURIIterator is returned from FilterSetURI and is used to iterate over the raw logs and unpacked data for SetURI events raised by the DDC721 contract.
type DDC721SetURIIterator struct {
	Event *DDC721SetURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721SetURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721SetURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721SetURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721SetURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721SetURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721SetURI represents a SetURI event raised by the DDC721 contract.
type DDC721SetURI struct {
	Operator common.Address
	DdcId    *big.Int
	DdcURI   string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetURI is a free log retrieval operation binding the contract event 0x18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d0.
//
// Solidity: event SetURI(address indexed operator, uint256 indexed ddcId, string ddcURI)
func (_DDC721 *DDC721Filterer) FilterSetURI(opts *bind.FilterOpts, operator []common.Address, ddcId []*big.Int) (*DDC721SetURIIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "SetURI", operatorRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return &DDC721SetURIIterator{contract: _DDC721.contract, event: "SetURI", logs: logs, sub: sub}, nil
}

// WatchSetURI is a free log subscription operation binding the contract event 0x18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d0.
//
// Solidity: event SetURI(address indexed operator, uint256 indexed ddcId, string ddcURI)
func (_DDC721 *DDC721Filterer) WatchSetURI(opts *bind.WatchOpts, sink chan<- *DDC721SetURI, operator []common.Address, ddcId []*big.Int) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "SetURI", operatorRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721SetURI)
				if err := _DDC721.contract.UnpackLog(event, "SetURI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetURI is a log parse operation binding the contract event 0x18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d0.
//
// Solidity: event SetURI(address indexed operator, uint256 indexed ddcId, string ddcURI)
func (_DDC721 *DDC721Filterer) ParseSetURI(log types.Log) (*DDC721SetURI, error) {
	event := new(DDC721SetURI)
	if err := _DDC721.contract.UnpackLog(event, "SetURI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DDC721 contract.
type DDC721TransferIterator struct {
	Event *DDC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721Transfer represents a Transfer event raised by the DDC721 contract.
type DDC721Transfer struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	DdcId    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f.
//
// Solidity: event Transfer(address indexed operator, address indexed from, address indexed to, uint256 ddcId)
func (_DDC721 *DDC721Filterer) FilterTransfer(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*DDC721TransferIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "Transfer", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DDC721TransferIterator{contract: _DDC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f.
//
// Solidity: event Transfer(address indexed operator, address indexed from, address indexed to, uint256 ddcId)
func (_DDC721 *DDC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DDC721Transfer, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "Transfer", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721Transfer)
				if err := _DDC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f.
//
// Solidity: event Transfer(address indexed operator, address indexed from, address indexed to, uint256 ddcId)
func (_DDC721 *DDC721Filterer) ParseTransfer(log types.Log) (*DDC721Transfer, error) {
	event := new(DDC721Transfer)
	if err := _DDC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the DDC721 contract.
type DDC721TransferBatchIterator struct {
	Event *DDC721TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721TransferBatch represents a TransferBatch event raised by the DDC721 contract.
type DDC721TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	DdcIds   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x2e75a6cf483a33fd7e40b01fc5b561361f6e9b2d5a492f866bd66ca430a8c557.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ddcIds)
func (_DDC721 *DDC721Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*DDC721TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DDC721TransferBatchIterator{contract: _DDC721.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x2e75a6cf483a33fd7e40b01fc5b561361f6e9b2d5a492f866bd66ca430a8c557.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ddcIds)
func (_DDC721 *DDC721Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *DDC721TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721TransferBatch)
				if err := _DDC721.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x2e75a6cf483a33fd7e40b01fc5b561361f6e9b2d5a492f866bd66ca430a8c557.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ddcIds)
func (_DDC721 *DDC721Filterer) ParseTransferBatch(log types.Log) (*DDC721TransferBatch, error) {
	event := new(DDC721TransferBatch)
	if err := _DDC721.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC721UpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the DDC721 contract.
type DDC721UpgradedIterator struct {
	Event *DDC721Upgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC721UpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC721Upgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC721Upgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC721UpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC721UpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC721Upgraded represents a Upgraded event raised by the DDC721 contract.
type DDC721Upgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DDC721 *DDC721Filterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*DDC721UpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _DDC721.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &DDC721UpgradedIterator{contract: _DDC721.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DDC721 *DDC721Filterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *DDC721Upgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _DDC721.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC721Upgraded)
				if err := _DDC721.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DDC721 *DDC721Filterer) ParseUpgraded(log types.Log) (*DDC721Upgraded, error) {
	event := new(DDC721Upgraded)
	if err := _DDC721.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
