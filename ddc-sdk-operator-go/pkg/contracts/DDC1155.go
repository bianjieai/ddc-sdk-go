// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DDC1155MetaData contains all meta data concerning the DDC1155 contract.
var DDC1155MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"EnterBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"ExitBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ddcURI\",\"type\":\"string\"}],\"name\":\"SetURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"ddcURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestDDCId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ddcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ddcURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"ddcURIs\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorityProxyAddress\",\"type\":\"address\"}],\"name\":\"setAuthorityProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chargeProxyAddress\",\"type\":\"address\"}],\"name\":\"setChargeProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ddcURI_\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ddcId\",\"type\":\"uint256\"}],\"name\":\"unFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b5060805161316262000100600039600081816106c701528181610707015281816108ce015261090e01526131626000f3fe60806040526004361061014a5760003560e01c80638da5cb5b116100b6578063c5837d821161006f578063c5837d82146103a8578063d302b0dc146103c8578063d7a78db8146103e8578063e985e9c514610408578063f242432a14610428578063f2fde38b1461044857600080fd5b80638da5cb5b146102eb5780639dc29fac14610313578063a22cb46514610333578063b2dc5dc314610353578063b55bc61714610373578063b9f7fad91461039357600080fd5b80634e1273f4116101085780634e1273f4146102415780634f1ef2861461026e5780636357035514610281578063685e8247146102a1578063715018a6146102c15780638129fc1c146102d657600080fd5b8062fdd58e1461014f57806301ffc9a714610182578063293ec97c146101b25780632eb2c2d6146101df5780633659cfe61461020157806344d891df14610221575b600080fd5b34801561015b57600080fd5b5061016f61016a3660046125ac565b610468565b6040519081526020015b60405180910390f35b34801561018e57600080fd5b506101a261019d3660046125ec565b6104c1565b6040519015158152602001610179565b3480156101be57600080fd5b506101d26101cd366004612609565b6104f8565b604051610179919061267a565b3480156101eb57600080fd5b506101ff6101fa3660046127d6565b6105a1565b005b34801561020d57600080fd5b506101ff61021c36600461287f565b6106bd565b34801561022d57600080fd5b506101ff61023c36600461287f565b610785565b34801561024d57600080fd5b5061026161025c36600461289a565b6107db565b604051610179919061299f565b6101ff61027c3660046129b2565b6108c4565b34801561028d57600080fd5b506101ff61029c3660046129f5565b61097d565b3480156102ad57600080fd5b506101ff6102bc366004612b0a565b610b0e565b3480156102cd57600080fd5b506101ff610c49565b3480156102e257600080fd5b506101ff610c7f565b3480156102f757600080fd5b506097546040516001600160a01b039091168152602001610179565b34801561031f57600080fd5b506101ff61032e3660046125ac565b610d02565b34801561033f57600080fd5b506101ff61034e366004612b6e565b610d6b565b34801561035f57600080fd5b506101ff61036e366004612ba5565b610e54565b34801561037f57600080fd5b506101ff61038e366004612be8565b610f43565b34801561039f57600080fd5b5061016f610fd5565b3480156103b457600080fd5b506101ff6103c336600461287f565b610fe7565b3480156103d457600080fd5b506101ff6103e3366004612609565b61103d565b3480156103f457600080fd5b506101ff610403366004612609565b6110b2565b34801561041457600080fd5b506101a2610423366004612c59565b611125565b34801561043457600080fd5b506101ff610443366004612c8c565b611192565b34801561045457600080fd5b506101ff61046336600461287f565b611240565b60006001600160a01b0383166104995760405162461bcd60e51b815260040161049090612cf0565b60405180910390fd5b50600090815260fb602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b031982166305dcd1dd60e41b14806104f257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060610503826112d8565b600082815260fd60205260409020805461051c90612d1e565b80601f016020809104026020016040519081016040528092919081815260200182805461054890612d1e565b80156105955780601f1061056a57610100808354040283529160200191610595565b820191906000526020600020905b81548152906001019060200180831161057857829003601f168201915b50505050509050919050565b6105a9611336565b6105b28561140a565b6105bb8461140a565b6105c585856114eb565b6105cf853361156e565b81518351146105f05760405162461bcd60e51b815260040161049090612d58565b60005b835181101561064a5761063a868686848151811061061357610613612d8f565b602002602001015186858151811061062d5761062d612d8f565b60200260200101516115e0565b61064381612dbb565b90506105f3565b50836001600160a01b0316856001600160a01b03166106663390565b6001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516106a0929190612dd4565b60405180910390a46106b6338686868686611646565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107055760405162461bcd60e51b815260040161049090612df9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107376117d9565b6001600160a01b03161461075d5760405162461bcd60e51b815260040161049090612e45565b61076681611807565b6040805160008082526020820190925261078291839190611831565b50565b6097546001600160a01b031633146107af5760405162461bcd60e51b815260040161049090612e91565b6107b881611975565b61010180546001600160a01b0319166001600160a01b0392909216919091179055565b606081518351146107fe5760405162461bcd60e51b815260040161049090612d58565b600083516001600160401b038111156108195761081961268d565b604051908082528060200260200182016040528015610842578160200160208202803683370190505b50905060005b83518110156108bc5761088d85828151811061086657610866612d8f565b602002602001015185838151811061088057610880612d8f565b6020026020010151610468565b82828151811061089f5761089f612d8f565b6020908102919091010152806108b481612dbb565b915050610848565b509392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361090c5760405162461bcd60e51b815260040161049090612df9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661093e6117d9565b6001600160a01b0316146109645760405162461bcd60e51b815260040161049090612e45565b61096d82611807565b61097982826001611831565b5050565b610985611336565b61098e8461140a565b610999335b856119eb565b81518351146109ba5760405162461bcd60e51b815260040161049090612d58565b6101005483516000906001600160401b038111156109da576109da61268d565b604051908082528060200260200182016040528015610a03578160200160208202803683370190505b50905060005b8551811015610aa757610a1d600184612ec6565b925082828281518110610a3257610a32612d8f565b602002602001018181525050610a9587838381518110610a5457610a54612d8f565b6020026020010151888481518110610a6e57610a6e612d8f565b6020026020010151888581518110610a8857610a88612d8f565b6020026020010151611a4b565b80610a9f81612dbb565b915050610a09565b506001600160a01b0386166000336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8489604051610aef929190612dd4565b60405180910390a4610b0633600088848988611646565b505050505050565b610b16611336565b610b1f82611ada565b610b29833361156e565b8051600003610b7a5760405162461bcd60e51b815260206004820152601860248201527f444443313135353a43616e206e6f7420626520656d70747900000000000000006044820152606401610490565b600082815260fd602052604090208054610b9390612d1e565b159050610be25760405162461bcd60e51b815260206004820152601b60248201527f444443313135353a616c726561647920696e697469616c697a656400000000006044820152606401610490565b600082815260fd602090815260409091208251610c01928401906124f7565b5081336001600160a01b03167f18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d083604051610c3c919061267a565b60405180910390a3505050565b6097546001600160a01b03163314610c735760405162461bcd60e51b815260040161049090612e91565b610c7d6000611b3a565b565b600054610100900460ff1680610c98575060005460ff16155b610cb45760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015610cd6576000805461ffff19166101011790555b610cde611b8c565b610ce6611beb565b610cee611c52565b8015610782576000805461ff001916905550565b610d0a611336565b610d14823361156e565b610d1e8282611cb1565b60408051828152600060208201819052916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050565b610d73611336565b610d7c8261140a565b610d8633836119eb565b6001600160a01b0382163303610de85760405162461bcd60e51b815260206004820152602160248201527f444443313135353a73657474696e6720617070726f76616c20666f722073656c6044820152603360f91b6064820152608401610490565b33600081815260fc602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610e5c611336565b610e66823361156e565b600081516001600160401b03811115610e8157610e8161268d565b604051908082528060200260200182016040528015610eaa578160200160208202803683370190505b50905060005b8251811015610eee57610edc84848381518110610ecf57610ecf612d8f565b6020026020010151611cb1565b80610ee681612dbb565b915050610eb0565b5060006001600160a01b038416336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051610f36929190612dd4565b60405180910390a4505050565b610f4b611336565b610f548461140a565b610f5d33610993565b6000610100546001610f6f9190612ec6565b9050610f7d85828686611a4b565b60408051828152602081018690526001600160a01b0387169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46106b633600087848887611d2a565b6000610fdf611e15565b506101005490565b6097546001600160a01b031633146110115760405162461bcd60e51b815260040161049090612e91565b61101a81611975565b61010280546001600160a01b0319166001600160a01b0392909216919091179055565b611045611336565b61104d611e15565b61105681611ee4565b600081815260ff60205260409020805460ff19169055336001600160a01b03167faddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f826040516110a791815260200190565b60405180910390a250565b6110ba611336565b6110c2611e15565b6110cb81611ada565b600081815260ff60205260409020805460ff191660011790556110eb3390565b6001600160a01b03167f027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36826040516110a791815260200190565b60006001600160a01b0383161580159061114757506001600160a01b03821615155b6111635760405162461bcd60e51b815260040161049090612cf0565b506001600160a01b03918216600090815260fc6020908152604080832093909416825291909152205460ff1690565b61119a611336565b6111a38561140a565b6111ac8461140a565b6111b685856114eb565b6111c0853361156e565b6111cc858585856115e0565b836001600160a01b0316856001600160a01b03166111e73390565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62868660405161122a929190918252602082015260400190565b60405180910390a46106b6338686868686611d2a565b6097546001600160a01b0316331461126a5760405162461bcd60e51b815260040161049090612e91565b6001600160a01b0381166112cf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610490565b61078281611b3a565b600081815260fe602052604090205460ff166107825760405162461bcd60e51b815260206004820152601760248201527f444443313135353a6e6f6e6578697374656e74206464630000000000000000006044820152606401610490565b610102546001600160a01b031663470cf0e0336040516001600160e01b031960e084901b811682526001600160a01b0392909216600482015230602482015260003590911660448201526064016020604051808303816000875af11580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190612f2c565b610c7d5760405162461bcd60e51b815260206004820152601560248201527422222198989a9a9d3737903832b936b4b9b9b4b7b760591b6044820152606401610490565b6001600160a01b0381166114305760405162461bcd60e51b815260040161049090612cf0565b610102546040516395c2a8d960e01b81526001600160a01b038381166004830152909116906395c2a8d990602401602060405180830381865afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f9190612f2c565b6107825760405162461bcd60e51b815260206004820152601f60248201527f444443313135353a6e6f74206120617661696c61626c65206163636f756e74006044820152606401610490565b6114f58282611f4c565b8061150557506115058282611fcc565b6109795760405162461bcd60e51b815260206004820152603460248201527f444443313135353a4f6e6c79206f6e6520706c6174666f726d206f722063726f6044820152731cdccb5c1b185d199bdc9b48185c1c1c9bdd985b60621b6064820152608401610490565b6115788282611125565b806115945750816001600160a01b0316816001600160a01b0316145b6109795760405162461bcd60e51b815260206004820152601e60248201527f444443313135353a6e6f74206f776e6572206e6f7220617070726f76656400006044820152606401610490565b6115e982611ada565b6115f4848383612007565b600082815260fb602090815260408083206001600160a01b0388811685529252808320805485810390915591861683528220805491928492611637908490612ec6565b909155506106b69050836120ae565b6001600160a01b0384163b15610b065760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061168a9089908990889088908890600401612f49565b6020604051808303816000875af19250505080156116c5575060408051601f3d908101601f191682019092526116c291810190612fa7565b60015b611770576116d1612fc4565b806308c379a00361170a57506116e5612fe0565b806116f0575061170c565b8060405162461bcd60e51b8152600401610490919061267a565b505b60405162461bcd60e51b815260206004820152603360248201527f444443313135353a7472616e7366657220746f206e6f6e20455243313135355260448201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b6064820152608401610490565b6001600160e01b0319811663bc197c8160e01b146117d05760405162461bcd60e51b815260206004820181905260248201527f444443313135353a4552433131353552656365697665722072656a65637465646044820152606401610490565b50505050505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6097546001600160a01b031633146107825760405162461bcd60e51b815260040161049090612e91565b600061183b6117d9565b90506118468461212a565b6000835111806118535750815b156118645761186284846121cf565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166106b657805460ff191660011781556040516001600160a01b03831660248201526118e390869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526121cf565b50805460ff191681556118f46117d9565b6001600160a01b0316826001600160a01b03161461196c5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610490565b6106b6856122ba565b6001600160a01b03811661199b5760405162461bcd60e51b815260040161049090612cf0565b6001600160a01b0381163b6107825760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9b9bdd08184818dbdb9d1c9858dd60521b6044820152606401610490565b6119f58282611f4c565b6109795760405162461bcd60e51b815260206004820152602160248201527f444443313135353a6f6e6c79206f6e207468652073616d6520706c6174666f726044820152606d60f81b6064820152608401610490565b611a5583836122fa565b600083815260fb602090815260408083206001600160a01b038816845290915281208054849290611a87908490612ec6565b9091555050600083815260fd602090815260409091208251611aab928401906124f7565b50600083815260fe60205260409020805460ff19166001179055610100839055611ad4836120ae565b50505050565b611ae3816112d8565b600081815260ff602081905260409091205416156107825760405162461bcd60e51b8152602060048201526014602482015273444443313135353a64697361626c65642064646360601b6044820152606401610490565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611ba5575060005460ff16155b611bc15760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015611be3576000805461ffff19166101011790555b610cee61239b565b600054610100900460ff1680611c04575060005460ff16155b611c205760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015611c42576000805461ffff19166101011790555b611c4a61239b565b610cee612405565b600054610100900460ff1680611c6b575060005460ff16155b611c875760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015611ca9576000805461ffff19166101011790555b611be361239b565b6001600160a01b038216611cd75760405162461bcd60e51b815260040161049090612cf0565b611ce0816112d8565b611cea8282612465565b600081815260fb602090815260408083206001600160a01b0386168452825280832083905583835260ff9091529020805460ff19169055610979816120ae565b6001600160a01b0384163b15610b065760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d6e9089908990889088908890600401613069565b6020604051808303816000875af1925050508015611da9575060408051601f3d908101601f19168201909252611da691810190612fa7565b60015b611db5576116d1612fc4565b6001600160e01b0319811663f23a6e6160e01b146117d05760405162461bcd60e51b815260206004820181905260248201527f444443313135353a4552433131353552656365697665722072656a65637465646044820152606401610490565b610102546001600160a01b031663ed5cad643360006040518363ffffffff1660e01b8152600401611e479291906130ae565b602060405180830381865afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e889190612f2c565b610c7d5760405162461bcd60e51b815260206004820152602760248201527f444443313135353a6e6f742061206f70657261746f7220726f6c65206f7220646044820152661a5cd8589b195960ca1b6064820152608401610490565b611eed816112d8565b600081815260ff6020819052604090912054166107825760405162461bcd60e51b815260206004820152601860248201527f444443313135353a6e6f6e2d64697361626c65642064646300000000000000006044820152606401610490565b61010254604051633a723d1760e01b81526001600160a01b03848116600483015283811660248301526000921690633a723d17906044015b602060405180830381865afa158015611fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc59190612f2c565b9392505050565b6101025460405162c21e5560e11b81526001600160a01b038481166004830152838116602483015260009216906301843caa90604401611f84565b600081116120505760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b6044820152606401610490565b8061205b8484610468565b10156120a95760405162461bcd60e51b815260206004820152601c60248201527f444443313135353a696e73756666696369656e742062616c616e6365000000006044820152606401610490565b505050565b610101546001600160a01b031663ef18e3c9336040516001600160e01b031960e084901b811682526001600160a01b03929092166004820152600035909116602482015260448101849052606401600060405180830381600087803b15801561211657600080fd5b505af11580156106b6573d6000803e3d6000fd5b803b61218e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610490565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61222e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610490565b600080846001600160a01b03168460405161224991906130e9565b600060405180830381855af49150503d8060008114612284576040519150601f19603f3d011682016040523d82523d6000602084013e612289565b606091505b50915091506122b18282604051806060016040528060278152602001613106602791396124be565b95945050505050565b6122c38161212a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600081116123435760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b6044820152606401610490565b600082815260fe602052604090205460ff16156109795760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e985b1c9958591e481b5a5b9d195960521b6044820152606401610490565b600054610100900460ff16806123b4575060005460ff16155b6123d05760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff16158015610cee576000805461ffff19166101011790558015610782576000805461ff001916905550565b600054610100900460ff168061241e575060005460ff16155b61243a5760405162461bcd60e51b815260040161049090612ede565b600054610100900460ff1615801561245c576000805461ffff19166101011790555b610cee33611b3a565b60006124718383610468565b116109795760405162461bcd60e51b815260206004820152601c60248201527f444443313135353a696e73756666696369656e742062616c616e6365000000006044820152606401610490565b606083156124cd575081611fc5565b8251156124dd5782518084602001fd5b8160405162461bcd60e51b8152600401610490919061267a565b82805461250390612d1e565b90600052602060002090601f016020900481019282612525576000855561256b565b82601f1061253e57805160ff191683800117855561256b565b8280016001018555821561256b579182015b8281111561256b578251825591602001919060010190612550565b5061257792915061257b565b5090565b5b80821115612577576000815560010161257c565b80356001600160a01b03811681146125a757600080fd5b919050565b600080604083850312156125bf57600080fd5b6125c883612590565b946020939093013593505050565b6001600160e01b03198116811461078257600080fd5b6000602082840312156125fe57600080fd5b8135611fc5816125d6565b60006020828403121561261b57600080fd5b5035919050565b60005b8381101561263d578181015183820152602001612625565b83811115611ad45750506000910152565b60008151808452612666816020860160208601612622565b601f01601f19169290920160200192915050565b602081526000611fc5602083018461264e565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156126c8576126c861268d565b6040525050565b60006001600160401b038211156126e8576126e861268d565b5060051b60200190565b600082601f83011261270357600080fd5b81356020612710826126cf565b60405161271d82826126a3565b83815260059390931b850182019282810191508684111561273d57600080fd5b8286015b848110156127585780358352918301918301612741565b509695505050505050565b600082601f83011261277457600080fd5b81356001600160401b0381111561278d5761278d61268d565b6040516127a4601f8301601f1916602001826126a3565b8181528460208386010111156127b957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156127ee57600080fd5b6127f786612590565b945061280560208701612590565b935060408601356001600160401b038082111561282157600080fd5b61282d89838a016126f2565b9450606088013591508082111561284357600080fd5b61284f89838a016126f2565b9350608088013591508082111561286557600080fd5b5061287288828901612763565b9150509295509295909350565b60006020828403121561289157600080fd5b611fc582612590565b600080604083850312156128ad57600080fd5b82356001600160401b03808211156128c457600080fd5b818501915085601f8301126128d857600080fd5b813560206128e5826126cf565b6040516128f282826126a3565b83815260059390931b850182019282810191508984111561291257600080fd5b948201945b838610156129375761292886612590565b82529482019490820190612917565b9650508601359250508082111561294d57600080fd5b5061295a858286016126f2565b9150509250929050565b600081518084526020808501945080840160005b8381101561299457815187529582019590820190600101612978565b509495945050505050565b602081526000611fc56020830184612964565b600080604083850312156129c557600080fd5b6129ce83612590565b915060208301356001600160401b038111156129e957600080fd5b61295a85828601612763565b60008060008060808587031215612a0b57600080fd5b612a1485612590565b93506020808601356001600160401b0380821115612a3157600080fd5b612a3d89838a016126f2565b95506040880135915080821115612a5357600080fd5b818801915088601f830112612a6757600080fd5b8135612a72816126cf565b604051612a7f82826126a3565b82815260059290921b840185019185810191508b831115612a9f57600080fd5b8585015b83811015612ad757803585811115612abb5760008081fd5b612ac98e89838a0101612763565b845250918601918601612aa3565b50965050506060880135925080831115612af057600080fd5b5050612afe87828801612763565b91505092959194509250565b600080600060608486031215612b1f57600080fd5b612b2884612590565b92506020840135915060408401356001600160401b03811115612b4a57600080fd5b612b5686828701612763565b9150509250925092565b801515811461078257600080fd5b60008060408385031215612b8157600080fd5b612b8a83612590565b91506020830135612b9a81612b60565b809150509250929050565b60008060408385031215612bb857600080fd5b612bc183612590565b915060208301356001600160401b03811115612bdc57600080fd5b61295a858286016126f2565b60008060008060808587031215612bfe57600080fd5b612c0785612590565b93506020850135925060408501356001600160401b0380821115612c2a57600080fd5b612c3688838901612763565b93506060870135915080821115612c4c57600080fd5b50612afe87828801612763565b60008060408385031215612c6c57600080fd5b612c7583612590565b9150612c8360208401612590565b90509250929050565b600080600080600060a08688031215612ca457600080fd5b612cad86612590565b9450612cbb60208701612590565b9350604086013592506060860135915060808601356001600160401b03811115612ce457600080fd5b61287288828901612763565b602080825260149082015273444443313135353a7a65726f206164647265737360601b604082015260600190565b600181811c90821680612d3257607f821691505b602082108103612d5257634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526017908201527f444443313135353a6c656e677468206d69736d61746368000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612dcd57612dcd612da5565b5060010190565b604081526000612de76040830185612964565b82810360208401526122b18185612964565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115612ed957612ed9612da5565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215612f3e57600080fd5b8151611fc581612b60565b6001600160a01b0386811682528516602082015260a060408201819052600090612f7590830186612964565b8281036060840152612f878186612964565b90508281036080840152612f9b818561264e565b98975050505050505050565b600060208284031215612fb957600080fd5b8151611fc5816125d6565b600060033d1115612fdd5760046000803e5060005160e01c5b90565b600060443d1015612fee5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561301d57505050505090565b82850191508151818111156130355750505050505090565b843d870101602082850101111561304f5750505050505090565b61305e602082860101876126a3565b509095945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906130a39083018461264e565b979650505050505050565b6001600160a01b038316815260408101600383106130dc57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600082516130fb818460208701612622565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202149a634a38c2b29b3a4ae8c5a8fdca2040c2f44e779bbc3130814e3db0888af64736f6c634300080d0033",
}

// DDC1155ABI is the input ABI used to generate the binding from.
// Deprecated: Use DDC1155MetaData.ABI instead.
var DDC1155ABI = DDC1155MetaData.ABI

// DDC1155Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DDC1155MetaData.Bin instead.
var DDC1155Bin = DDC1155MetaData.Bin

// DeployDDC1155 deploys a new Ethereum contract, binding an instance of DDC1155 to it.
func DeployDDC1155(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DDC1155, error) {
	parsed, err := DDC1155MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DDC1155Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DDC1155{DDC1155Caller: DDC1155Caller{contract: contract}, DDC1155Transactor: DDC1155Transactor{contract: contract}, DDC1155Filterer: DDC1155Filterer{contract: contract}}, nil
}

// DDC1155 is an auto generated Go binding around an Ethereum contract.
type DDC1155 struct {
	DDC1155Caller     // Read-only binding to the contract
	DDC1155Transactor // Write-only binding to the contract
	DDC1155Filterer   // Log filterer for contract events
}

// DDC1155Caller is an auto generated read-only Go binding around an Ethereum contract.
type DDC1155Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DDC1155Transactor is an auto generated write-only Go binding around an Ethereum contract.
type DDC1155Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DDC1155Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DDC1155Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DDC1155Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DDC1155Session struct {
	Contract     *DDC1155          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DDC1155CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DDC1155CallerSession struct {
	Contract *DDC1155Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DDC1155TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DDC1155TransactorSession struct {
	Contract     *DDC1155Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DDC1155Raw is an auto generated low-level Go binding around an Ethereum contract.
type DDC1155Raw struct {
	Contract *DDC1155 // Generic contract binding to access the raw methods on
}

// DDC1155CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DDC1155CallerRaw struct {
	Contract *DDC1155Caller // Generic read-only contract binding to access the raw methods on
}

// DDC1155TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DDC1155TransactorRaw struct {
	Contract *DDC1155Transactor // Generic write-only contract binding to access the raw methods on
}

// NewDDC1155 creates a new instance of DDC1155, bound to a specific deployed contract.
func NewDDC1155(address common.Address, backend bind.ContractBackend) (*DDC1155, error) {
	contract, err := bindDDC1155(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DDC1155{DDC1155Caller: DDC1155Caller{contract: contract}, DDC1155Transactor: DDC1155Transactor{contract: contract}, DDC1155Filterer: DDC1155Filterer{contract: contract}}, nil
}

// NewDDC1155Caller creates a new read-only instance of DDC1155, bound to a specific deployed contract.
func NewDDC1155Caller(address common.Address, caller bind.ContractCaller) (*DDC1155Caller, error) {
	contract, err := bindDDC1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DDC1155Caller{contract: contract}, nil
}

// NewDDC1155Transactor creates a new write-only instance of DDC1155, bound to a specific deployed contract.
func NewDDC1155Transactor(address common.Address, transactor bind.ContractTransactor) (*DDC1155Transactor, error) {
	contract, err := bindDDC1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DDC1155Transactor{contract: contract}, nil
}

// NewDDC1155Filterer creates a new log filterer instance of DDC1155, bound to a specific deployed contract.
func NewDDC1155Filterer(address common.Address, filterer bind.ContractFilterer) (*DDC1155Filterer, error) {
	contract, err := bindDDC1155(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DDC1155Filterer{contract: contract}, nil
}

// bindDDC1155 binds a generic wrapper to an already deployed contract.
func bindDDC1155(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DDC1155ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DDC1155 *DDC1155Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DDC1155.Contract.DDC1155Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DDC1155 *DDC1155Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC1155.Contract.DDC1155Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DDC1155 *DDC1155Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DDC1155.Contract.DDC1155Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DDC1155 *DDC1155CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DDC1155.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DDC1155 *DDC1155TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC1155.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DDC1155 *DDC1155TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DDC1155.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address owner, uint256 ddcId) view returns(uint256 balance)
func (_DDC1155 *DDC1155Caller) BalanceOf(opts *bind.CallOpts, owner common.Address, ddcId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DDC1155.contract.Call(opts, &out, "balanceOf", owner, ddcId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address owner, uint256 ddcId) view returns(uint256 balance)
func (_DDC1155 *DDC1155Session) BalanceOf(owner common.Address, ddcId *big.Int) (*big.Int, error) {
	return _DDC1155.Contract.BalanceOf(&_DDC1155.CallOpts, owner, ddcId)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address owner, uint256 ddcId) view returns(uint256 balance)
func (_DDC1155 *DDC1155CallerSession) BalanceOf(owner common.Address, ddcId *big.Int) (*big.Int, error) {
	return _DDC1155.Contract.BalanceOf(&_DDC1155.CallOpts, owner, ddcId)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] owners, uint256[] ddcIds) view returns(uint256[])
func (_DDC1155 *DDC1155Caller) BalanceOfBatch(opts *bind.CallOpts, owners []common.Address, ddcIds []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _DDC1155.contract.Call(opts, &out, "balanceOfBatch", owners, ddcIds)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] owners, uint256[] ddcIds) view returns(uint256[])
func (_DDC1155 *DDC1155Session) BalanceOfBatch(owners []common.Address, ddcIds []*big.Int) ([]*big.Int, error) {
	return _DDC1155.Contract.BalanceOfBatch(&_DDC1155.CallOpts, owners, ddcIds)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] owners, uint256[] ddcIds) view returns(uint256[])
func (_DDC1155 *DDC1155CallerSession) BalanceOfBatch(owners []common.Address, ddcIds []*big.Int) ([]*big.Int, error) {
	return _DDC1155.Contract.BalanceOfBatch(&_DDC1155.CallOpts, owners, ddcIds)
}

// DdcURI is a free data retrieval call binding the contract method 0x293ec97c.
//
// Solidity: function ddcURI(uint256 ddcId) view returns(string)
func (_DDC1155 *DDC1155Caller) DdcURI(opts *bind.CallOpts, ddcId *big.Int) (string, error) {
	var out []interface{}
	err := _DDC1155.contract.Call(opts, &out, "ddcURI", ddcId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// DdcURI is a free data retrieval call binding the contract method 0x293ec97c.
//
// Solidity: function ddcURI(uint256 ddcId) view returns(string)
func (_DDC1155 *DDC1155Session) DdcURI(ddcId *big.Int) (string, error) {
	return _DDC1155.Contract.DdcURI(&_DDC1155.CallOpts, ddcId)
}

// DdcURI is a free data retrieval call binding the contract method 0x293ec97c.
//
// Solidity: function ddcURI(uint256 ddcId) view returns(string)
func (_DDC1155 *DDC1155CallerSession) DdcURI(ddcId *big.Int) (string, error) {
	return _DDC1155.Contract.DdcURI(&_DDC1155.CallOpts, ddcId)
}

// GetLatestDDCId is a free data retrieval call binding the contract method 0xb9f7fad9.
//
// Solidity: function getLatestDDCId() view returns(uint256)
func (_DDC1155 *DDC1155Caller) GetLatestDDCId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DDC1155.contract.Call(opts, &out, "getLatestDDCId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLatestDDCId is a free data retrieval call binding the contract method 0xb9f7fad9.
//
// Solidity: function getLatestDDCId() view returns(uint256)
func (_DDC1155 *DDC1155Session) GetLatestDDCId() (*big.Int, error) {
	return _DDC1155.Contract.GetLatestDDCId(&_DDC1155.CallOpts)
}

// GetLatestDDCId is a free data retrieval call binding the contract method 0xb9f7fad9.
//
// Solidity: function getLatestDDCId() view returns(uint256)
func (_DDC1155 *DDC1155CallerSession) GetLatestDDCId() (*big.Int, error) {
	return _DDC1155.Contract.GetLatestDDCId(&_DDC1155.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DDC1155 *DDC1155Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _DDC1155.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DDC1155 *DDC1155Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DDC1155.Contract.IsApprovedForAll(&_DDC1155.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DDC1155 *DDC1155CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DDC1155.Contract.IsApprovedForAll(&_DDC1155.CallOpts, owner, operator)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DDC1155 *DDC1155Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DDC1155.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DDC1155 *DDC1155Session) Owner() (common.Address, error) {
	return _DDC1155.Contract.Owner(&_DDC1155.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DDC1155 *DDC1155CallerSession) Owner() (common.Address, error) {
	return _DDC1155.Contract.Owner(&_DDC1155.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DDC1155 *DDC1155Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DDC1155.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DDC1155 *DDC1155Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DDC1155.Contract.SupportsInterface(&_DDC1155.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DDC1155 *DDC1155CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DDC1155.Contract.SupportsInterface(&_DDC1155.CallOpts, interfaceId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address owner, uint256 ddcId) returns()
func (_DDC1155 *DDC1155Transactor) Burn(opts *bind.TransactOpts, owner common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "burn", owner, ddcId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address owner, uint256 ddcId) returns()
func (_DDC1155 *DDC1155Session) Burn(owner common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC1155.Contract.Burn(&_DDC1155.TransactOpts, owner, ddcId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address owner, uint256 ddcId) returns()
func (_DDC1155 *DDC1155TransactorSession) Burn(owner common.Address, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC1155.Contract.Burn(&_DDC1155.TransactOpts, owner, ddcId)
}

// BurnBatch is a paid mutator transaction binding the contract method 0xb2dc5dc3.
//
// Solidity: function burnBatch(address owner, uint256[] ddcIds) returns()
func (_DDC1155 *DDC1155Transactor) BurnBatch(opts *bind.TransactOpts, owner common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "burnBatch", owner, ddcIds)
}

// BurnBatch is a paid mutator transaction binding the contract method 0xb2dc5dc3.
//
// Solidity: function burnBatch(address owner, uint256[] ddcIds) returns()
func (_DDC1155 *DDC1155Session) BurnBatch(owner common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC1155.Contract.BurnBatch(&_DDC1155.TransactOpts, owner, ddcIds)
}

// BurnBatch is a paid mutator transaction binding the contract method 0xb2dc5dc3.
//
// Solidity: function burnBatch(address owner, uint256[] ddcIds) returns()
func (_DDC1155 *DDC1155TransactorSession) BurnBatch(owner common.Address, ddcIds []*big.Int) (*types.Transaction, error) {
	return _DDC1155.Contract.BurnBatch(&_DDC1155.TransactOpts, owner, ddcIds)
}

// Freeze is a paid mutator transaction binding the contract method 0xd7a78db8.
//
// Solidity: function freeze(uint256 ddcId) returns()
func (_DDC1155 *DDC1155Transactor) Freeze(opts *bind.TransactOpts, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "freeze", ddcId)
}

// Freeze is a paid mutator transaction binding the contract method 0xd7a78db8.
//
// Solidity: function freeze(uint256 ddcId) returns()
func (_DDC1155 *DDC1155Session) Freeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC1155.Contract.Freeze(&_DDC1155.TransactOpts, ddcId)
}

// Freeze is a paid mutator transaction binding the contract method 0xd7a78db8.
//
// Solidity: function freeze(uint256 ddcId) returns()
func (_DDC1155 *DDC1155TransactorSession) Freeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC1155.Contract.Freeze(&_DDC1155.TransactOpts, ddcId)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DDC1155 *DDC1155Transactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DDC1155 *DDC1155Session) Initialize() (*types.Transaction, error) {
	return _DDC1155.Contract.Initialize(&_DDC1155.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DDC1155 *DDC1155TransactorSession) Initialize() (*types.Transaction, error) {
	return _DDC1155.Contract.Initialize(&_DDC1155.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_DDC1155 *DDC1155Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_DDC1155 *DDC1155Session) RenounceOwnership() (*types.Transaction, error) {
	return _DDC1155.Contract.RenounceOwnership(&_DDC1155.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_DDC1155 *DDC1155TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _DDC1155.Contract.RenounceOwnership(&_DDC1155.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ddcIds, uint256[] amounts, bytes data) returns()
func (_DDC1155 *DDC1155Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ddcIds []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "safeBatchTransferFrom", from, to, ddcIds, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ddcIds, uint256[] amounts, bytes data) returns()
func (_DDC1155 *DDC1155Session) SafeBatchTransferFrom(from common.Address, to common.Address, ddcIds []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.SafeBatchTransferFrom(&_DDC1155.TransactOpts, from, to, ddcIds, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ddcIds, uint256[] amounts, bytes data) returns()
func (_DDC1155 *DDC1155TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ddcIds []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.SafeBatchTransferFrom(&_DDC1155.TransactOpts, from, to, ddcIds, amounts, data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xb55bc617.
//
// Solidity: function safeMint(address to, uint256 amount, string _ddcURI, bytes data) returns()
func (_DDC1155 *DDC1155Transactor) SafeMint(opts *bind.TransactOpts, to common.Address, amount *big.Int, _ddcURI string, data []byte) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "safeMint", to, amount, _ddcURI, data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xb55bc617.
//
// Solidity: function safeMint(address to, uint256 amount, string _ddcURI, bytes data) returns()
func (_DDC1155 *DDC1155Session) SafeMint(to common.Address, amount *big.Int, _ddcURI string, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.SafeMint(&_DDC1155.TransactOpts, to, amount, _ddcURI, data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xb55bc617.
//
// Solidity: function safeMint(address to, uint256 amount, string _ddcURI, bytes data) returns()
func (_DDC1155 *DDC1155TransactorSession) SafeMint(to common.Address, amount *big.Int, _ddcURI string, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.SafeMint(&_DDC1155.TransactOpts, to, amount, _ddcURI, data)
}

// SafeMintBatch is a paid mutator transaction binding the contract method 0x63570355.
//
// Solidity: function safeMintBatch(address to, uint256[] amounts, string[] ddcURIs, bytes data) returns()
func (_DDC1155 *DDC1155Transactor) SafeMintBatch(opts *bind.TransactOpts, to common.Address, amounts []*big.Int, ddcURIs []string, data []byte) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "safeMintBatch", to, amounts, ddcURIs, data)
}

// SafeMintBatch is a paid mutator transaction binding the contract method 0x63570355.
//
// Solidity: function safeMintBatch(address to, uint256[] amounts, string[] ddcURIs, bytes data) returns()
func (_DDC1155 *DDC1155Session) SafeMintBatch(to common.Address, amounts []*big.Int, ddcURIs []string, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.SafeMintBatch(&_DDC1155.TransactOpts, to, amounts, ddcURIs, data)
}

// SafeMintBatch is a paid mutator transaction binding the contract method 0x63570355.
//
// Solidity: function safeMintBatch(address to, uint256[] amounts, string[] ddcURIs, bytes data) returns()
func (_DDC1155 *DDC1155TransactorSession) SafeMintBatch(to common.Address, amounts []*big.Int, ddcURIs []string, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.SafeMintBatch(&_DDC1155.TransactOpts, to, amounts, ddcURIs, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 ddcId, uint256 amount, bytes data) returns()
func (_DDC1155 *DDC1155Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ddcId *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "safeTransferFrom", from, to, ddcId, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 ddcId, uint256 amount, bytes data) returns()
func (_DDC1155 *DDC1155Session) SafeTransferFrom(from common.Address, to common.Address, ddcId *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.SafeTransferFrom(&_DDC1155.TransactOpts, from, to, ddcId, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 ddcId, uint256 amount, bytes data) returns()
func (_DDC1155 *DDC1155TransactorSession) SafeTransferFrom(from common.Address, to common.Address, ddcId *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.SafeTransferFrom(&_DDC1155.TransactOpts, from, to, ddcId, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DDC1155 *DDC1155Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DDC1155 *DDC1155Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DDC1155.Contract.SetApprovalForAll(&_DDC1155.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DDC1155 *DDC1155TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DDC1155.Contract.SetApprovalForAll(&_DDC1155.TransactOpts, operator, approved)
}

// SetAuthorityProxyAddress is a paid mutator transaction binding the contract method 0xc5837d82.
//
// Solidity: function setAuthorityProxyAddress(address authorityProxyAddress) returns()
func (_DDC1155 *DDC1155Transactor) SetAuthorityProxyAddress(opts *bind.TransactOpts, authorityProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "setAuthorityProxyAddress", authorityProxyAddress)
}

// SetAuthorityProxyAddress is a paid mutator transaction binding the contract method 0xc5837d82.
//
// Solidity: function setAuthorityProxyAddress(address authorityProxyAddress) returns()
func (_DDC1155 *DDC1155Session) SetAuthorityProxyAddress(authorityProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC1155.Contract.SetAuthorityProxyAddress(&_DDC1155.TransactOpts, authorityProxyAddress)
}

// SetAuthorityProxyAddress is a paid mutator transaction binding the contract method 0xc5837d82.
//
// Solidity: function setAuthorityProxyAddress(address authorityProxyAddress) returns()
func (_DDC1155 *DDC1155TransactorSession) SetAuthorityProxyAddress(authorityProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC1155.Contract.SetAuthorityProxyAddress(&_DDC1155.TransactOpts, authorityProxyAddress)
}

// SetChargeProxyAddress is a paid mutator transaction binding the contract method 0x44d891df.
//
// Solidity: function setChargeProxyAddress(address chargeProxyAddress) returns()
func (_DDC1155 *DDC1155Transactor) SetChargeProxyAddress(opts *bind.TransactOpts, chargeProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "setChargeProxyAddress", chargeProxyAddress)
}

// SetChargeProxyAddress is a paid mutator transaction binding the contract method 0x44d891df.
//
// Solidity: function setChargeProxyAddress(address chargeProxyAddress) returns()
func (_DDC1155 *DDC1155Session) SetChargeProxyAddress(chargeProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC1155.Contract.SetChargeProxyAddress(&_DDC1155.TransactOpts, chargeProxyAddress)
}

// SetChargeProxyAddress is a paid mutator transaction binding the contract method 0x44d891df.
//
// Solidity: function setChargeProxyAddress(address chargeProxyAddress) returns()
func (_DDC1155 *DDC1155TransactorSession) SetChargeProxyAddress(chargeProxyAddress common.Address) (*types.Transaction, error) {
	return _DDC1155.Contract.SetChargeProxyAddress(&_DDC1155.TransactOpts, chargeProxyAddress)
}

// SetURI is a paid mutator transaction binding the contract method 0x685e8247.
//
// Solidity: function setURI(address owner, uint256 ddcId, string ddcURI_) returns()
func (_DDC1155 *DDC1155Transactor) SetURI(opts *bind.TransactOpts, owner common.Address, ddcId *big.Int, ddcURI_ string) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "setURI", owner, ddcId, ddcURI_)
}

// SetURI is a paid mutator transaction binding the contract method 0x685e8247.
//
// Solidity: function setURI(address owner, uint256 ddcId, string ddcURI_) returns()
func (_DDC1155 *DDC1155Session) SetURI(owner common.Address, ddcId *big.Int, ddcURI_ string) (*types.Transaction, error) {
	return _DDC1155.Contract.SetURI(&_DDC1155.TransactOpts, owner, ddcId, ddcURI_)
}

// SetURI is a paid mutator transaction binding the contract method 0x685e8247.
//
// Solidity: function setURI(address owner, uint256 ddcId, string ddcURI_) returns()
func (_DDC1155 *DDC1155TransactorSession) SetURI(owner common.Address, ddcId *big.Int, ddcURI_ string) (*types.Transaction, error) {
	return _DDC1155.Contract.SetURI(&_DDC1155.TransactOpts, owner, ddcId, ddcURI_)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_DDC1155 *DDC1155Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_DDC1155 *DDC1155Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _DDC1155.Contract.TransferOwnership(&_DDC1155.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_DDC1155 *DDC1155TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _DDC1155.Contract.TransferOwnership(&_DDC1155.TransactOpts, newOwner)
}

// UnFreeze is a paid mutator transaction binding the contract method 0xd302b0dc.
//
// Solidity: function unFreeze(uint256 ddcId) returns()
func (_DDC1155 *DDC1155Transactor) UnFreeze(opts *bind.TransactOpts, ddcId *big.Int) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "unFreeze", ddcId)
}

// UnFreeze is a paid mutator transaction binding the contract method 0xd302b0dc.
//
// Solidity: function unFreeze(uint256 ddcId) returns()
func (_DDC1155 *DDC1155Session) UnFreeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC1155.Contract.UnFreeze(&_DDC1155.TransactOpts, ddcId)
}

// UnFreeze is a paid mutator transaction binding the contract method 0xd302b0dc.
//
// Solidity: function unFreeze(uint256 ddcId) returns()
func (_DDC1155 *DDC1155TransactorSession) UnFreeze(ddcId *big.Int) (*types.Transaction, error) {
	return _DDC1155.Contract.UnFreeze(&_DDC1155.TransactOpts, ddcId)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_DDC1155 *DDC1155Transactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_DDC1155 *DDC1155Session) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _DDC1155.Contract.UpgradeTo(&_DDC1155.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_DDC1155 *DDC1155TransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _DDC1155.Contract.UpgradeTo(&_DDC1155.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DDC1155 *DDC1155Transactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DDC1155.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DDC1155 *DDC1155Session) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.UpgradeToAndCall(&_DDC1155.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DDC1155 *DDC1155TransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DDC1155.Contract.UpgradeToAndCall(&_DDC1155.TransactOpts, newImplementation, data)
}

// DDC1155AdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the DDC1155 contract.
type DDC1155AdminChangedIterator struct {
	Event *DDC1155AdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155AdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155AdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155AdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155AdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155AdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155AdminChanged represents a AdminChanged event raised by the DDC1155 contract.
type DDC1155AdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_DDC1155 *DDC1155Filterer) FilterAdminChanged(opts *bind.FilterOpts) (*DDC1155AdminChangedIterator, error) {

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &DDC1155AdminChangedIterator{contract: _DDC1155.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_DDC1155 *DDC1155Filterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *DDC1155AdminChanged) (event.Subscription, error) {

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155AdminChanged)
				if err := _DDC1155.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_DDC1155 *DDC1155Filterer) ParseAdminChanged(log types.Log) (*DDC1155AdminChanged, error) {
	event := new(DDC1155AdminChanged)
	if err := _DDC1155.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC1155ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the DDC1155 contract.
type DDC1155ApprovalForAllIterator struct {
	Event *DDC1155ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155ApprovalForAll represents a ApprovalForAll event raised by the DDC1155 contract.
type DDC1155ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DDC1155 *DDC1155Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*DDC1155ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &DDC1155ApprovalForAllIterator{contract: _DDC1155.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DDC1155 *DDC1155Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *DDC1155ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155ApprovalForAll)
				if err := _DDC1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DDC1155 *DDC1155Filterer) ParseApprovalForAll(log types.Log) (*DDC1155ApprovalForAll, error) {
	event := new(DDC1155ApprovalForAll)
	if err := _DDC1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC1155BeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the DDC1155 contract.
type DDC1155BeaconUpgradedIterator struct {
	Event *DDC1155BeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155BeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155BeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155BeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155BeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155BeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155BeaconUpgraded represents a BeaconUpgraded event raised by the DDC1155 contract.
type DDC1155BeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_DDC1155 *DDC1155Filterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*DDC1155BeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &DDC1155BeaconUpgradedIterator{contract: _DDC1155.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_DDC1155 *DDC1155Filterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *DDC1155BeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155BeaconUpgraded)
				if err := _DDC1155.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_DDC1155 *DDC1155Filterer) ParseBeaconUpgraded(log types.Log) (*DDC1155BeaconUpgraded, error) {
	event := new(DDC1155BeaconUpgraded)
	if err := _DDC1155.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC1155EnterBlacklistIterator is returned from FilterEnterBlacklist and is used to iterate over the raw logs and unpacked data for EnterBlacklist events raised by the DDC1155 contract.
type DDC1155EnterBlacklistIterator struct {
	Event *DDC1155EnterBlacklist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155EnterBlacklistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155EnterBlacklist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155EnterBlacklist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155EnterBlacklistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155EnterBlacklistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155EnterBlacklist represents a EnterBlacklist event raised by the DDC1155 contract.
type DDC1155EnterBlacklist struct {
	Sender common.Address
	DdcId  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEnterBlacklist is a free log retrieval operation binding the contract event 0x027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36.
//
// Solidity: event EnterBlacklist(address indexed sender, uint256 ddcId)
func (_DDC1155 *DDC1155Filterer) FilterEnterBlacklist(opts *bind.FilterOpts, sender []common.Address) (*DDC1155EnterBlacklistIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "EnterBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return &DDC1155EnterBlacklistIterator{contract: _DDC1155.contract, event: "EnterBlacklist", logs: logs, sub: sub}, nil
}

// WatchEnterBlacklist is a free log subscription operation binding the contract event 0x027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36.
//
// Solidity: event EnterBlacklist(address indexed sender, uint256 ddcId)
func (_DDC1155 *DDC1155Filterer) WatchEnterBlacklist(opts *bind.WatchOpts, sink chan<- *DDC1155EnterBlacklist, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "EnterBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155EnterBlacklist)
				if err := _DDC1155.contract.UnpackLog(event, "EnterBlacklist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnterBlacklist is a log parse operation binding the contract event 0x027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a36.
//
// Solidity: event EnterBlacklist(address indexed sender, uint256 ddcId)
func (_DDC1155 *DDC1155Filterer) ParseEnterBlacklist(log types.Log) (*DDC1155EnterBlacklist, error) {
	event := new(DDC1155EnterBlacklist)
	if err := _DDC1155.contract.UnpackLog(event, "EnterBlacklist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC1155ExitBlacklistIterator is returned from FilterExitBlacklist and is used to iterate over the raw logs and unpacked data for ExitBlacklist events raised by the DDC1155 contract.
type DDC1155ExitBlacklistIterator struct {
	Event *DDC1155ExitBlacklist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155ExitBlacklistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155ExitBlacklist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155ExitBlacklist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155ExitBlacklistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155ExitBlacklistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155ExitBlacklist represents a ExitBlacklist event raised by the DDC1155 contract.
type DDC1155ExitBlacklist struct {
	Sender common.Address
	DdcId  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExitBlacklist is a free log retrieval operation binding the contract event 0xaddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f.
//
// Solidity: event ExitBlacklist(address indexed sender, uint256 ddcId)
func (_DDC1155 *DDC1155Filterer) FilterExitBlacklist(opts *bind.FilterOpts, sender []common.Address) (*DDC1155ExitBlacklistIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "ExitBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return &DDC1155ExitBlacklistIterator{contract: _DDC1155.contract, event: "ExitBlacklist", logs: logs, sub: sub}, nil
}

// WatchExitBlacklist is a free log subscription operation binding the contract event 0xaddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f.
//
// Solidity: event ExitBlacklist(address indexed sender, uint256 ddcId)
func (_DDC1155 *DDC1155Filterer) WatchExitBlacklist(opts *bind.WatchOpts, sink chan<- *DDC1155ExitBlacklist, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "ExitBlacklist", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155ExitBlacklist)
				if err := _DDC1155.contract.UnpackLog(event, "ExitBlacklist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExitBlacklist is a log parse operation binding the contract event 0xaddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f.
//
// Solidity: event ExitBlacklist(address indexed sender, uint256 ddcId)
func (_DDC1155 *DDC1155Filterer) ParseExitBlacklist(log types.Log) (*DDC1155ExitBlacklist, error) {
	event := new(DDC1155ExitBlacklist)
	if err := _DDC1155.contract.UnpackLog(event, "ExitBlacklist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC1155OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the DDC1155 contract.
type DDC1155OwnershipTransferredIterator struct {
	Event *DDC1155OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155OwnershipTransferred represents a OwnershipTransferred event raised by the DDC1155 contract.
type DDC1155OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_DDC1155 *DDC1155Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*DDC1155OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &DDC1155OwnershipTransferredIterator{contract: _DDC1155.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_DDC1155 *DDC1155Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *DDC1155OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155OwnershipTransferred)
				if err := _DDC1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_DDC1155 *DDC1155Filterer) ParseOwnershipTransferred(log types.Log) (*DDC1155OwnershipTransferred, error) {
	event := new(DDC1155OwnershipTransferred)
	if err := _DDC1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC1155SetURIIterator is returned from FilterSetURI and is used to iterate over the raw logs and unpacked data for SetURI events raised by the DDC1155 contract.
type DDC1155SetURIIterator struct {
	Event *DDC1155SetURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155SetURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155SetURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155SetURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155SetURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155SetURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155SetURI represents a SetURI event raised by the DDC1155 contract.
type DDC1155SetURI struct {
	Operator common.Address
	DdcId    *big.Int
	DdcURI   string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetURI is a free log retrieval operation binding the contract event 0x18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d0.
//
// Solidity: event SetURI(address indexed operator, uint256 indexed ddcId, string ddcURI)
func (_DDC1155 *DDC1155Filterer) FilterSetURI(opts *bind.FilterOpts, operator []common.Address, ddcId []*big.Int) (*DDC1155SetURIIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "SetURI", operatorRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return &DDC1155SetURIIterator{contract: _DDC1155.contract, event: "SetURI", logs: logs, sub: sub}, nil
}

// WatchSetURI is a free log subscription operation binding the contract event 0x18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d0.
//
// Solidity: event SetURI(address indexed operator, uint256 indexed ddcId, string ddcURI)
func (_DDC1155 *DDC1155Filterer) WatchSetURI(opts *bind.WatchOpts, sink chan<- *DDC1155SetURI, operator []common.Address, ddcId []*big.Int) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var ddcIdRule []interface{}
	for _, ddcIdItem := range ddcId {
		ddcIdRule = append(ddcIdRule, ddcIdItem)
	}

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "SetURI", operatorRule, ddcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155SetURI)
				if err := _DDC1155.contract.UnpackLog(event, "SetURI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetURI is a log parse operation binding the contract event 0x18b2fb8956ecf53cec11b3995e3fff9d000f3a56efec2d7cad9e35b09e7aa4d0.
//
// Solidity: event SetURI(address indexed operator, uint256 indexed ddcId, string ddcURI)
func (_DDC1155 *DDC1155Filterer) ParseSetURI(log types.Log) (*DDC1155SetURI, error) {
	event := new(DDC1155SetURI)
	if err := _DDC1155.contract.UnpackLog(event, "SetURI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC1155TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the DDC1155 contract.
type DDC1155TransferBatchIterator struct {
	Event *DDC1155TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155TransferBatch represents a TransferBatch event raised by the DDC1155 contract.
type DDC1155TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	DdcIds   []*big.Int
	Amounts  []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ddcIds, uint256[] amounts)
func (_DDC1155 *DDC1155Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*DDC1155TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DDC1155TransferBatchIterator{contract: _DDC1155.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ddcIds, uint256[] amounts)
func (_DDC1155 *DDC1155Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *DDC1155TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155TransferBatch)
				if err := _DDC1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ddcIds, uint256[] amounts)
func (_DDC1155 *DDC1155Filterer) ParseTransferBatch(log types.Log) (*DDC1155TransferBatch, error) {
	event := new(DDC1155TransferBatch)
	if err := _DDC1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC1155TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the DDC1155 contract.
type DDC1155TransferSingleIterator struct {
	Event *DDC1155TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155TransferSingle represents a TransferSingle event raised by the DDC1155 contract.
type DDC1155TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	DdcId    *big.Int
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 ddcId, uint256 amount)
func (_DDC1155 *DDC1155Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*DDC1155TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DDC1155TransferSingleIterator{contract: _DDC1155.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 ddcId, uint256 amount)
func (_DDC1155 *DDC1155Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *DDC1155TransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155TransferSingle)
				if err := _DDC1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 ddcId, uint256 amount)
func (_DDC1155 *DDC1155Filterer) ParseTransferSingle(log types.Log) (*DDC1155TransferSingle, error) {
	event := new(DDC1155TransferSingle)
	if err := _DDC1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DDC1155UpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the DDC1155 contract.
type DDC1155UpgradedIterator struct {
	Event *DDC1155Upgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DDC1155UpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DDC1155Upgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DDC1155Upgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DDC1155UpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DDC1155UpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DDC1155Upgraded represents a Upgraded event raised by the DDC1155 contract.
type DDC1155Upgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DDC1155 *DDC1155Filterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*DDC1155UpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _DDC1155.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &DDC1155UpgradedIterator{contract: _DDC1155.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DDC1155 *DDC1155Filterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *DDC1155Upgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _DDC1155.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DDC1155Upgraded)
				if err := _DDC1155.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DDC1155 *DDC1155Filterer) ParseUpgraded(log types.Log) (*DDC1155Upgraded, error) {
	event := new(DDC1155Upgraded)
	if err := _DDC1155.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
