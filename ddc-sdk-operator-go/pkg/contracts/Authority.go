// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AuthorityMetaData contains all meta data concerning the Authority contract.
var AuthorityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"AddBatchAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enumIAuthority.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"AddFunction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"CrossPlatformApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enumIAuthority.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"DelFunction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"SetSwitcherStateOfPlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"dids\",\"type\":\"string[]\"}],\"name\":\"SyncPlatformDID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumIAuthority.State\",\"name\":\"platformState\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enumIAuthority.State\",\"name\":\"operatorState\",\"type\":\"uint8\"}],\"name\":\"UpdateAccountState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"accountName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"accountDID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"leaderDID\",\"type\":\"string\"}],\"name\":\"addAccountByOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"accountName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"accountDID\",\"type\":\"string\"}],\"name\":\"addAccountByPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"accountNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"accountDIDs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"leaderDIDs\",\"type\":\"string[]\"}],\"name\":\"addBatchAccountByOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"accountNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"accountDIDs\",\"type\":\"string[]\"}],\"name\":\"addBatchAccountByPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumIAuthority.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"addFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"accountName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"accountDID\",\"type\":\"string\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enumIAuthority.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"checkAvailableAndRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"crossPlatformApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"crossPlatformCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumIAuthority.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"delFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enumIAuthority.Role\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"enumIAuthority.State\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enumIAuthority.State\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumIAuthority.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getFunctions\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"hasFunctionPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acc2\",\"type\":\"address\"}],\"name\":\"onePlatformCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"setSwitcherStateOfPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switcherStateOfPlatform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"dids\",\"type\":\"string[]\"}],\"name\":\"syncPlatformDID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enumIAuthority.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"changePlatformState\",\"type\":\"bool\"}],\"name\":\"updateAccountState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b50608051613ed562000100600039600081816108bd015281816108fd01528181610d490152610d890152613ed56000f3fe6080604052600436106101665760003560e01c8063a8dd7ce8116100d1578063d3d65ddb1161008a578063ed5cad6411610064578063ed5cad641461040c578063f2fde38b1461042c578063faf3c53f1461044c578063fbcbc0f11461046c57600080fd5b8063d3d65ddb146103b4578063e1576897146103cc578063e3f00c3a146103ec57600080fd5b8063a8dd7ce8146102e7578063b50f1a5e14610307578063b9b89dca14610334578063bac7ad5214610354578063bea24f2014610374578063cf149c6d1461039457600080fd5b80634f1ef286116101235780634f1ef28614610242578063715018a6146102555780638129fc1c1461026a5780638da5cb5b1461027f57806395c2a8d9146102a7578063a6ff8f0c146102c757600080fd5b806301843caa1461016b57806305e847fb146101a05780633659cfe6146101c25780633a723d17146101e25780634020895014610202578063470cf0e014610222575b600080fd5b34801561017757600080fd5b5061018b610186366004613382565b61049f565b60405190151581526020015b60405180910390f35b3480156101ac57600080fd5b506101c06101bb3660046133c5565b6106ad565b005b3480156101ce57600080fd5b506101c06101dd366004613408565b6108b3565b3480156101ee57600080fd5b5061018b6101fd366004613382565b61097b565b34801561020e57600080fd5b506101c061021d3660046135f8565b610b18565b34801561022e57600080fd5b5061018b61023d3660046136bd565b610c74565b6101c06102503660046136f7565b610d3f565b34801561026157600080fd5b506101c0610df8565b34801561027657600080fd5b506101c0610e2e565b34801561028b57600080fd5b506033546040516001600160a01b039091168152602001610197565b3480156102b357600080fd5b5061018b6102c2366004613408565b610ea9565b3480156102d357600080fd5b506101c06102e2366004613768565b610ed6565b3480156102f357600080fd5b506101c0610302366004613786565b611089565b34801561031357600080fd5b506103276103223660046137a1565b611141565b60405161019791906137bd565b34801561034057600080fd5b506101c061034f36600461380b565b611230565b34801561036057600080fd5b506101c061036f366004613840565b61133f565b34801561038057600080fd5b506101c061038f366004613872565b61175c565b3480156103a057600080fd5b506101c06103af3660046138e6565b6117a5565b3480156103c057600080fd5b5060ce5460ff1661018b565b3480156103d857600080fd5b506101c06103e7366004613872565b6118e1565b3480156103f857600080fd5b506101c0610407366004613964565b611981565b34801561041857600080fd5b5061018b6104273660046139f1565b6119d3565b34801561043857600080fd5b506101c0610447366004613408565b611a2e565b34801561045857600080fd5b506101c0610467366004613768565b611ac6565b34801561047857600080fd5b5061048c610487366004613408565b611e8f565b6040516101979796959493929190613a9d565b6000806104ab846121f3565b90506104ba8160200151612514565b6104c381612535565b60006104ce846121f3565b90506104dd8160200151612514565b6104e681612535565b6001826040015160028111156104fe576104fe613a73565b148015610520575060018160400151600281111561051e5761051e613a73565b145b1561058a57606080820151908301516105389161259f565b80156105815750815160405160cc9161055091613b28565b9081526040519081900360200181208251909161056d9190613b28565b9081526040519081900360200190205460ff165b925050506106a7565b6001826040015160028111156105a2576105a2613a73565b1480156105c457506002816040015160028111156105c2576105c2613a73565b145b156105fa57815160405160cc916105da91613b28565b9081526020016040518091039020816060015160405161056d9190613b28565b60028260400151600281111561061257610612613a73565b148015610634575060018160400151600281111561063257610632613a73565b145b1561064d5760cc82606001516040516105509190613b28565b60028260400151600281111561066557610665613a73565b148015610687575060028160400151600281111561068557610685613a73565b145b156106a05760cc82606001516040516105da9190613b28565b6000925050505b92915050565b6106b76000612640565b6106c0836126a4565b6106c9826126a4565b60006106d4846121f3565b90506106e38160200151612514565b6106ec81612535565b60006106f7846121f3565b90506107068160200151612514565b61070f81612535565b60018260400151600281111561072757610727613a73565b148015610749575060018160400151600281111561074757610747613a73565b145b6107aa5760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a426f7468206d7573742062652060706c6174666f726d6044820152666020726f6c657360c81b60648201526084015b60405180910390fd5b805182516107b79161259f565b156108195760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a426f746820617265207468652073616d6520706c617460448201526b199bdc9b481858d8dbdd5b9d60a21b60648201526084016107a1565b8260cc836000015160405161082e9190613b28565b9081526040519081900360200181208351909161084b9190613b28565b90815260405160209181900382018120805460ff19169315159390931790925584151582526001600160a01b0386811692908816917f944da3aaddcf895695572377f73f4b10c3822d1ea336c5d59f364f3e5e1b121891015b60405180910390a35050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108fb5760405162461bcd60e51b81526004016107a190613b44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661092d6126f3565b6001600160a01b0316146109535760405162461bcd60e51b81526004016107a190613b90565b61095c81612721565b604080516000808252602082019092526109789183919061274b565b50565b600080610987846121f3565b90506109968160200151612514565b61099f81612535565b60006109aa846121f3565b90506109b98160200151612514565b6109c281612535565b6001826040015160028111156109da576109da613a73565b1480156109fc57506001816040015160028111156109fa576109fa613a73565b145b15610a285760608082015190830151610a149161259f565b80156105815750805182516105819161259f565b600182604001516002811115610a4057610a40613a73565b148015610a625750600281604001516002811115610a6057610a60613a73565b145b15610a7757606081015182516105819161259f565b600282604001516002811115610a8f57610a8f613a73565b148015610ab15750600181604001516002811115610aaf57610aaf613a73565b145b15610ac657606082015181516105819161259f565b600282604001516002811115610ade57610ade613a73565b148015610b005750600281604001516002811115610afe57610afe613a73565b145b156106a057606080820151908301516105819161259f565b610b226000612640565b82518451148015610b34575081518351145b8015610b41575080518251145b610b8d5760405162461bcd60e51b815260206004820152601a60248201527f417574686f726974793a206c656e677468206d69736d6174636800000000000060448201526064016107a1565b60005b8451811015610c1b57610c09858281518110610bae57610bae613bdc565b6020026020010151858381518110610bc857610bc8613bdc565b6020026020010151858481518110610be257610be2613bdc565b6020026020010151858581518110610bfc57610bfc613bdc565b6020026020010151612896565b80610c1381613c08565b915050610b90565b5083604051610c2a9190613c21565b6040518091039020610c393390565b6001600160a01b03167f697b1ca999dc9fa10f6b5121c3681b6e562901370eebdabe6a41f253731ee2b960405160405180910390a350505050565b600080610c80856121f3565b9050610c8f8160200151612514565b610c9881612535565b610ca1846126a4565b610caa836129df565b6000610cba826040015186612a2e565b9050600060ca600084604001516002811115610cd857610cd8613a73565b6002811115610ce957610ce9613a73565b81526020019081526020016000208281548110610d0857610d08613bdc565b600091825260208083206001600160e01b0319891684526002600390930201919091019052604090205411925050505b9392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d875760405162461bcd60e51b81526004016107a190613b44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610db96126f3565b6001600160a01b031614610ddf5760405162461bcd60e51b81526004016107a190613b90565b610de882612721565b610df48282600161274b565b5050565b6033546001600160a01b03163314610e225760405162461bcd60e51b81526004016107a190613c60565b610e2c6000612b0b565b565b600054610100900460ff1680610e47575060005460ff16155b610e635760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015610e85576000805461ffff19166101011790555b610e8d612b5d565b610e95612bc4565b8015610978576000805461ff001916905550565b600080610eb5836121f3565b9050610ec48160200151612514565b610ecd81612535565b50600192915050565b610ee06000612640565b610ee9826126a4565b610ef2816129df565b600060ca6000856002811115610f0a57610f0a613a73565b6002811115610f1b57610f1b613a73565b8152602001908152602001600020610f338585612a2e565b81548110610f4357610f43613bdc565b600091825260208083206001600160e01b0319861684526002600390930201918201905260409091205490915080610fbd5760405162461bcd60e51b815260206004820152601e60248201527f417574686f726974793a66756e6320646f6573206e6f7420657869737473000060448201526064016107a1565b6000600180840190610fcf9084613ce3565b81548110610fdf57610fdf613bdc565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550816002016000846001600160e01b0319166001600160e01b03191681526020019081526020016000206000905584600281111561104e5761104e613a73565b336001600160a01b03167ffd7321e06212c7e20cb40ffe695d160cb669329e947bbcab975e41e98515341786866040516108a4929190613cfa565b6110936000612640565b60ce5460ff161515811515036110eb5760405162461bcd60e51b815260206004820152601b60248201527f417574686f726974793a696e76616c6964206f7065726174696f6e000000000060448201526064016107a1565b60ce805460ff1916821515179055336001600160a01b03167f548b8e30af324db539fea4a4816919b2d27ab094df8638f0e3c16c7271d7986082604051611136911515815260200190565b60405180910390a250565b606061114c826126a4565b60ca600084600281111561116257611162613a73565b600281111561117357611173613a73565b815260200190815260200160002061118b8484612a2e565b8154811061119b5761119b613bdc565b906000526020600020906003020160010180548060200260200160405190810160405280929190818152602001828054801561122357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116111e55790505b5050505050905092915050565b61123a6000612640565b60005b81518110156113055781818151811061125857611258613bdc565b6020026020010151516000036112a85760405162461bcd60e51b8152602060048201526015602482015274105d5d1a1bdc9a5d1e4e9a5b9d985b1a5908191a59605a1b60448201526064016107a1565b600160cd8383815181106112be576112be613bdc565b60200260200101516040516112d39190613b28565b908152604051908190036020019020805491151560ff19909216919091179055806112fd81613c08565b91505061123d565b50336001600160a01b03167f199521935c6599c790890fbd51923a1d92fb29f6691b18e985938fab4070e8ec826040516111369190613d1d565b60008061134b85612c2b565b9150915061135881612535565b6113628282612cee565b80611382575060008160400151600281111561138057611380613a73565b145b6113df5760405162461bcd60e51b815260206004820152602860248201527f417574686f726974793a204163636f756e74277320726f6c6520646f6573206e6044820152670dee840dac2e8c6d60c31b60648201526084016107a1565b6002816040015160028111156113f7576113f7613a73565b0361143c5760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a2077726f6e6720726f6c6560581b60448201526064016107a1565b60008160400151600281111561145457611454613a73565b036115785782156114d55783600181111561147157611471613a73565b8260800151600181111561148757611487613a73565b036114a45760405162461bcd60e51b81526004016107a190613d7f565b608082018460018111156114ba576114ba613a73565b908160018111156114cd576114cd613a73565b905250611607565b8360018111156114e7576114e7613a73565b8260a0015160018111156114fd576114fd613a73565b036115625760405162461bcd60e51b815260206004820152602f60248201527f417574686f726974793a204f70657261746f72537461746520646f65736e277460448201526e206e65656420746f206368616e676560881b60648201526084016107a1565b60a082018460018111156114ba576114ba613a73565b60018160400151600281111561159057611590613a73565b03611607578360018111156115a7576115a7613a73565b826080015160018111156115bd576115bd613a73565b036115da5760405162461bcd60e51b81526004016107a190613d7f565b608082018460018111156115f0576115f0613a73565b9081600181111561160357611603613a73565b9052505b6001600160a01b038516600090815260c960209081526040909120835180518593611636928492910190613292565b50602082810151805161164f9260018501920190613292565b5060408201518160020160006101000a81548160ff0219169083600281111561167a5761167a613a73565b02179055506060820151805161169a916003840191602090910190613292565b50608082015160048201805460ff1916600183818111156116bd576116bd613a73565b021790555060a082015160048201805461ff0019166101008360018111156116e7576116e7613a73565b021790555060c08201518051611707916005840191602090910190613292565b505050608082015160a08301516040516001600160a01b038816927f3a99d1f905eb66fd0850dd6e2156668b6ae1f16f41cd49dd7c6d4fb5147f784f9261174d92613dce565b60405180910390a25050505050565b6117666001612640565b61176e612d02565b61177782612d65565b61178083612dc6565b600061178b336121f3565b905061179f84838360000151866002612e2c565b50505050565b6117af6001612640565b815183511480156117c1575080518251145b61180d5760405162461bcd60e51b815260206004820152601a60248201527f417574686f726974793a206c656e677468206d69736d6174636800000000000060448201526064016107a1565b6000611818336121f3565b905060005b8451811015610c1b5761182e612d02565b61185084828151811061184357611843613bdc565b6020026020010151612d65565b61187285828151811061186557611865613bdc565b6020026020010151612dc6565b6118cf85828151811061188757611887613bdc565b60200260200101518483815181106118a1576118a1613bdc565b602002602001015184600001518785815181106118c0576118c0613bdc565b60200260200101516002612e2c565b806118d981613c08565b91505061181d565b6033546001600160a01b0316331461190b5760405162461bcd60e51b81526004016107a190613c60565b805160000361195c5760405162461bcd60e51b815260206004820152601f60248201527f417574686f726974793a204449442063616e6e6f7420626520656d707479210060448201526064016107a1565b61196582612d65565b61196e83612dc6565b61197c838283856000612e2c565b505050565b61198b6000612640565b61199784848484612896565b6040516001600160a01b0385169033907fd246aa772c5574778b374ed1202c22bac9c87a04fd3624439c2642fa6ca6217190600090a350505050565b6000806119df846121f3565b90506119ee8160200151612514565b6119f781612535565b826002811115611a0957611a09613a73565b60ff1681604001516002811115611a2257611a22613a73565b60ff1614949350505050565b6033546001600160a01b03163314611a585760405162461bcd60e51b81526004016107a190613c60565b6001600160a01b038116611abd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107a1565b61097881612b0b565b611ad06000612640565b611ad9826126a4565b611ae2816129df565b60008060cb6000866002811115611afb57611afb613a73565b6002811115611b0c57611b0c613a73565b81526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002054905080600003611d1757600060ca6000876002811115611b6057611b60613a73565b6002811115611b7157611b71613a73565b815260200190815260200160002080549050905060ca6000876002811115611b9b57611b9b613a73565b6002811115611bac57611bac613a73565b81526020810191909152604001600090812080546001018155815260ca90876002811115611bdc57611bdc613a73565b6002811115611bed57611bed613a73565b81526020019081526020016000208181548110611c0c57611c0c613bdc565b9060005260206000209060030201925060ca6000876002811115611c3257611c32613a73565b6002811115611c4357611c43613a73565b81526020019081526020016000208054905060cb6000886002811115611c6b57611c6b613a73565b6002811115611c7c57611c7c613a73565b8152602080820192909252604090810160009081206001600160a01b038a168083529084528282209490945586546001600160a01b03191690931786556001808701805491820181558085528385206008830401805463ffffffff60079094166004026101000a938402191660e08b901c9390930292909217909155546001600160e01b031988168452600287019092529091205550611e42565b60ca6000866002811115611d2d57611d2d613a73565b6002811115611d3e57611d3e613a73565b8152602001908152602001600020600182611d599190613ce3565b81548110611d6957611d69613bdc565b600091825260208083206001600160e01b0319871684526002600390930201918201905260409091205490925015611de35760405162461bcd60e51b815260206004820152601e60248201527f417574686f726974793a2066756e6320616c726561647920657869737473000060448201526064016107a1565b600182810180549182018155600081815260208082206008850401805463ffffffff60079096166004026101000a958602191660e089901c959095029490941790935590546001600160e01b0319861682526002850190925260409020555b846002811115611e5457611e54613a73565b336001600160a01b03167fd2925d5c000f95a189be5c6c90c0dc14f33c077900241eb3e7c0a287d914e65086866040516108a4929190613cfa565b606080600060606000806060600060c960008a6001600160a01b03166001600160a01b031681526020019081526020016000206040518060e0016040529081600082018054611edd90613de9565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0990613de9565b8015611f565780601f10611f2b57610100808354040283529160200191611f56565b820191906000526020600020905b815481529060010190602001808311611f3957829003601f168201915b50505050508152602001600182018054611f6f90613de9565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9b90613de9565b8015611fe85780601f10611fbd57610100808354040283529160200191611fe8565b820191906000526020600020905b815481529060010190602001808311611fcb57829003601f168201915b505050918352505060028281015460209092019160ff169081111561200f5761200f613a73565b600281111561202057612020613a73565b815260200160038201805461203490613de9565b80601f016020809104026020016040519081016040528092919081815260200182805461206090613de9565b80156120ad5780601f10612082576101008083540402835291602001916120ad565b820191906000526020600020905b81548152906001019060200180831161209057829003601f168201915b5050509183525050600482015460209091019060ff1660018111156120d4576120d4613a73565b60018111156120e5576120e5613a73565b81526020016004820160019054906101000a900460ff16600181111561210d5761210d613a73565b600181111561211e5761211e613a73565b815260200160058201805461213290613de9565b80601f016020809104026020016040519081016040528092919081815260200182805461215e90613de9565b80156121ab5780601f10612180576101008083540402835291602001916121ab565b820191906000526020600020905b81548152906001019060200180831161218e57829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560a001518660c00151975097509750975097509750975050919395979092949650565b6121fb613316565b612204826126a4565b6001600160a01b038216600090815260c9602052604090819020815160e0810190925280548290829061223690613de9565b80601f016020809104026020016040519081016040528092919081815260200182805461226290613de9565b80156122af5780601f10612284576101008083540402835291602001916122af565b820191906000526020600020905b81548152906001019060200180831161229257829003601f168201915b505050505081526020016001820180546122c890613de9565b80601f01602080910402602001604051908101604052809291908181526020018280546122f490613de9565b80156123415780601f1061231657610100808354040283529160200191612341565b820191906000526020600020905b81548152906001019060200180831161232457829003601f168201915b505050918352505060028281015460209092019160ff169081111561236857612368613a73565b600281111561237957612379613a73565b815260200160038201805461238d90613de9565b80601f01602080910402602001604051908101604052809291908181526020018280546123b990613de9565b80156124065780601f106123db57610100808354040283529160200191612406565b820191906000526020600020905b8154815290600101906020018083116123e957829003601f168201915b5050509183525050600482015460209091019060ff16600181111561242d5761242d613a73565b600181111561243e5761243e613a73565b81526020016004820160019054906101000a900460ff16600181111561246657612466613a73565b600181111561247757612477613a73565b815260200160058201805461248b90613de9565b80601f01602080910402602001604051908101604052809291908181526020018280546124b790613de9565b80156125045780601f106124d957610100808354040283529160200191612504565b820191906000526020600020905b8154815290600101906020018083116124e757829003601f168201915b5050505050815250509050919050565b80516000036109785760405162461bcd60e51b81526004016107a190613e23565b6125478160a001518260800151612f85565b6109785760405162461bcd60e51b815260206004820152602360248201527f417574686f726974793a204163636f756e7420686173206265656e2066726f7a604482015262656e2160e81b60648201526084016107a1565b8051825160009184918491146125ba576000925050506106a7565b815160005b81811015612633578281815181106125d9576125d9613bdc565b602001015160f81c60f81b6001600160f81b03191684828151811061260057612600613bdc565b01602001516001600160f81b031916146126215760009450505050506106a7565b8061262b81613c08565b9150506125bf565b5060019695505050505050565b61264a33826119d3565b6109785760405162461bcd60e51b815260206004820152602560248201527f417574686f726974793a20696e636f727265637420726f6c65206f722064697360448201526418589b195960da1b60648201526084016107a1565b6001600160a01b0381166109785760405162461bcd60e51b8152602060048201526016602482015275417574686f726974793a7a65726f206164647265737360501b60448201526064016107a1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146109785760405162461bcd60e51b81526004016107a190613c60565b60006127556126f3565b905061276084612fbf565b60008351118061276d5750815b1561277e5761277c8484613064565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661288f57805460ff191660011781556040516001600160a01b03831660248201526127fd90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052613064565b50805460ff1916815561280e6126f3565b6001600160a01b0316826001600160a01b0316146128865760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016107a1565b61288f8561314f565b5050505050565b61289f83612d65565b6128a884612dc6565b80516002906000036129635782516000036129135760405162461bcd60e51b815260206004820152602560248201527f417574686f726974793a206163636f756e744449442063616e6e6f7420626520604482015264656d70747960d81b60648201526084016107a1565b600061291e336121f3565b90508060000151925060019150600160cd8560405161293d9190613b28565b908152604051908190036020019020805491151560ff19909216919091179055506129d2565b60cd826040516129739190613b28565b9081526040519081900360200190205460ff166129d25760405162461bcd60e51b815260206004820152601b60248201527f417574686f726974793a696e76616c6964206c6561646572444944000000000060448201526064016107a1565b61288f8584848785612e2c565b6001600160e01b031981166109785760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a696e76616c69642073696760581b60448201526064016107a1565b60008060cb6000856002811115612a4757612a47613a73565b6002811115612a5857612a58613a73565b81526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002054905060008111612af85760405162461bcd60e51b815260206004820152603360248201527f417574686f726974793a60726f6c6560206f722060636f6e74726163744164646044820152721c995cdcd808191bd95cdb89dd08195e1a5cdd606a1b60648201526084016107a1565b612b03600182613ce3565b949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680612b76575060005460ff16155b612b925760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015612bb4576000805461ffff19166101011790555b612bbc61318f565b610e956131f9565b600054610100900460ff1680612bdd575060005460ff16155b612bf95760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015612c1b576000805461ffff19166101011790555b612c2361318f565b610e9561318f565b612c33613316565b612c3b613316565b6000612c46846121f3565b9050806020015151600003612c6d5760405162461bcd60e51b81526004016107a190613e23565b6000612c78336121f3565b9050806020015151600003612ce45760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a204c65616465724163636f756e74496e666f20646f6560448201526b73206e6f742065786973742160a01b60648201526084016107a1565b9094909350915050565b80516060830151600091610d38919061259f565b60ce5460ff16610e2c5760405162461bcd60e51b815260206004820152602860248201527f417574686f726974793a7377697463686572206f6620706c6174666f726d20696044820152671cc818db1bdcd95960c21b60648201526084016107a1565b80516000036109785760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a204163636f756e744e616d652063616e6e6f7420626560448201526620656d7074792160c81b60648201526084016107a1565b612dcf816121f3565b6020015151156109785760405162461bcd60e51b815260206004820152602260248201527f417574686f726974793a204163636f756e7420616c7265616479206578697374604482015261732160f01b60648201526084016107a1565b6040518060e00160405280858152602001838152602001826002811115612e5557612e55613a73565b815260208101859052604001600181526020016001815260408051602081810183526000808352938101919091526001600160a01b038916835260c981529120825180519192612eaa92849290910190613292565b506020828101518051612ec39260018501920190613292565b5060408201518160020160006101000a81548160ff02191690836002811115612eee57612eee613a73565b021790555060608201518051612f0e916003840191602090910190613292565b50608082015160048201805460ff191660018381811115612f3157612f31613a73565b021790555060a082015160048201805461ff001916610100836001811115612f5b57612f5b613a73565b021790555060c08201518051612f7b916005840191602090910190613292565b5050505050505050565b60006001836001811115612f9b57612f9b613a73565b148015610d3857506001826001811115612fb757612fb7613a73565b149392505050565b803b6130235760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107a1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6130c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107a1565b600080846001600160a01b0316846040516130de9190613b28565b600060405180830381855af49150503d8060008114613119576040519150601f19603f3d011682016040523d82523d6000602084013e61311e565b606091505b50915091506131468282604051806060016040528060278152602001613e7960279139613259565b95945050505050565b61315881612fbf565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff16806131a8575060005460ff16155b6131c45760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015610e95576000805461ffff19166101011790558015610978576000805461ff001916905550565b600054610100900460ff1680613212575060005460ff16155b61322e5760405162461bcd60e51b81526004016107a190613c95565b600054610100900460ff16158015613250576000805461ffff19166101011790555b610e9533612b0b565b60608315613268575081610d38565b8251156132785782518084602001fd5b8160405162461bcd60e51b81526004016107a19190613e65565b82805461329e90613de9565b90600052602060002090601f0160209004810192826132c05760008555613306565b82601f106132d957805160ff1916838001178555613306565b82800160010185558215613306579182015b828111156133065782518255916020019190600101906132eb565b50613312929150613351565b5090565b6040805160e0810182526060808252602082015290810160008152606060208201526040016000815260200160008152602001606081525090565b5b808211156133125760008155600101613352565b80356001600160a01b038116811461337d57600080fd5b919050565b6000806040838503121561339557600080fd5b61339e83613366565b91506133ac60208401613366565b90509250929050565b8035801515811461337d57600080fd5b6000806000606084860312156133da57600080fd5b6133e384613366565b92506133f160208501613366565b91506133ff604085016133b5565b90509250925092565b60006020828403121561341a57600080fd5b610d3882613366565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561346257613462613423565b604052919050565b600067ffffffffffffffff82111561348457613484613423565b5060051b60200190565b600082601f83011261349f57600080fd5b813560206134b46134af8361346a565b613439565b82815260059290921b840181019181810190868411156134d357600080fd5b8286015b848110156134f5576134e881613366565b83529183019183016134d7565b509695505050505050565b600067ffffffffffffffff83111561351a5761351a613423565b61352d601f8401601f1916602001613439565b905082815283838301111561354157600080fd5b828260208301376000602084830101529392505050565b600082601f83011261356957600080fd5b610d3883833560208501613500565b600082601f83011261358957600080fd5b813560206135996134af8361346a565b82815260059290921b840181019181810190868411156135b857600080fd5b8286015b848110156134f557803567ffffffffffffffff8111156135dc5760008081fd5b6135ea8986838b0101613558565b8452509183019183016135bc565b6000806000806080858703121561360e57600080fd5b843567ffffffffffffffff8082111561362657600080fd5b6136328883890161348e565b9550602087013591508082111561364857600080fd5b61365488838901613578565b9450604087013591508082111561366a57600080fd5b61367688838901613578565b9350606087013591508082111561368c57600080fd5b5061369987828801613578565b91505092959194509250565b80356001600160e01b03198116811461337d57600080fd5b6000806000606084860312156136d257600080fd5b6136db84613366565b92506136e960208501613366565b91506133ff604085016136a5565b6000806040838503121561370a57600080fd5b61371383613366565b9150602083013567ffffffffffffffff81111561372f57600080fd5b8301601f8101851361374057600080fd5b61374f85823560208401613500565b9150509250929050565b80356003811061337d57600080fd5b60008060006060848603121561377d57600080fd5b6136db84613759565b60006020828403121561379857600080fd5b610d38826133b5565b600080604083850312156137b457600080fd5b61339e83613759565b6020808252825182820181905260009190848201906040850190845b818110156137ff5783516001600160e01b031916835292840192918401916001016137d9565b50909695505050505050565b60006020828403121561381d57600080fd5b813567ffffffffffffffff81111561383457600080fd5b612b0384828501613578565b60008060006060848603121561385557600080fd5b61385e84613366565b92506020840135600281106133f157600080fd5b60008060006060848603121561388757600080fd5b61389084613366565b9250602084013567ffffffffffffffff808211156138ad57600080fd5b6138b987838801613558565b935060408601359150808211156138cf57600080fd5b506138dc86828701613558565b9150509250925092565b6000806000606084860312156138fb57600080fd5b833567ffffffffffffffff8082111561391357600080fd5b61391f8783880161348e565b9450602086013591508082111561393557600080fd5b61394187838801613578565b9350604086013591508082111561395757600080fd5b506138dc86828701613578565b6000806000806080858703121561397a57600080fd5b61398385613366565b9350602085013567ffffffffffffffff808211156139a057600080fd5b6139ac88838901613558565b945060408701359150808211156139c257600080fd5b6139ce88838901613558565b935060608701359150808211156139e457600080fd5b5061369987828801613558565b60008060408385031215613a0457600080fd5b613a0d83613366565b91506133ac60208401613759565b60005b83811015613a36578181015183820152602001613a1e565b8381111561179f5750506000910152565b60008151808452613a5f816020860160208601613a1b565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60028110613a9957613a99613a73565b9052565b60e081526000613ab060e083018a613a47565b8281036020840152613ac2818a613a47565b905060038810613ad457613ad4613a73565b8760408401528281036060840152613aec8188613a47565b9050613afb6080840187613a89565b613b0860a0840186613a89565b82810360c0840152613b1a8185613a47565b9a9950505050505050505050565b60008251613b3a818460208701613a1b565b9190910192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613c1a57613c1a613bf2565b5060010190565b815160009082906020808601845b83811015613c545781516001600160a01b031685529382019390820190600101613c2f565b50929695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082821015613cf557613cf5613bf2565b500390565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613d7257603f19888603018452613d60858351613a47565b94509285019290850190600101613d44565b5092979650505050505050565b6020808252602f908201527f417574686f726974793a20506c6174666f726d537461746520646f65736e277460408201526e206e65656420746f206368616e676560881b606082015260800190565b60408101613ddc8285613a89565b610d386020830184613a89565b600181811c90821680613dfd57607f821691505b602082108103613e1d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526022908201527f417574686f726974793a204163636f756e7420646f6573206e6f742065786973604082015261742160f01b606082015260800190565b602081526000610d386020830184613a4756fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201d63c257f4045e8907a6ae57162fb98ab64be5aaf416feeb82d09a24b363160a64736f6c634300080d0033",
}

// AuthorityABI is the input ABI used to generate the binding from.
// Deprecated: Use AuthorityMetaData.ABI instead.
var AuthorityABI = AuthorityMetaData.ABI

// AuthorityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AuthorityMetaData.Bin instead.
var AuthorityBin = AuthorityMetaData.Bin

// DeployAuthority deploys a new Ethereum contract, binding an instance of Authority to it.
func DeployAuthority(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Authority, error) {
	parsed, err := AuthorityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AuthorityBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Authority{AuthorityCaller: AuthorityCaller{contract: contract}, AuthorityTransactor: AuthorityTransactor{contract: contract}, AuthorityFilterer: AuthorityFilterer{contract: contract}}, nil
}

// Authority is an auto generated Go binding around an Ethereum contract.
type Authority struct {
	AuthorityCaller     // Read-only binding to the contract
	AuthorityTransactor // Write-only binding to the contract
	AuthorityFilterer   // Log filterer for contract events
}

// AuthorityCaller is an auto generated read-only Go binding around an Ethereum contract.
type AuthorityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuthorityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AuthorityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuthorityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AuthorityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AuthoritySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AuthoritySession struct {
	Contract     *Authority        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AuthorityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AuthorityCallerSession struct {
	Contract *AuthorityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// AuthorityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AuthorityTransactorSession struct {
	Contract     *AuthorityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// AuthorityRaw is an auto generated low-level Go binding around an Ethereum contract.
type AuthorityRaw struct {
	Contract *Authority // Generic contract binding to access the raw methods on
}

// AuthorityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AuthorityCallerRaw struct {
	Contract *AuthorityCaller // Generic read-only contract binding to access the raw methods on
}

// AuthorityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AuthorityTransactorRaw struct {
	Contract *AuthorityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAuthority creates a new instance of Authority, bound to a specific deployed contract.
func NewAuthority(address common.Address, backend bind.ContractBackend) (*Authority, error) {
	contract, err := bindAuthority(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Authority{AuthorityCaller: AuthorityCaller{contract: contract}, AuthorityTransactor: AuthorityTransactor{contract: contract}, AuthorityFilterer: AuthorityFilterer{contract: contract}}, nil
}

// NewAuthorityCaller creates a new read-only instance of Authority, bound to a specific deployed contract.
func NewAuthorityCaller(address common.Address, caller bind.ContractCaller) (*AuthorityCaller, error) {
	contract, err := bindAuthority(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AuthorityCaller{contract: contract}, nil
}

// NewAuthorityTransactor creates a new write-only instance of Authority, bound to a specific deployed contract.
func NewAuthorityTransactor(address common.Address, transactor bind.ContractTransactor) (*AuthorityTransactor, error) {
	contract, err := bindAuthority(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AuthorityTransactor{contract: contract}, nil
}

// NewAuthorityFilterer creates a new log filterer instance of Authority, bound to a specific deployed contract.
func NewAuthorityFilterer(address common.Address, filterer bind.ContractFilterer) (*AuthorityFilterer, error) {
	contract, err := bindAuthority(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AuthorityFilterer{contract: contract}, nil
}

// bindAuthority binds a generic wrapper to an already deployed contract.
func bindAuthority(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AuthorityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Authority *AuthorityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Authority.Contract.AuthorityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Authority *AuthorityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Authority.Contract.AuthorityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Authority *AuthorityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Authority.Contract.AuthorityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Authority *AuthorityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Authority.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Authority *AuthorityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Authority.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Authority *AuthorityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Authority.Contract.contract.Transact(opts, method, params...)
}

// AccountAvailable is a free data retrieval call binding the contract method 0x95c2a8d9.
//
// Solidity: function accountAvailable(address account) view returns(bool)
func (_Authority *AuthorityCaller) AccountAvailable(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _Authority.contract.Call(opts, &out, "accountAvailable", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AccountAvailable is a free data retrieval call binding the contract method 0x95c2a8d9.
//
// Solidity: function accountAvailable(address account) view returns(bool)
func (_Authority *AuthoritySession) AccountAvailable(account common.Address) (bool, error) {
	return _Authority.Contract.AccountAvailable(&_Authority.CallOpts, account)
}

// AccountAvailable is a free data retrieval call binding the contract method 0x95c2a8d9.
//
// Solidity: function accountAvailable(address account) view returns(bool)
func (_Authority *AuthorityCallerSession) AccountAvailable(account common.Address) (bool, error) {
	return _Authority.Contract.AccountAvailable(&_Authority.CallOpts, account)
}

// CheckAvailableAndRole is a free data retrieval call binding the contract method 0xed5cad64.
//
// Solidity: function checkAvailableAndRole(address account, uint8 role) view returns(bool)
func (_Authority *AuthorityCaller) CheckAvailableAndRole(opts *bind.CallOpts, account common.Address, role uint8) (bool, error) {
	var out []interface{}
	err := _Authority.contract.Call(opts, &out, "checkAvailableAndRole", account, role)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckAvailableAndRole is a free data retrieval call binding the contract method 0xed5cad64.
//
// Solidity: function checkAvailableAndRole(address account, uint8 role) view returns(bool)
func (_Authority *AuthoritySession) CheckAvailableAndRole(account common.Address, role uint8) (bool, error) {
	return _Authority.Contract.CheckAvailableAndRole(&_Authority.CallOpts, account, role)
}

// CheckAvailableAndRole is a free data retrieval call binding the contract method 0xed5cad64.
//
// Solidity: function checkAvailableAndRole(address account, uint8 role) view returns(bool)
func (_Authority *AuthorityCallerSession) CheckAvailableAndRole(account common.Address, role uint8) (bool, error) {
	return _Authority.Contract.CheckAvailableAndRole(&_Authority.CallOpts, account, role)
}

// CrossPlatformCheck is a free data retrieval call binding the contract method 0x01843caa.
//
// Solidity: function crossPlatformCheck(address from, address to) view returns(bool)
func (_Authority *AuthorityCaller) CrossPlatformCheck(opts *bind.CallOpts, from common.Address, to common.Address) (bool, error) {
	var out []interface{}
	err := _Authority.contract.Call(opts, &out, "crossPlatformCheck", from, to)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CrossPlatformCheck is a free data retrieval call binding the contract method 0x01843caa.
//
// Solidity: function crossPlatformCheck(address from, address to) view returns(bool)
func (_Authority *AuthoritySession) CrossPlatformCheck(from common.Address, to common.Address) (bool, error) {
	return _Authority.Contract.CrossPlatformCheck(&_Authority.CallOpts, from, to)
}

// CrossPlatformCheck is a free data retrieval call binding the contract method 0x01843caa.
//
// Solidity: function crossPlatformCheck(address from, address to) view returns(bool)
func (_Authority *AuthorityCallerSession) CrossPlatformCheck(from common.Address, to common.Address) (bool, error) {
	return _Authority.Contract.CrossPlatformCheck(&_Authority.CallOpts, from, to)
}

// GetAccount is a free data retrieval call binding the contract method 0xfbcbc0f1.
//
// Solidity: function getAccount(address account) view returns(string, string, uint8, string, uint8, uint8, string)
func (_Authority *AuthorityCaller) GetAccount(opts *bind.CallOpts, account common.Address) (string, string, uint8, string, uint8, uint8, string, error) {
	var out []interface{}
	err := _Authority.contract.Call(opts, &out, "getAccount", account)

	if err != nil {
		return *new(string), *new(string), *new(uint8), *new(string), *new(uint8), *new(uint8), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	out2 := *abi.ConvertType(out[2], new(uint8)).(*uint8)
	out3 := *abi.ConvertType(out[3], new(string)).(*string)
	out4 := *abi.ConvertType(out[4], new(uint8)).(*uint8)
	out5 := *abi.ConvertType(out[5], new(uint8)).(*uint8)
	out6 := *abi.ConvertType(out[6], new(string)).(*string)

	return out0, out1, out2, out3, out4, out5, out6, err

}

// GetAccount is a free data retrieval call binding the contract method 0xfbcbc0f1.
//
// Solidity: function getAccount(address account) view returns(string, string, uint8, string, uint8, uint8, string)
func (_Authority *AuthoritySession) GetAccount(account common.Address) (string, string, uint8, string, uint8, uint8, string, error) {
	return _Authority.Contract.GetAccount(&_Authority.CallOpts, account)
}

// GetAccount is a free data retrieval call binding the contract method 0xfbcbc0f1.
//
// Solidity: function getAccount(address account) view returns(string, string, uint8, string, uint8, uint8, string)
func (_Authority *AuthorityCallerSession) GetAccount(account common.Address) (string, string, uint8, string, uint8, uint8, string, error) {
	return _Authority.Contract.GetAccount(&_Authority.CallOpts, account)
}

// GetFunctions is a free data retrieval call binding the contract method 0xb50f1a5e.
//
// Solidity: function getFunctions(uint8 role, address contractAddress) view returns(bytes4[])
func (_Authority *AuthorityCaller) GetFunctions(opts *bind.CallOpts, role uint8, contractAddress common.Address) ([][4]byte, error) {
	var out []interface{}
	err := _Authority.contract.Call(opts, &out, "getFunctions", role, contractAddress)

	if err != nil {
		return *new([][4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][4]byte)).(*[][4]byte)

	return out0, err

}

// GetFunctions is a free data retrieval call binding the contract method 0xb50f1a5e.
//
// Solidity: function getFunctions(uint8 role, address contractAddress) view returns(bytes4[])
func (_Authority *AuthoritySession) GetFunctions(role uint8, contractAddress common.Address) ([][4]byte, error) {
	return _Authority.Contract.GetFunctions(&_Authority.CallOpts, role, contractAddress)
}

// GetFunctions is a free data retrieval call binding the contract method 0xb50f1a5e.
//
// Solidity: function getFunctions(uint8 role, address contractAddress) view returns(bytes4[])
func (_Authority *AuthorityCallerSession) GetFunctions(role uint8, contractAddress common.Address) ([][4]byte, error) {
	return _Authority.Contract.GetFunctions(&_Authority.CallOpts, role, contractAddress)
}

// HasFunctionPermission is a free data retrieval call binding the contract method 0x470cf0e0.
//
// Solidity: function hasFunctionPermission(address account, address contractAddress, bytes4 sig) view returns(bool)
func (_Authority *AuthorityCaller) HasFunctionPermission(opts *bind.CallOpts, account common.Address, contractAddress common.Address, sig [4]byte) (bool, error) {
	var out []interface{}
	err := _Authority.contract.Call(opts, &out, "hasFunctionPermission", account, contractAddress, sig)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasFunctionPermission is a free data retrieval call binding the contract method 0x470cf0e0.
//
// Solidity: function hasFunctionPermission(address account, address contractAddress, bytes4 sig) view returns(bool)
func (_Authority *AuthoritySession) HasFunctionPermission(account common.Address, contractAddress common.Address, sig [4]byte) (bool, error) {
	return _Authority.Contract.HasFunctionPermission(&_Authority.CallOpts, account, contractAddress, sig)
}

// HasFunctionPermission is a free data retrieval call binding the contract method 0x470cf0e0.
//
// Solidity: function hasFunctionPermission(address account, address contractAddress, bytes4 sig) view returns(bool)
func (_Authority *AuthorityCallerSession) HasFunctionPermission(account common.Address, contractAddress common.Address, sig [4]byte) (bool, error) {
	return _Authority.Contract.HasFunctionPermission(&_Authority.CallOpts, account, contractAddress, sig)
}

// OnePlatformCheck is a free data retrieval call binding the contract method 0x3a723d17.
//
// Solidity: function onePlatformCheck(address acc1, address acc2) view returns(bool)
func (_Authority *AuthorityCaller) OnePlatformCheck(opts *bind.CallOpts, acc1 common.Address, acc2 common.Address) (bool, error) {
	var out []interface{}
	err := _Authority.contract.Call(opts, &out, "onePlatformCheck", acc1, acc2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnePlatformCheck is a free data retrieval call binding the contract method 0x3a723d17.
//
// Solidity: function onePlatformCheck(address acc1, address acc2) view returns(bool)
func (_Authority *AuthoritySession) OnePlatformCheck(acc1 common.Address, acc2 common.Address) (bool, error) {
	return _Authority.Contract.OnePlatformCheck(&_Authority.CallOpts, acc1, acc2)
}

// OnePlatformCheck is a free data retrieval call binding the contract method 0x3a723d17.
//
// Solidity: function onePlatformCheck(address acc1, address acc2) view returns(bool)
func (_Authority *AuthorityCallerSession) OnePlatformCheck(acc1 common.Address, acc2 common.Address) (bool, error) {
	return _Authority.Contract.OnePlatformCheck(&_Authority.CallOpts, acc1, acc2)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Authority *AuthorityCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Authority.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Authority *AuthoritySession) Owner() (common.Address, error) {
	return _Authority.Contract.Owner(&_Authority.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Authority *AuthorityCallerSession) Owner() (common.Address, error) {
	return _Authority.Contract.Owner(&_Authority.CallOpts)
}

// SwitcherStateOfPlatform is a free data retrieval call binding the contract method 0xd3d65ddb.
//
// Solidity: function switcherStateOfPlatform() view returns(bool)
func (_Authority *AuthorityCaller) SwitcherStateOfPlatform(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Authority.contract.Call(opts, &out, "switcherStateOfPlatform")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SwitcherStateOfPlatform is a free data retrieval call binding the contract method 0xd3d65ddb.
//
// Solidity: function switcherStateOfPlatform() view returns(bool)
func (_Authority *AuthoritySession) SwitcherStateOfPlatform() (bool, error) {
	return _Authority.Contract.SwitcherStateOfPlatform(&_Authority.CallOpts)
}

// SwitcherStateOfPlatform is a free data retrieval call binding the contract method 0xd3d65ddb.
//
// Solidity: function switcherStateOfPlatform() view returns(bool)
func (_Authority *AuthorityCallerSession) SwitcherStateOfPlatform() (bool, error) {
	return _Authority.Contract.SwitcherStateOfPlatform(&_Authority.CallOpts)
}

// AddAccountByOperator is a paid mutator transaction binding the contract method 0xe3f00c3a.
//
// Solidity: function addAccountByOperator(address account, string accountName, string accountDID, string leaderDID) returns()
func (_Authority *AuthorityTransactor) AddAccountByOperator(opts *bind.TransactOpts, account common.Address, accountName string, accountDID string, leaderDID string) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "addAccountByOperator", account, accountName, accountDID, leaderDID)
}

// AddAccountByOperator is a paid mutator transaction binding the contract method 0xe3f00c3a.
//
// Solidity: function addAccountByOperator(address account, string accountName, string accountDID, string leaderDID) returns()
func (_Authority *AuthoritySession) AddAccountByOperator(account common.Address, accountName string, accountDID string, leaderDID string) (*types.Transaction, error) {
	return _Authority.Contract.AddAccountByOperator(&_Authority.TransactOpts, account, accountName, accountDID, leaderDID)
}

// AddAccountByOperator is a paid mutator transaction binding the contract method 0xe3f00c3a.
//
// Solidity: function addAccountByOperator(address account, string accountName, string accountDID, string leaderDID) returns()
func (_Authority *AuthorityTransactorSession) AddAccountByOperator(account common.Address, accountName string, accountDID string, leaderDID string) (*types.Transaction, error) {
	return _Authority.Contract.AddAccountByOperator(&_Authority.TransactOpts, account, accountName, accountDID, leaderDID)
}

// AddAccountByPlatform is a paid mutator transaction binding the contract method 0xbea24f20.
//
// Solidity: function addAccountByPlatform(address account, string accountName, string accountDID) returns()
func (_Authority *AuthorityTransactor) AddAccountByPlatform(opts *bind.TransactOpts, account common.Address, accountName string, accountDID string) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "addAccountByPlatform", account, accountName, accountDID)
}

// AddAccountByPlatform is a paid mutator transaction binding the contract method 0xbea24f20.
//
// Solidity: function addAccountByPlatform(address account, string accountName, string accountDID) returns()
func (_Authority *AuthoritySession) AddAccountByPlatform(account common.Address, accountName string, accountDID string) (*types.Transaction, error) {
	return _Authority.Contract.AddAccountByPlatform(&_Authority.TransactOpts, account, accountName, accountDID)
}

// AddAccountByPlatform is a paid mutator transaction binding the contract method 0xbea24f20.
//
// Solidity: function addAccountByPlatform(address account, string accountName, string accountDID) returns()
func (_Authority *AuthorityTransactorSession) AddAccountByPlatform(account common.Address, accountName string, accountDID string) (*types.Transaction, error) {
	return _Authority.Contract.AddAccountByPlatform(&_Authority.TransactOpts, account, accountName, accountDID)
}

// AddBatchAccountByOperator is a paid mutator transaction binding the contract method 0x40208950.
//
// Solidity: function addBatchAccountByOperator(address[] accounts, string[] accountNames, string[] accountDIDs, string[] leaderDIDs) returns()
func (_Authority *AuthorityTransactor) AddBatchAccountByOperator(opts *bind.TransactOpts, accounts []common.Address, accountNames []string, accountDIDs []string, leaderDIDs []string) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "addBatchAccountByOperator", accounts, accountNames, accountDIDs, leaderDIDs)
}

// AddBatchAccountByOperator is a paid mutator transaction binding the contract method 0x40208950.
//
// Solidity: function addBatchAccountByOperator(address[] accounts, string[] accountNames, string[] accountDIDs, string[] leaderDIDs) returns()
func (_Authority *AuthoritySession) AddBatchAccountByOperator(accounts []common.Address, accountNames []string, accountDIDs []string, leaderDIDs []string) (*types.Transaction, error) {
	return _Authority.Contract.AddBatchAccountByOperator(&_Authority.TransactOpts, accounts, accountNames, accountDIDs, leaderDIDs)
}

// AddBatchAccountByOperator is a paid mutator transaction binding the contract method 0x40208950.
//
// Solidity: function addBatchAccountByOperator(address[] accounts, string[] accountNames, string[] accountDIDs, string[] leaderDIDs) returns()
func (_Authority *AuthorityTransactorSession) AddBatchAccountByOperator(accounts []common.Address, accountNames []string, accountDIDs []string, leaderDIDs []string) (*types.Transaction, error) {
	return _Authority.Contract.AddBatchAccountByOperator(&_Authority.TransactOpts, accounts, accountNames, accountDIDs, leaderDIDs)
}

// AddBatchAccountByPlatform is a paid mutator transaction binding the contract method 0xcf149c6d.
//
// Solidity: function addBatchAccountByPlatform(address[] accounts, string[] accountNames, string[] accountDIDs) returns()
func (_Authority *AuthorityTransactor) AddBatchAccountByPlatform(opts *bind.TransactOpts, accounts []common.Address, accountNames []string, accountDIDs []string) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "addBatchAccountByPlatform", accounts, accountNames, accountDIDs)
}

// AddBatchAccountByPlatform is a paid mutator transaction binding the contract method 0xcf149c6d.
//
// Solidity: function addBatchAccountByPlatform(address[] accounts, string[] accountNames, string[] accountDIDs) returns()
func (_Authority *AuthoritySession) AddBatchAccountByPlatform(accounts []common.Address, accountNames []string, accountDIDs []string) (*types.Transaction, error) {
	return _Authority.Contract.AddBatchAccountByPlatform(&_Authority.TransactOpts, accounts, accountNames, accountDIDs)
}

// AddBatchAccountByPlatform is a paid mutator transaction binding the contract method 0xcf149c6d.
//
// Solidity: function addBatchAccountByPlatform(address[] accounts, string[] accountNames, string[] accountDIDs) returns()
func (_Authority *AuthorityTransactorSession) AddBatchAccountByPlatform(accounts []common.Address, accountNames []string, accountDIDs []string) (*types.Transaction, error) {
	return _Authority.Contract.AddBatchAccountByPlatform(&_Authority.TransactOpts, accounts, accountNames, accountDIDs)
}

// AddFunction is a paid mutator transaction binding the contract method 0xfaf3c53f.
//
// Solidity: function addFunction(uint8 role, address contractAddress, bytes4 sig) returns()
func (_Authority *AuthorityTransactor) AddFunction(opts *bind.TransactOpts, role uint8, contractAddress common.Address, sig [4]byte) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "addFunction", role, contractAddress, sig)
}

// AddFunction is a paid mutator transaction binding the contract method 0xfaf3c53f.
//
// Solidity: function addFunction(uint8 role, address contractAddress, bytes4 sig) returns()
func (_Authority *AuthoritySession) AddFunction(role uint8, contractAddress common.Address, sig [4]byte) (*types.Transaction, error) {
	return _Authority.Contract.AddFunction(&_Authority.TransactOpts, role, contractAddress, sig)
}

// AddFunction is a paid mutator transaction binding the contract method 0xfaf3c53f.
//
// Solidity: function addFunction(uint8 role, address contractAddress, bytes4 sig) returns()
func (_Authority *AuthorityTransactorSession) AddFunction(role uint8, contractAddress common.Address, sig [4]byte) (*types.Transaction, error) {
	return _Authority.Contract.AddFunction(&_Authority.TransactOpts, role, contractAddress, sig)
}

// AddOperator is a paid mutator transaction binding the contract method 0xe1576897.
//
// Solidity: function addOperator(address operator, string accountName, string accountDID) returns()
func (_Authority *AuthorityTransactor) AddOperator(opts *bind.TransactOpts, operator common.Address, accountName string, accountDID string) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "addOperator", operator, accountName, accountDID)
}

// AddOperator is a paid mutator transaction binding the contract method 0xe1576897.
//
// Solidity: function addOperator(address operator, string accountName, string accountDID) returns()
func (_Authority *AuthoritySession) AddOperator(operator common.Address, accountName string, accountDID string) (*types.Transaction, error) {
	return _Authority.Contract.AddOperator(&_Authority.TransactOpts, operator, accountName, accountDID)
}

// AddOperator is a paid mutator transaction binding the contract method 0xe1576897.
//
// Solidity: function addOperator(address operator, string accountName, string accountDID) returns()
func (_Authority *AuthorityTransactorSession) AddOperator(operator common.Address, accountName string, accountDID string) (*types.Transaction, error) {
	return _Authority.Contract.AddOperator(&_Authority.TransactOpts, operator, accountName, accountDID)
}

// CrossPlatformApproval is a paid mutator transaction binding the contract method 0x05e847fb.
//
// Solidity: function crossPlatformApproval(address from, address to, bool approved) returns()
func (_Authority *AuthorityTransactor) CrossPlatformApproval(opts *bind.TransactOpts, from common.Address, to common.Address, approved bool) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "crossPlatformApproval", from, to, approved)
}

// CrossPlatformApproval is a paid mutator transaction binding the contract method 0x05e847fb.
//
// Solidity: function crossPlatformApproval(address from, address to, bool approved) returns()
func (_Authority *AuthoritySession) CrossPlatformApproval(from common.Address, to common.Address, approved bool) (*types.Transaction, error) {
	return _Authority.Contract.CrossPlatformApproval(&_Authority.TransactOpts, from, to, approved)
}

// CrossPlatformApproval is a paid mutator transaction binding the contract method 0x05e847fb.
//
// Solidity: function crossPlatformApproval(address from, address to, bool approved) returns()
func (_Authority *AuthorityTransactorSession) CrossPlatformApproval(from common.Address, to common.Address, approved bool) (*types.Transaction, error) {
	return _Authority.Contract.CrossPlatformApproval(&_Authority.TransactOpts, from, to, approved)
}

// DelFunction is a paid mutator transaction binding the contract method 0xa6ff8f0c.
//
// Solidity: function delFunction(uint8 role, address contractAddress, bytes4 sig) returns()
func (_Authority *AuthorityTransactor) DelFunction(opts *bind.TransactOpts, role uint8, contractAddress common.Address, sig [4]byte) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "delFunction", role, contractAddress, sig)
}

// DelFunction is a paid mutator transaction binding the contract method 0xa6ff8f0c.
//
// Solidity: function delFunction(uint8 role, address contractAddress, bytes4 sig) returns()
func (_Authority *AuthoritySession) DelFunction(role uint8, contractAddress common.Address, sig [4]byte) (*types.Transaction, error) {
	return _Authority.Contract.DelFunction(&_Authority.TransactOpts, role, contractAddress, sig)
}

// DelFunction is a paid mutator transaction binding the contract method 0xa6ff8f0c.
//
// Solidity: function delFunction(uint8 role, address contractAddress, bytes4 sig) returns()
func (_Authority *AuthorityTransactorSession) DelFunction(role uint8, contractAddress common.Address, sig [4]byte) (*types.Transaction, error) {
	return _Authority.Contract.DelFunction(&_Authority.TransactOpts, role, contractAddress, sig)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Authority *AuthorityTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Authority *AuthoritySession) Initialize() (*types.Transaction, error) {
	return _Authority.Contract.Initialize(&_Authority.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_Authority *AuthorityTransactorSession) Initialize() (*types.Transaction, error) {
	return _Authority.Contract.Initialize(&_Authority.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Authority *AuthorityTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Authority *AuthoritySession) RenounceOwnership() (*types.Transaction, error) {
	return _Authority.Contract.RenounceOwnership(&_Authority.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Authority *AuthorityTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Authority.Contract.RenounceOwnership(&_Authority.TransactOpts)
}

// SetSwitcherStateOfPlatform is a paid mutator transaction binding the contract method 0xa8dd7ce8.
//
// Solidity: function setSwitcherStateOfPlatform(bool isOpen) returns()
func (_Authority *AuthorityTransactor) SetSwitcherStateOfPlatform(opts *bind.TransactOpts, isOpen bool) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "setSwitcherStateOfPlatform", isOpen)
}

// SetSwitcherStateOfPlatform is a paid mutator transaction binding the contract method 0xa8dd7ce8.
//
// Solidity: function setSwitcherStateOfPlatform(bool isOpen) returns()
func (_Authority *AuthoritySession) SetSwitcherStateOfPlatform(isOpen bool) (*types.Transaction, error) {
	return _Authority.Contract.SetSwitcherStateOfPlatform(&_Authority.TransactOpts, isOpen)
}

// SetSwitcherStateOfPlatform is a paid mutator transaction binding the contract method 0xa8dd7ce8.
//
// Solidity: function setSwitcherStateOfPlatform(bool isOpen) returns()
func (_Authority *AuthorityTransactorSession) SetSwitcherStateOfPlatform(isOpen bool) (*types.Transaction, error) {
	return _Authority.Contract.SetSwitcherStateOfPlatform(&_Authority.TransactOpts, isOpen)
}

// SyncPlatformDID is a paid mutator transaction binding the contract method 0xb9b89dca.
//
// Solidity: function syncPlatformDID(string[] dids) returns()
func (_Authority *AuthorityTransactor) SyncPlatformDID(opts *bind.TransactOpts, dids []string) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "syncPlatformDID", dids)
}

// SyncPlatformDID is a paid mutator transaction binding the contract method 0xb9b89dca.
//
// Solidity: function syncPlatformDID(string[] dids) returns()
func (_Authority *AuthoritySession) SyncPlatformDID(dids []string) (*types.Transaction, error) {
	return _Authority.Contract.SyncPlatformDID(&_Authority.TransactOpts, dids)
}

// SyncPlatformDID is a paid mutator transaction binding the contract method 0xb9b89dca.
//
// Solidity: function syncPlatformDID(string[] dids) returns()
func (_Authority *AuthorityTransactorSession) SyncPlatformDID(dids []string) (*types.Transaction, error) {
	return _Authority.Contract.SyncPlatformDID(&_Authority.TransactOpts, dids)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Authority *AuthorityTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Authority *AuthoritySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Authority.Contract.TransferOwnership(&_Authority.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Authority *AuthorityTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Authority.Contract.TransferOwnership(&_Authority.TransactOpts, newOwner)
}

// UpdateAccountState is a paid mutator transaction binding the contract method 0xbac7ad52.
//
// Solidity: function updateAccountState(address account, uint8 state, bool changePlatformState) returns()
func (_Authority *AuthorityTransactor) UpdateAccountState(opts *bind.TransactOpts, account common.Address, state uint8, changePlatformState bool) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "updateAccountState", account, state, changePlatformState)
}

// UpdateAccountState is a paid mutator transaction binding the contract method 0xbac7ad52.
//
// Solidity: function updateAccountState(address account, uint8 state, bool changePlatformState) returns()
func (_Authority *AuthoritySession) UpdateAccountState(account common.Address, state uint8, changePlatformState bool) (*types.Transaction, error) {
	return _Authority.Contract.UpdateAccountState(&_Authority.TransactOpts, account, state, changePlatformState)
}

// UpdateAccountState is a paid mutator transaction binding the contract method 0xbac7ad52.
//
// Solidity: function updateAccountState(address account, uint8 state, bool changePlatformState) returns()
func (_Authority *AuthorityTransactorSession) UpdateAccountState(account common.Address, state uint8, changePlatformState bool) (*types.Transaction, error) {
	return _Authority.Contract.UpdateAccountState(&_Authority.TransactOpts, account, state, changePlatformState)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Authority *AuthorityTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Authority *AuthoritySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Authority.Contract.UpgradeTo(&_Authority.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Authority *AuthorityTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Authority.Contract.UpgradeTo(&_Authority.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Authority *AuthorityTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Authority.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Authority *AuthoritySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Authority.Contract.UpgradeToAndCall(&_Authority.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Authority *AuthorityTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Authority.Contract.UpgradeToAndCall(&_Authority.TransactOpts, newImplementation, data)
}

// AuthorityAddAccountIterator is returned from FilterAddAccount and is used to iterate over the raw logs and unpacked data for AddAccount events raised by the Authority contract.
type AuthorityAddAccountIterator struct {
	Event *AuthorityAddAccount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityAddAccountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityAddAccount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityAddAccount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityAddAccountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityAddAccountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityAddAccount represents a AddAccount event raised by the Authority contract.
type AuthorityAddAccount struct {
	Caller  common.Address
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAddAccount is a free log retrieval operation binding the contract event 0xd246aa772c5574778b374ed1202c22bac9c87a04fd3624439c2642fa6ca62171.
//
// Solidity: event AddAccount(address indexed caller, address indexed account)
func (_Authority *AuthorityFilterer) FilterAddAccount(opts *bind.FilterOpts, caller []common.Address, account []common.Address) (*AuthorityAddAccountIterator, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "AddAccount", callerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return &AuthorityAddAccountIterator{contract: _Authority.contract, event: "AddAccount", logs: logs, sub: sub}, nil
}

// WatchAddAccount is a free log subscription operation binding the contract event 0xd246aa772c5574778b374ed1202c22bac9c87a04fd3624439c2642fa6ca62171.
//
// Solidity: event AddAccount(address indexed caller, address indexed account)
func (_Authority *AuthorityFilterer) WatchAddAccount(opts *bind.WatchOpts, sink chan<- *AuthorityAddAccount, caller []common.Address, account []common.Address) (event.Subscription, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "AddAccount", callerRule, accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityAddAccount)
				if err := _Authority.contract.UnpackLog(event, "AddAccount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddAccount is a log parse operation binding the contract event 0xd246aa772c5574778b374ed1202c22bac9c87a04fd3624439c2642fa6ca62171.
//
// Solidity: event AddAccount(address indexed caller, address indexed account)
func (_Authority *AuthorityFilterer) ParseAddAccount(log types.Log) (*AuthorityAddAccount, error) {
	event := new(AuthorityAddAccount)
	if err := _Authority.contract.UnpackLog(event, "AddAccount", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthorityAddBatchAccountIterator is returned from FilterAddBatchAccount and is used to iterate over the raw logs and unpacked data for AddBatchAccount events raised by the Authority contract.
type AuthorityAddBatchAccountIterator struct {
	Event *AuthorityAddBatchAccount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityAddBatchAccountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityAddBatchAccount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityAddBatchAccount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityAddBatchAccountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityAddBatchAccountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityAddBatchAccount represents a AddBatchAccount event raised by the Authority contract.
type AuthorityAddBatchAccount struct {
	Caller   common.Address
	Accounts []common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAddBatchAccount is a free log retrieval operation binding the contract event 0x697b1ca999dc9fa10f6b5121c3681b6e562901370eebdabe6a41f253731ee2b9.
//
// Solidity: event AddBatchAccount(address indexed caller, address[] indexed accounts)
func (_Authority *AuthorityFilterer) FilterAddBatchAccount(opts *bind.FilterOpts, caller []common.Address, accounts [][]common.Address) (*AuthorityAddBatchAccountIterator, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}
	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "AddBatchAccount", callerRule, accountsRule)
	if err != nil {
		return nil, err
	}
	return &AuthorityAddBatchAccountIterator{contract: _Authority.contract, event: "AddBatchAccount", logs: logs, sub: sub}, nil
}

// WatchAddBatchAccount is a free log subscription operation binding the contract event 0x697b1ca999dc9fa10f6b5121c3681b6e562901370eebdabe6a41f253731ee2b9.
//
// Solidity: event AddBatchAccount(address indexed caller, address[] indexed accounts)
func (_Authority *AuthorityFilterer) WatchAddBatchAccount(opts *bind.WatchOpts, sink chan<- *AuthorityAddBatchAccount, caller []common.Address, accounts [][]common.Address) (event.Subscription, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}
	var accountsRule []interface{}
	for _, accountsItem := range accounts {
		accountsRule = append(accountsRule, accountsItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "AddBatchAccount", callerRule, accountsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityAddBatchAccount)
				if err := _Authority.contract.UnpackLog(event, "AddBatchAccount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddBatchAccount is a log parse operation binding the contract event 0x697b1ca999dc9fa10f6b5121c3681b6e562901370eebdabe6a41f253731ee2b9.
//
// Solidity: event AddBatchAccount(address indexed caller, address[] indexed accounts)
func (_Authority *AuthorityFilterer) ParseAddBatchAccount(log types.Log) (*AuthorityAddBatchAccount, error) {
	event := new(AuthorityAddBatchAccount)
	if err := _Authority.contract.UnpackLog(event, "AddBatchAccount", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthorityAddFunctionIterator is returned from FilterAddFunction and is used to iterate over the raw logs and unpacked data for AddFunction events raised by the Authority contract.
type AuthorityAddFunctionIterator struct {
	Event *AuthorityAddFunction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityAddFunctionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityAddFunction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityAddFunction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityAddFunctionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityAddFunctionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityAddFunction represents a AddFunction event raised by the Authority contract.
type AuthorityAddFunction struct {
	Operator        common.Address
	Role            uint8
	ContractAddress common.Address
	Sig             [4]byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAddFunction is a free log retrieval operation binding the contract event 0xd2925d5c000f95a189be5c6c90c0dc14f33c077900241eb3e7c0a287d914e650.
//
// Solidity: event AddFunction(address indexed operator, uint8 indexed role, address contractAddress, bytes4 sig)
func (_Authority *AuthorityFilterer) FilterAddFunction(opts *bind.FilterOpts, operator []common.Address, role []uint8) (*AuthorityAddFunctionIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "AddFunction", operatorRule, roleRule)
	if err != nil {
		return nil, err
	}
	return &AuthorityAddFunctionIterator{contract: _Authority.contract, event: "AddFunction", logs: logs, sub: sub}, nil
}

// WatchAddFunction is a free log subscription operation binding the contract event 0xd2925d5c000f95a189be5c6c90c0dc14f33c077900241eb3e7c0a287d914e650.
//
// Solidity: event AddFunction(address indexed operator, uint8 indexed role, address contractAddress, bytes4 sig)
func (_Authority *AuthorityFilterer) WatchAddFunction(opts *bind.WatchOpts, sink chan<- *AuthorityAddFunction, operator []common.Address, role []uint8) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "AddFunction", operatorRule, roleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityAddFunction)
				if err := _Authority.contract.UnpackLog(event, "AddFunction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddFunction is a log parse operation binding the contract event 0xd2925d5c000f95a189be5c6c90c0dc14f33c077900241eb3e7c0a287d914e650.
//
// Solidity: event AddFunction(address indexed operator, uint8 indexed role, address contractAddress, bytes4 sig)
func (_Authority *AuthorityFilterer) ParseAddFunction(log types.Log) (*AuthorityAddFunction, error) {
	event := new(AuthorityAddFunction)
	if err := _Authority.contract.UnpackLog(event, "AddFunction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthorityAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Authority contract.
type AuthorityAdminChangedIterator struct {
	Event *AuthorityAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityAdminChanged represents a AdminChanged event raised by the Authority contract.
type AuthorityAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Authority *AuthorityFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*AuthorityAdminChangedIterator, error) {

	logs, sub, err := _Authority.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &AuthorityAdminChangedIterator{contract: _Authority.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Authority *AuthorityFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *AuthorityAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Authority.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityAdminChanged)
				if err := _Authority.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Authority *AuthorityFilterer) ParseAdminChanged(log types.Log) (*AuthorityAdminChanged, error) {
	event := new(AuthorityAdminChanged)
	if err := _Authority.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthorityBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Authority contract.
type AuthorityBeaconUpgradedIterator struct {
	Event *AuthorityBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityBeaconUpgraded represents a BeaconUpgraded event raised by the Authority contract.
type AuthorityBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Authority *AuthorityFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*AuthorityBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &AuthorityBeaconUpgradedIterator{contract: _Authority.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Authority *AuthorityFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *AuthorityBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityBeaconUpgraded)
				if err := _Authority.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Authority *AuthorityFilterer) ParseBeaconUpgraded(log types.Log) (*AuthorityBeaconUpgraded, error) {
	event := new(AuthorityBeaconUpgraded)
	if err := _Authority.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthorityCrossPlatformApprovalIterator is returned from FilterCrossPlatformApproval and is used to iterate over the raw logs and unpacked data for CrossPlatformApproval events raised by the Authority contract.
type AuthorityCrossPlatformApprovalIterator struct {
	Event *AuthorityCrossPlatformApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityCrossPlatformApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityCrossPlatformApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityCrossPlatformApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityCrossPlatformApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityCrossPlatformApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityCrossPlatformApproval represents a CrossPlatformApproval event raised by the Authority contract.
type AuthorityCrossPlatformApproval struct {
	From     common.Address
	To       common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterCrossPlatformApproval is a free log retrieval operation binding the contract event 0x944da3aaddcf895695572377f73f4b10c3822d1ea336c5d59f364f3e5e1b1218.
//
// Solidity: event CrossPlatformApproval(address indexed from, address indexed to, bool approved)
func (_Authority *AuthorityFilterer) FilterCrossPlatformApproval(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AuthorityCrossPlatformApprovalIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "CrossPlatformApproval", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AuthorityCrossPlatformApprovalIterator{contract: _Authority.contract, event: "CrossPlatformApproval", logs: logs, sub: sub}, nil
}

// WatchCrossPlatformApproval is a free log subscription operation binding the contract event 0x944da3aaddcf895695572377f73f4b10c3822d1ea336c5d59f364f3e5e1b1218.
//
// Solidity: event CrossPlatformApproval(address indexed from, address indexed to, bool approved)
func (_Authority *AuthorityFilterer) WatchCrossPlatformApproval(opts *bind.WatchOpts, sink chan<- *AuthorityCrossPlatformApproval, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "CrossPlatformApproval", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityCrossPlatformApproval)
				if err := _Authority.contract.UnpackLog(event, "CrossPlatformApproval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCrossPlatformApproval is a log parse operation binding the contract event 0x944da3aaddcf895695572377f73f4b10c3822d1ea336c5d59f364f3e5e1b1218.
//
// Solidity: event CrossPlatformApproval(address indexed from, address indexed to, bool approved)
func (_Authority *AuthorityFilterer) ParseCrossPlatformApproval(log types.Log) (*AuthorityCrossPlatformApproval, error) {
	event := new(AuthorityCrossPlatformApproval)
	if err := _Authority.contract.UnpackLog(event, "CrossPlatformApproval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthorityDelFunctionIterator is returned from FilterDelFunction and is used to iterate over the raw logs and unpacked data for DelFunction events raised by the Authority contract.
type AuthorityDelFunctionIterator struct {
	Event *AuthorityDelFunction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityDelFunctionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityDelFunction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityDelFunction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityDelFunctionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityDelFunctionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityDelFunction represents a DelFunction event raised by the Authority contract.
type AuthorityDelFunction struct {
	Operator        common.Address
	Role            uint8
	ContractAddress common.Address
	Sig             [4]byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelFunction is a free log retrieval operation binding the contract event 0xfd7321e06212c7e20cb40ffe695d160cb669329e947bbcab975e41e985153417.
//
// Solidity: event DelFunction(address indexed operator, uint8 indexed role, address contractAddress, bytes4 sig)
func (_Authority *AuthorityFilterer) FilterDelFunction(opts *bind.FilterOpts, operator []common.Address, role []uint8) (*AuthorityDelFunctionIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "DelFunction", operatorRule, roleRule)
	if err != nil {
		return nil, err
	}
	return &AuthorityDelFunctionIterator{contract: _Authority.contract, event: "DelFunction", logs: logs, sub: sub}, nil
}

// WatchDelFunction is a free log subscription operation binding the contract event 0xfd7321e06212c7e20cb40ffe695d160cb669329e947bbcab975e41e985153417.
//
// Solidity: event DelFunction(address indexed operator, uint8 indexed role, address contractAddress, bytes4 sig)
func (_Authority *AuthorityFilterer) WatchDelFunction(opts *bind.WatchOpts, sink chan<- *AuthorityDelFunction, operator []common.Address, role []uint8) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "DelFunction", operatorRule, roleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityDelFunction)
				if err := _Authority.contract.UnpackLog(event, "DelFunction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelFunction is a log parse operation binding the contract event 0xfd7321e06212c7e20cb40ffe695d160cb669329e947bbcab975e41e985153417.
//
// Solidity: event DelFunction(address indexed operator, uint8 indexed role, address contractAddress, bytes4 sig)
func (_Authority *AuthorityFilterer) ParseDelFunction(log types.Log) (*AuthorityDelFunction, error) {
	event := new(AuthorityDelFunction)
	if err := _Authority.contract.UnpackLog(event, "DelFunction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthorityOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Authority contract.
type AuthorityOwnershipTransferredIterator struct {
	Event *AuthorityOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityOwnershipTransferred represents a OwnershipTransferred event raised by the Authority contract.
type AuthorityOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Authority *AuthorityFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AuthorityOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AuthorityOwnershipTransferredIterator{contract: _Authority.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Authority *AuthorityFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AuthorityOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityOwnershipTransferred)
				if err := _Authority.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Authority *AuthorityFilterer) ParseOwnershipTransferred(log types.Log) (*AuthorityOwnershipTransferred, error) {
	event := new(AuthorityOwnershipTransferred)
	if err := _Authority.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthoritySetSwitcherStateOfPlatformIterator is returned from FilterSetSwitcherStateOfPlatform and is used to iterate over the raw logs and unpacked data for SetSwitcherStateOfPlatform events raised by the Authority contract.
type AuthoritySetSwitcherStateOfPlatformIterator struct {
	Event *AuthoritySetSwitcherStateOfPlatform // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthoritySetSwitcherStateOfPlatformIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthoritySetSwitcherStateOfPlatform)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthoritySetSwitcherStateOfPlatform)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthoritySetSwitcherStateOfPlatformIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthoritySetSwitcherStateOfPlatformIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthoritySetSwitcherStateOfPlatform represents a SetSwitcherStateOfPlatform event raised by the Authority contract.
type AuthoritySetSwitcherStateOfPlatform struct {
	Operator common.Address
	IsOpen   bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetSwitcherStateOfPlatform is a free log retrieval operation binding the contract event 0x548b8e30af324db539fea4a4816919b2d27ab094df8638f0e3c16c7271d79860.
//
// Solidity: event SetSwitcherStateOfPlatform(address indexed operator, bool isOpen)
func (_Authority *AuthorityFilterer) FilterSetSwitcherStateOfPlatform(opts *bind.FilterOpts, operator []common.Address) (*AuthoritySetSwitcherStateOfPlatformIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "SetSwitcherStateOfPlatform", operatorRule)
	if err != nil {
		return nil, err
	}
	return &AuthoritySetSwitcherStateOfPlatformIterator{contract: _Authority.contract, event: "SetSwitcherStateOfPlatform", logs: logs, sub: sub}, nil
}

// WatchSetSwitcherStateOfPlatform is a free log subscription operation binding the contract event 0x548b8e30af324db539fea4a4816919b2d27ab094df8638f0e3c16c7271d79860.
//
// Solidity: event SetSwitcherStateOfPlatform(address indexed operator, bool isOpen)
func (_Authority *AuthorityFilterer) WatchSetSwitcherStateOfPlatform(opts *bind.WatchOpts, sink chan<- *AuthoritySetSwitcherStateOfPlatform, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "SetSwitcherStateOfPlatform", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthoritySetSwitcherStateOfPlatform)
				if err := _Authority.contract.UnpackLog(event, "SetSwitcherStateOfPlatform", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetSwitcherStateOfPlatform is a log parse operation binding the contract event 0x548b8e30af324db539fea4a4816919b2d27ab094df8638f0e3c16c7271d79860.
//
// Solidity: event SetSwitcherStateOfPlatform(address indexed operator, bool isOpen)
func (_Authority *AuthorityFilterer) ParseSetSwitcherStateOfPlatform(log types.Log) (*AuthoritySetSwitcherStateOfPlatform, error) {
	event := new(AuthoritySetSwitcherStateOfPlatform)
	if err := _Authority.contract.UnpackLog(event, "SetSwitcherStateOfPlatform", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthoritySyncPlatformDIDIterator is returned from FilterSyncPlatformDID and is used to iterate over the raw logs and unpacked data for SyncPlatformDID events raised by the Authority contract.
type AuthoritySyncPlatformDIDIterator struct {
	Event *AuthoritySyncPlatformDID // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthoritySyncPlatformDIDIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthoritySyncPlatformDID)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthoritySyncPlatformDID)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthoritySyncPlatformDIDIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthoritySyncPlatformDIDIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthoritySyncPlatformDID represents a SyncPlatformDID event raised by the Authority contract.
type AuthoritySyncPlatformDID struct {
	Operator common.Address
	Dids     []string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSyncPlatformDID is a free log retrieval operation binding the contract event 0x199521935c6599c790890fbd51923a1d92fb29f6691b18e985938fab4070e8ec.
//
// Solidity: event SyncPlatformDID(address indexed operator, string[] dids)
func (_Authority *AuthorityFilterer) FilterSyncPlatformDID(opts *bind.FilterOpts, operator []common.Address) (*AuthoritySyncPlatformDIDIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "SyncPlatformDID", operatorRule)
	if err != nil {
		return nil, err
	}
	return &AuthoritySyncPlatformDIDIterator{contract: _Authority.contract, event: "SyncPlatformDID", logs: logs, sub: sub}, nil
}

// WatchSyncPlatformDID is a free log subscription operation binding the contract event 0x199521935c6599c790890fbd51923a1d92fb29f6691b18e985938fab4070e8ec.
//
// Solidity: event SyncPlatformDID(address indexed operator, string[] dids)
func (_Authority *AuthorityFilterer) WatchSyncPlatformDID(opts *bind.WatchOpts, sink chan<- *AuthoritySyncPlatformDID, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "SyncPlatformDID", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthoritySyncPlatformDID)
				if err := _Authority.contract.UnpackLog(event, "SyncPlatformDID", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncPlatformDID is a log parse operation binding the contract event 0x199521935c6599c790890fbd51923a1d92fb29f6691b18e985938fab4070e8ec.
//
// Solidity: event SyncPlatformDID(address indexed operator, string[] dids)
func (_Authority *AuthorityFilterer) ParseSyncPlatformDID(log types.Log) (*AuthoritySyncPlatformDID, error) {
	event := new(AuthoritySyncPlatformDID)
	if err := _Authority.contract.UnpackLog(event, "SyncPlatformDID", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthorityUpdateAccountStateIterator is returned from FilterUpdateAccountState and is used to iterate over the raw logs and unpacked data for UpdateAccountState events raised by the Authority contract.
type AuthorityUpdateAccountStateIterator struct {
	Event *AuthorityUpdateAccountState // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityUpdateAccountStateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityUpdateAccountState)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityUpdateAccountState)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityUpdateAccountStateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityUpdateAccountStateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityUpdateAccountState represents a UpdateAccountState event raised by the Authority contract.
type AuthorityUpdateAccountState struct {
	Account       common.Address
	PlatformState uint8
	OperatorState uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUpdateAccountState is a free log retrieval operation binding the contract event 0x3a99d1f905eb66fd0850dd6e2156668b6ae1f16f41cd49dd7c6d4fb5147f784f.
//
// Solidity: event UpdateAccountState(address indexed account, uint8 platformState, uint8 operatorState)
func (_Authority *AuthorityFilterer) FilterUpdateAccountState(opts *bind.FilterOpts, account []common.Address) (*AuthorityUpdateAccountStateIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "UpdateAccountState", accountRule)
	if err != nil {
		return nil, err
	}
	return &AuthorityUpdateAccountStateIterator{contract: _Authority.contract, event: "UpdateAccountState", logs: logs, sub: sub}, nil
}

// WatchUpdateAccountState is a free log subscription operation binding the contract event 0x3a99d1f905eb66fd0850dd6e2156668b6ae1f16f41cd49dd7c6d4fb5147f784f.
//
// Solidity: event UpdateAccountState(address indexed account, uint8 platformState, uint8 operatorState)
func (_Authority *AuthorityFilterer) WatchUpdateAccountState(opts *bind.WatchOpts, sink chan<- *AuthorityUpdateAccountState, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "UpdateAccountState", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityUpdateAccountState)
				if err := _Authority.contract.UnpackLog(event, "UpdateAccountState", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateAccountState is a log parse operation binding the contract event 0x3a99d1f905eb66fd0850dd6e2156668b6ae1f16f41cd49dd7c6d4fb5147f784f.
//
// Solidity: event UpdateAccountState(address indexed account, uint8 platformState, uint8 operatorState)
func (_Authority *AuthorityFilterer) ParseUpdateAccountState(log types.Log) (*AuthorityUpdateAccountState, error) {
	event := new(AuthorityUpdateAccountState)
	if err := _Authority.contract.UnpackLog(event, "UpdateAccountState", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AuthorityUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Authority contract.
type AuthorityUpgradedIterator struct {
	Event *AuthorityUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AuthorityUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AuthorityUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AuthorityUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AuthorityUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AuthorityUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AuthorityUpgraded represents a Upgraded event raised by the Authority contract.
type AuthorityUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Authority *AuthorityFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*AuthorityUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Authority.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AuthorityUpgradedIterator{contract: _Authority.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Authority *AuthorityFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *AuthorityUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Authority.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AuthorityUpgraded)
				if err := _Authority.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Authority *AuthorityFilterer) ParseUpgraded(log types.Log) (*AuthorityUpgraded, error) {
	event := new(AuthorityUpgraded)
	if err := _Authority.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
